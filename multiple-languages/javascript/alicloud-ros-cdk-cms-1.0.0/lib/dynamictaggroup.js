"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DynamicTagGroup = exports.DynamicTagGroupProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cms_generated_1 = require("./cms.generated");
Object.defineProperty(exports, "DynamicTagGroupProperty", { enumerable: true, get: function () { return cms_generated_1.RosDynamicTagGroup; } });
/**
 * A ROS resource type:  `ALIYUN::CMS::DynamicTagGroup`
 */
class DynamicTagGroup extends ros.Resource {
    /**
     * Create a new `ALIYUN::CMS::DynamicTagGroup`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosDynamicTagGroup = new cms_generated_1.RosDynamicTagGroup(this, id, {
            contactGroupList: props.contactGroupList,
            matchExpressFilterRelation: props.matchExpressFilterRelation,
            enableSubscribeEvent: props.enableSubscribeEvent,
            templateIdList: props.templateIdList,
            tagKey: props.tagKey,
            enableInstallAgent: props.enableInstallAgent,
            matchExpress: props.matchExpress,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDynamicTagGroup;
        this.attrDynamicTagRuleId = rosDynamicTagGroup.attrDynamicTagRuleId;
        this.attrTagKey = rosDynamicTagGroup.attrTagKey;
    }
}
exports.DynamicTagGroup = DynamicTagGroup;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pY3RhZ2dyb3VwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZHluYW1pY3RhZ2dyb3VwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBcUQ7QUFFdEIsd0dBRnRCLGtDQUFrQixPQUUyQjtBQW9EdEQ7O0dBRUc7QUFDSCxNQUFhLGVBQWdCLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFpQjdDOzs7Ozs7T0FNRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBMkIsRUFBRSxtQ0FBMkMsSUFBSTtRQUN0SCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxrQ0FBa0IsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ3pELGdCQUFnQixFQUFFLEtBQUssQ0FBQyxnQkFBZ0I7WUFDeEMsMEJBQTBCLEVBQUUsS0FBSyxDQUFDLDBCQUEwQjtZQUM1RCxvQkFBb0IsRUFBRSxLQUFLLENBQUMsb0JBQW9CO1lBQ2hELGNBQWMsRUFBRSxLQUFLLENBQUMsY0FBYztZQUNwQyxNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU07WUFDcEIsa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGtCQUFrQjtZQUM1QyxZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVk7U0FDbkMsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxrQkFBa0IsQ0FBQztRQUNuQyxJQUFJLENBQUMsb0JBQW9CLEdBQUcsa0JBQWtCLENBQUMsb0JBQW9CLENBQUM7UUFDcEUsSUFBSSxDQUFDLFVBQVUsR0FBRyxrQkFBa0IsQ0FBQyxVQUFVLENBQUM7SUFDcEQsQ0FBQztDQUNKO0FBeENELDBDQXdDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc0R5bmFtaWNUYWdHcm91cCB9IGZyb20gJy4vY21zLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0R5bmFtaWNUYWdHcm91cCBhcyBEeW5hbWljVGFnR3JvdXBQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYEFMSVlVTjo6Q01TOjpEeW5hbWljVGFnR3JvdXBgXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRHluYW1pY1RhZ0dyb3VwUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGNvbnRhY3RHcm91cExpc3Q6IEFsYXJtIGNvbnRhY3RzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNvbnRhY3RHcm91cExpc3Q6IHN0cmluZ1tdO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHRhZ0tleTogVGFnIGtleS5cbiAgICAgKi9cbiAgICByZWFkb25seSB0YWdLZXk6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBlbmFibGVJbnN0YWxsQWdlbnQ6IFdoZXRoZXIgdG8gZW5hYmxlIGluaXRpYWwgaW5zdGFsbGF0aW9uIG1vbml0b3JpbmcgcGx1Zywgbm90IGluc3RhbGxlZCBieSBkZWZhdWx0LiBWYWx1ZXMgYXJlOlxuICAgICAqIHRydWU6IGVuYWJsZSBpbnN0YWxsYXRpb25cbiAgICAgKiBOb3RlIElmIEVDUyBnZW5lcmF0ZWQgaW5zdGFuY2VzIGdyb3VwIGRvZXMgbm90IG1vbml0b3IgcGx1Zy1pbiBpbnN0YWxsZWQgd2lsbCBhdHRlbXB0IHRvIGF1dG9tYXRpY2FsbHkgaW5zdGFsbC5cbiAgICAgKiBmYWxzZTogZGlzYWJsZSBpbnN0YWxsYXRpb25cbiAgICAgKi9cbiAgICByZWFkb25seSBlbmFibGVJbnN0YWxsQWdlbnQ/OiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGVuYWJsZVN1YnNjcmliZUV2ZW50OiBXaGV0aGVyIHRoZSBldmVudCBzdWJzY3JpcHRpb24gaXMgZW5hYmxlZC4gVmFsdWVzIGFyZVxuICAgICAqIDp0cnVlOiBlbmFibGUgZXZlbnQgc3Vic2NyaXB0aW9uXG4gICAgICogZmFsc2U6IGRpc2FibGUgZXZlbnQgc3Vic2NyaXB0aW9uXG4gICAgICovXG4gICAgcmVhZG9ubHkgZW5hYmxlU3Vic2NyaWJlRXZlbnQ/OiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IG1hdGNoRXhwcmVzczogTWF0Y2hpbmcgbGlzdC4gT25seSBzdXBwb3J0cyBvbmUgY3VycmVudGx5LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG1hdGNoRXhwcmVzcz86IEFycmF5PFJvc0R5bmFtaWNUYWdHcm91cC5NYXRjaEV4cHJlc3NQcm9wZXJ0eSB8IHJvcy5JUmVzb2x2YWJsZT4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgbWF0Y2hFeHByZXNzRmlsdGVyUmVsYXRpb246IFRoZSByZWxhdGlvbnNoaXAgYmV0d2VlbiB0aGUgY29uZGl0aW9uYWwgZXhwcmVzc2lvbnMuIFZhbHVlcyBhcmU6XG4gICAgICogYW5kOiB0aGUgcmVsYXRpb25zaGlwIGJldHdlZW5cbiAgICAgKiBvcjogdGhlIHJlbGF0aW9uc2hpcCBvciB0aGVcbiAgICAgKiBEZXNjcmlwdGlvbiBjdXJyZW50bHkgc3VwcG9ydHMgb25seSBvbmUgY29tYmluYXRpb24gb2YgY29uZGl0aW9ucywgdGhlIGZvbGxvdy11cCBBbGkgY2xvdWQgd2lsbCBzdXBwb3J0IGEgdmFyaWV0eSBvZiBjb21iaW5hdGlvbnMgb2YgY29uZGl0aW9ucy5cbiAgICAgKi9cbiAgICByZWFkb25seSBtYXRjaEV4cHJlc3NGaWx0ZXJSZWxhdGlvbj86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSB0ZW1wbGF0ZUlkTGlzdDogQWxhcm0gdGVtcGxhdGUgSUQgbGlzdC5cbiAgICAgKiBXaGVuIHRoZSBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBhcHBsaWNhdGlvbiBncm91cCBzeW5jaHJvbml6ZXMgdGFncywgaXQgd2lsbCBnZW5lcmF0ZSBhbGFybSBydWxlcyBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmllZCBhbGFybSB0ZW1wbGF0ZS5cbiAgICAgKi9cbiAgICByZWFkb25seSB0ZW1wbGF0ZUlkTGlzdD86IHN0cmluZ1tdO1xufVxuXG4vKipcbiAqIEEgUk9TIHJlc291cmNlIHR5cGU6ICBgQUxJWVVOOjpDTVM6OkR5bmFtaWNUYWdHcm91cGBcbiAqL1xuZXhwb3J0IGNsYXNzIER5bmFtaWNUYWdHcm91cCBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBIGZhY3RvcnkgbWV0aG9kIHRoYXQgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGZyb20gYW4gb2JqZWN0XG4gICAgICogY29udGFpbmluZyB0aGUgcHJvcGVydGllcyBvZiB0aGlzIFJPUyByZXNvdXJjZSwgd2hpY2ggd2lsbCBiZSBhc3NpZ25lZCB0byBST1MgcmVzb3VyY2UuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAQXR0cmlidXRlIER5bmFtaWNUYWdSdWxlSWQ6IER5bmFtaWMgdGFnIHJ1bGUgSUQuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJEeW5hbWljVGFnUnVsZUlkOiBhbnk7XG5cbiAgICAvKipcbiAgICAgKiBAQXR0cmlidXRlIFRhZ0tleTogVGFnIGtleS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clRhZ0tleTogYW55O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGBBTElZVU46OkNNUzo6RHluYW1pY1RhZ0dyb3VwYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIEBwYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBAcGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBEeW5hbWljVGFnR3JvdXBQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NEeW5hbWljVGFnR3JvdXAgPSBuZXcgUm9zRHluYW1pY1RhZ0dyb3VwKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgY29udGFjdEdyb3VwTGlzdDogcHJvcHMuY29udGFjdEdyb3VwTGlzdCxcbiAgICAgICAgICAgIG1hdGNoRXhwcmVzc0ZpbHRlclJlbGF0aW9uOiBwcm9wcy5tYXRjaEV4cHJlc3NGaWx0ZXJSZWxhdGlvbixcbiAgICAgICAgICAgIGVuYWJsZVN1YnNjcmliZUV2ZW50OiBwcm9wcy5lbmFibGVTdWJzY3JpYmVFdmVudCxcbiAgICAgICAgICAgIHRlbXBsYXRlSWRMaXN0OiBwcm9wcy50ZW1wbGF0ZUlkTGlzdCxcbiAgICAgICAgICAgIHRhZ0tleTogcHJvcHMudGFnS2V5LFxuICAgICAgICAgICAgZW5hYmxlSW5zdGFsbEFnZW50OiBwcm9wcy5lbmFibGVJbnN0YWxsQWdlbnQsXG4gICAgICAgICAgICBtYXRjaEV4cHJlc3M6IHByb3BzLm1hdGNoRXhwcmVzcyxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NEeW5hbWljVGFnR3JvdXA7XG4gICAgICAgIHRoaXMuYXR0ckR5bmFtaWNUYWdSdWxlSWQgPSByb3NEeW5hbWljVGFnR3JvdXAuYXR0ckR5bmFtaWNUYWdSdWxlSWQ7XG4gICAgICAgIHRoaXMuYXR0clRhZ0tleSA9IHJvc0R5bmFtaWNUYWdHcm91cC5hdHRyVGFnS2V5O1xuICAgIH1cbn1cbiJdfQ==