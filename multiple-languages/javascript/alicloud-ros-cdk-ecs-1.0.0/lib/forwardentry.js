"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ForwardEntry = exports.ForwardEntryProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "ForwardEntryProperty", { enumerable: true, get: function () { return ecs_generated_1.RosForwardEntry; } });
/**
 * A ROS resource type:  `ALIYUN::ECS::ForwardEntry`
 */
class ForwardEntry extends ros.Resource {
    /**
     * Create a new `ALIYUN::ECS::ForwardEntry`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosForwardEntry = new ecs_generated_1.RosForwardEntry(this, id, {
            externalPort: props.externalPort,
            externalIp: props.externalIp,
            ipProtocol: props.ipProtocol,
            internalPort: props.internalPort,
            internalIp: props.internalIp,
            forwardTableId: props.forwardTableId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosForwardEntry;
        this.attrForwardEntryId = rosForwardEntry.attrForwardEntryId;
    }
}
exports.ForwardEntry = ForwardEntry;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9yd2FyZGVudHJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZm9yd2FyZGVudHJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBa0Q7QUFFdEIscUdBRm5CLCtCQUFlLE9BRXdCO0FBc0NoRDs7R0FFRztBQUNILE1BQWEsWUFBYSxTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBWTFDOzs7Ozs7T0FNRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBd0IsRUFBRSxtQ0FBMkMsSUFBSTtRQUNuSCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sZUFBZSxHQUFHLElBQUksK0JBQWUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ25ELFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWTtZQUNoQyxVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVU7WUFDNUIsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQzVCLFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWTtZQUNoQyxVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVU7WUFDNUIsY0FBYyxFQUFFLEtBQUssQ0FBQyxjQUFjO1NBQ3ZDLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsZUFBZSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxlQUFlLENBQUMsa0JBQWtCLENBQUM7SUFDakUsQ0FBQztDQUNKO0FBakNELG9DQWlDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc0ZvcndhcmRFbnRyeSB9IGZyb20gJy4vZWNzLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0ZvcndhcmRFbnRyeSBhcyBGb3J3YXJkRW50cnlQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYEFMSVlVTjo6RUNTOjpGb3J3YXJkRW50cnlgXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRm9yd2FyZEVudHJ5UHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGV4dGVybmFsSXA6IFNvdXJjZSBJUCwgbXVzdCBiZWxvbmdzIHRvIGJhbmR3aWR0aCBwYWNrYWdlIGludGVybmV0IElQXG4gICAgICovXG4gICAgcmVhZG9ubHkgZXh0ZXJuYWxJcDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGV4dGVybmFsUG9ydDogU291cmNlIHBvcnQsIG5vdyBzdXBwb3J0IFsxLTY1NTM1XXxBbnlcbiAgICAgKi9cbiAgICByZWFkb25seSBleHRlcm5hbFBvcnQ6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBmb3J3YXJkVGFibGVJZDogQ3JlYXRlIGZvcndhcmQgZW50cnkgaW4gc3BlY2lmaWVkIGZvcndhcmQgdGFibGUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZm9yd2FyZFRhYmxlSWQ6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBpbnRlcm5hbElwOiBEZXN0aW5hdGlvbiBJUCwgbXVzdCBiZWxvbmcgdG8gVlBDIHByaXZhdGUgSVBcbiAgICAgKi9cbiAgICByZWFkb25seSBpbnRlcm5hbElwOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgaW50ZXJuYWxQb3J0OiBEZXN0aW5hdGlvbiBwb3J0LCBub3cgc3VwcG9ydCBbMS02NTUzNV18QW55XG4gICAgICovXG4gICAgcmVhZG9ubHkgaW50ZXJuYWxQb3J0OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgaXBQcm90b2NvbDogU3VwcG9ydGVkIHByb3RvY29sLCBOb3cgc3VwcG9ydCAnVENQfFVEUHxBbnknXG4gICAgICovXG4gICAgcmVhZG9ubHkgaXBQcm90b2NvbDogc3RyaW5nO1xufVxuXG4vKipcbiAqIEEgUk9TIHJlc291cmNlIHR5cGU6ICBgQUxJWVVOOjpFQ1M6OkZvcndhcmRFbnRyeWBcbiAqL1xuZXhwb3J0IGNsYXNzIEZvcndhcmRFbnRyeSBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBIGZhY3RvcnkgbWV0aG9kIHRoYXQgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGZyb20gYW4gb2JqZWN0XG4gICAgICogY29udGFpbmluZyB0aGUgcHJvcGVydGllcyBvZiB0aGlzIFJPUyByZXNvdXJjZSwgd2hpY2ggd2lsbCBiZSBhc3NpZ25lZCB0byBST1MgcmVzb3VyY2UuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAQXR0cmlidXRlIEZvcndhcmRFbnRyeUlkOiBUaGUgaWQgb2YgY3JlYXRlZCBmb3J3YXJkIGVudHJ5LlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyRm9yd2FyZEVudHJ5SWQ6IGFueTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBgQUxJWVVOOjpFQ1M6OkZvcndhcmRFbnRyeWAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBAcGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogQHBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogRm9yd2FyZEVudHJ5UHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAgICAgY29uc3Qgcm9zRm9yd2FyZEVudHJ5ID0gbmV3IFJvc0ZvcndhcmRFbnRyeSh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGV4dGVybmFsUG9ydDogcHJvcHMuZXh0ZXJuYWxQb3J0LFxuICAgICAgICAgICAgZXh0ZXJuYWxJcDogcHJvcHMuZXh0ZXJuYWxJcCxcbiAgICAgICAgICAgIGlwUHJvdG9jb2w6IHByb3BzLmlwUHJvdG9jb2wsXG4gICAgICAgICAgICBpbnRlcm5hbFBvcnQ6IHByb3BzLmludGVybmFsUG9ydCxcbiAgICAgICAgICAgIGludGVybmFsSXA6IHByb3BzLmludGVybmFsSXAsXG4gICAgICAgICAgICBmb3J3YXJkVGFibGVJZDogcHJvcHMuZm9yd2FyZFRhYmxlSWQsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zRm9yd2FyZEVudHJ5O1xuICAgICAgICB0aGlzLmF0dHJGb3J3YXJkRW50cnlJZCA9IHJvc0ZvcndhcmRFbnRyeS5hdHRyRm9yd2FyZEVudHJ5SWQ7XG4gICAgfVxufVxuIl19