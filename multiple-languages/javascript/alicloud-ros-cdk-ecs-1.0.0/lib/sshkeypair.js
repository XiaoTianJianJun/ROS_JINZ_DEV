"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SSHKeyPair = exports.SSHKeyPairProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "SSHKeyPairProperty", { enumerable: true, get: function () { return ecs_generated_1.RosSSHKeyPair; } });
/**
 * A ROS resource type:  `ALIYUN::ECS::SSHKeyPair`
 */
class SSHKeyPair extends ros.Resource {
    /**
     * Create a new `ALIYUN::ECS::SSHKeyPair`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosSSHKeyPair = new ecs_generated_1.RosSSHKeyPair(this, id, {
            keyPairName: props.keyPairName,
            resourceGroupId: props.resourceGroupId,
            publicKeyBody: props.publicKeyBody,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosSSHKeyPair;
        this.attrKeyPairFingerPrint = rosSSHKeyPair.attrKeyPairFingerPrint;
        this.attrKeyPairName = rosSSHKeyPair.attrKeyPairName;
        this.attrPrivateKeyBody = rosSSHKeyPair.attrPrivateKeyBody;
    }
}
exports.SSHKeyPair = SSHKeyPair;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Noa2V5cGFpci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNzaGtleXBhaXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUFnRDtBQUV0QixtR0FGakIsNkJBQWEsT0FFc0I7QUF1QjVDOztHQUVHO0FBQ0gsTUFBYSxVQUFXLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFzQnhDOzs7Ozs7T0FNRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBc0IsRUFBRSxtQ0FBMkMsSUFBSTtRQUNqSCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sYUFBYSxHQUFHLElBQUksNkJBQWEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQy9DLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhO1NBQ3JDLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsYUFBYSxDQUFDO1FBQzlCLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxhQUFhLENBQUMsc0JBQXNCLENBQUM7UUFDbkUsSUFBSSxDQUFDLGVBQWUsR0FBRyxhQUFhLENBQUMsZUFBZSxDQUFDO1FBQ3JELElBQUksQ0FBQyxrQkFBa0IsR0FBRyxhQUFhLENBQUMsa0JBQWtCLENBQUM7SUFDL0QsQ0FBQztDQUNKO0FBMUNELGdDQTBDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc1NTSEtleVBhaXIgfSBmcm9tICcuL2Vjcy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NTU0hLZXlQYWlyIGFzIFNTSEtleVBhaXJQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYEFMSVlVTjo6RUNTOjpTU0hLZXlQYWlyYFxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNTSEtleVBhaXJQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkga2V5UGFpck5hbWU6IFNTSCBrZXkgcGFpciBuYW1lLiBJdCBtdXN0IGJlIHVuaXF1ZS4gWzIsIDEyOF0gY2hhcmFjdGVycy4gQWxsIGNoYXJhY3RlciBzZXRzIGFyZSBzdXBwb3J0ZWQuIERvIG5vdCBzdGFydCB3aXRoIGEgc3BlY2lhbCBjaGFyYWN0ZXIsIGRpZ2l0LCBodHRwOi8vLCBvciBodHRwczovLy4gSXQgY2FuIGNvbnRhaW4gZGlnaXRzLCBcIi5cIiwgXCJfXCIsIG9yIFwiLVwiLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGtleVBhaXJOYW1lOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgcHVibGljS2V5Qm9keTogU1NIIFB1YmxpYyBrZXkuIElmIFB1YmxpY0tleUJvZHkgaXMgc3BlY2lmaWVkLCBleGlzdGVkIHB1YmxpYyBrZXkgYm9keSB3aWxsIGJlIGltcG9ydGVkIGluc3RlYWQgb2YgY3JlYXRpbmcgbmV3IFNTSCBrZXkgcGFpci5cbiAgICAgKi9cbiAgICByZWFkb25seSBwdWJsaWNLZXlCb2R5Pzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHJlc291cmNlR3JvdXBJZDogUmVzb3VyY2UgZ3JvdXAgaWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcmVzb3VyY2VHcm91cElkPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIEEgUk9TIHJlc291cmNlIHR5cGU6ICBgQUxJWVVOOjpFQ1M6OlNTSEtleVBhaXJgXG4gKi9cbmV4cG9ydCBjbGFzcyBTU0hLZXlQYWlyIGV4dGVuZHMgcm9zLlJlc291cmNlIHtcblxuICAgIC8qKlxuICAgICAqIEEgZmFjdG9yeSBtZXRob2QgdGhhdCBjcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIHRoaXMgY2xhc3MgZnJvbSBhbiBvYmplY3RcbiAgICAgKiBjb250YWluaW5nIHRoZSBwcm9wZXJ0aWVzIG9mIHRoaXMgUk9TIHJlc291cmNlLCB3aGljaCB3aWxsIGJlIGFzc2lnbmVkIHRvIFJPUyByZXNvdXJjZS5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBBdHRyaWJ1dGUgS2V5UGFpckZpbmdlclByaW50OiBUaGUgZmluZ2VycHJpbnQgb2YgdGhlIGtleSBwYWlyLiBUaGUgcHVibGljIGtleSBmaW5nZXJwcmludCBmb3JtYXQgZGVmaW5lZCBpbiBSRkM0NzE2OiBNRDUgbWVzc2FnZSBkaWdlc3QgYWxnb3JpdGhtLiBSZWZlciB0byBodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM0NzE2LlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyS2V5UGFpckZpbmdlclByaW50OiBhbnk7XG5cbiAgICAvKipcbiAgICAgKiBAQXR0cmlidXRlIEtleVBhaXJOYW1lOiBTU0ggS2V5IHBhaXIgbmFtZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0cktleVBhaXJOYW1lOiBhbnk7XG5cbiAgICAvKipcbiAgICAgKiBAQXR0cmlidXRlIFByaXZhdGVLZXlCb2R5OiBUaGUgcHJpdmF0ZSBrZXkgb2YgdGhlIGtleSBwYWlyLiBDb250ZW50IG9mIHRoZSBSU0EgcHJpdmF0ZSBrZXkgaW4gdGhlIFBLQ1MjOCBmb3JtYXQgb2YgdGhlIHVuZW5jcnlwdGVkIFBFTSBlbmNvZGluZy4gUmVmZXIgdG86IGh0dHBzOi8vd3d3Lm9wZW5zc2wub3JnL2RvY3MvYXBwcy9wa2NzOC5odG1sLlVzZXIgb25seSBjYW4gZ2V0IHRoZSBwcml2YXRlIGtleSBvbmUgdGltZSB3aGVuIGFuZCBvbmx5IHdoZW4gU1NIIGtleSBwYWlyIGlzIGNyZWF0ZWQuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJQcml2YXRlS2V5Qm9keTogYW55O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGBBTElZVU46OkVDUzo6U1NIS2V5UGFpcmAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBAcGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogQHBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogU1NIS2V5UGFpclByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIGNvbnN0IHJvc1NTSEtleVBhaXIgPSBuZXcgUm9zU1NIS2V5UGFpcih0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGtleVBhaXJOYW1lOiBwcm9wcy5rZXlQYWlyTmFtZSxcbiAgICAgICAgICAgIHJlc291cmNlR3JvdXBJZDogcHJvcHMucmVzb3VyY2VHcm91cElkLFxuICAgICAgICAgICAgcHVibGljS2V5Qm9keTogcHJvcHMucHVibGljS2V5Qm9keSxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NTU0hLZXlQYWlyO1xuICAgICAgICB0aGlzLmF0dHJLZXlQYWlyRmluZ2VyUHJpbnQgPSByb3NTU0hLZXlQYWlyLmF0dHJLZXlQYWlyRmluZ2VyUHJpbnQ7XG4gICAgICAgIHRoaXMuYXR0cktleVBhaXJOYW1lID0gcm9zU1NIS2V5UGFpci5hdHRyS2V5UGFpck5hbWU7XG4gICAgICAgIHRoaXMuYXR0clByaXZhdGVLZXlCb2R5ID0gcm9zU1NIS2V5UGFpci5hdHRyUHJpdmF0ZUtleUJvZHk7XG4gICAgfVxufVxuIl19