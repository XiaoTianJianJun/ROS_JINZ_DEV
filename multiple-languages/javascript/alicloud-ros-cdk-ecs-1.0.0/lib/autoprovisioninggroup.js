"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoProvisioningGroup = exports.AutoProvisioningGroupProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "AutoProvisioningGroupProperty", { enumerable: true, get: function () { return ecs_generated_1.RosAutoProvisioningGroup; } });
/**
 * A ROS resource type:  `ALIYUN::ECS::AutoProvisioningGroup`
 */
class AutoProvisioningGroup extends ros.Resource {
    /**
     * Create a new `ALIYUN::ECS::AutoProvisioningGroup`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosAutoProvisioningGroup = new ecs_generated_1.RosAutoProvisioningGroup(this, id, {
            totalTargetCapacity: props.totalTargetCapacity,
            autoProvisioningGroupName: props.autoProvisioningGroupName,
            description: props.description,
            excessCapacityTerminationPolicy: props.excessCapacityTerminationPolicy,
            launchTemplateId: props.launchTemplateId,
            launchTemplateConfig: props.launchTemplateConfig,
            payAsYouGoTargetCapacity: props.payAsYouGoTargetCapacity,
            spotInstanceInterruptionBehavior: props.spotInstanceInterruptionBehavior,
            autoProvisioningGroupType: props.autoProvisioningGroupType,
            validUntil: props.validUntil,
            terminateInstancesWithExpiration: props.terminateInstancesWithExpiration,
            defaultTargetCapacityType: props.defaultTargetCapacityType,
            spotInstancePoolsToUseCount: props.spotInstancePoolsToUseCount,
            spotTargetCapacity: props.spotTargetCapacity,
            launchTemplateVersion: props.launchTemplateVersion,
            validFrom: props.validFrom,
            maxSpotPrice: props.maxSpotPrice,
            spotAllocationStrategy: props.spotAllocationStrategy,
            terminateInstances: props.terminateInstances,
            payAsYouGoAllocationStrategy: props.payAsYouGoAllocationStrategy,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosAutoProvisioningGroup;
        this.attrAutoProvisioningGroupId = rosAutoProvisioningGroup.attrAutoProvisioningGroupId;
    }
}
exports.AutoProvisioningGroup = AutoProvisioningGroup;
//# sourceMappingURL=data:application/json;base64,