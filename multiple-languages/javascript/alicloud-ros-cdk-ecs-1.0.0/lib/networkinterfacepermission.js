"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkInterfacePermission = exports.NetworkInterfacePermissionProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "NetworkInterfacePermissionProperty", { enumerable: true, get: function () { return ecs_generated_1.RosNetworkInterfacePermission; } });
/**
 * A ROS resource type:  `ALIYUN::ECS::NetworkInterfacePermission`
 */
class NetworkInterfacePermission extends ros.Resource {
    /**
     * Create a new `ALIYUN::ECS::NetworkInterfacePermission`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosNetworkInterfacePermission = new ecs_generated_1.RosNetworkInterfacePermission(this, id, {
            accountId: props.accountId,
            permission: props.permission ? props.permission : 'InstanceAttach',
            networkInterfaceId: props.networkInterfaceId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosNetworkInterfacePermission;
        this.attrNetworkInterfacePermissionId = rosNetworkInterfacePermission.attrNetworkInterfacePermissionId;
    }
}
exports.NetworkInterfacePermission = NetworkInterfacePermission;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV0d29ya2ludGVyZmFjZXBlcm1pc3Npb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJuZXR3b3JraW50ZXJmYWNlcGVybWlzc2lvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQWdFO0FBRXRCLG1IQUZqQyw2Q0FBNkIsT0FFc0M7QUF1QjVFOztHQUVHO0FBQ0gsTUFBYSwwQkFBMkIsU0FBUSxHQUFHLENBQUMsUUFBUTtJQVl4RDs7Ozs7O09BTUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQXNDLEVBQUUsbUNBQTJDLElBQUk7UUFDakksS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLDZCQUE2QixHQUFHLElBQUksNkNBQTZCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUMvRSxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLGdCQUFnQjtZQUNsRSxrQkFBa0IsRUFBRSxLQUFLLENBQUMsa0JBQWtCO1NBQy9DLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsNkJBQTZCLENBQUM7UUFDOUMsSUFBSSxDQUFDLGdDQUFnQyxHQUFHLDZCQUE2QixDQUFDLGdDQUFnQyxDQUFDO0lBQzNHLENBQUM7Q0FDSjtBQTlCRCxnRUE4QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NOZXR3b3JrSW50ZXJmYWNlUGVybWlzc2lvbiB9IGZyb20gJy4vZWNzLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc05ldHdvcmtJbnRlcmZhY2VQZXJtaXNzaW9uIGFzIE5ldHdvcmtJbnRlcmZhY2VQZXJtaXNzaW9uUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBBTElZVU46OkVDUzo6TmV0d29ya0ludGVyZmFjZVBlcm1pc3Npb25gXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTmV0d29ya0ludGVyZmFjZVBlcm1pc3Npb25Qcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgYWNjb3VudElkOiB0aGUgYWNjb3VudCBpZFxuICAgICAqL1xuICAgIHJlYWRvbmx5IGFjY291bnRJZDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IG5ldHdvcmtJbnRlcmZhY2VJZDogTmV0d29yayBpbnRlcmZhY2UgaWRcbiAgICAgKi9cbiAgICByZWFkb25seSBuZXR3b3JrSW50ZXJmYWNlSWQ6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBwZXJtaXNzaW9uOiB0aGUgcGVybWlzc2lvblxuICAgICAqL1xuICAgIHJlYWRvbmx5IHBlcm1pc3Npb246IHN0cmluZztcbn1cblxuLyoqXG4gKiBBIFJPUyByZXNvdXJjZSB0eXBlOiAgYEFMSVlVTjo6RUNTOjpOZXR3b3JrSW50ZXJmYWNlUGVybWlzc2lvbmBcbiAqL1xuZXhwb3J0IGNsYXNzIE5ldHdvcmtJbnRlcmZhY2VQZXJtaXNzaW9uIGV4dGVuZHMgcm9zLlJlc291cmNlIHtcblxuICAgIC8qKlxuICAgICAqIEEgZmFjdG9yeSBtZXRob2QgdGhhdCBjcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIHRoaXMgY2xhc3MgZnJvbSBhbiBvYmplY3RcbiAgICAgKiBjb250YWluaW5nIHRoZSBwcm9wZXJ0aWVzIG9mIHRoaXMgUk9TIHJlc291cmNlLCB3aGljaCB3aWxsIGJlIGFzc2lnbmVkIHRvIFJPUyByZXNvdXJjZS5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBBdHRyaWJ1dGUgTmV0d29ya0ludGVyZmFjZVBlcm1pc3Npb25JZDogdGhlIG5ldHdvcmsgaW50ZXJmYWNlIHBlcm1pc3Npb24gaWRcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ck5ldHdvcmtJbnRlcmZhY2VQZXJtaXNzaW9uSWQ6IGFueTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBgQUxJWVVOOjpFQ1M6Ok5ldHdvcmtJbnRlcmZhY2VQZXJtaXNzaW9uYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIEBwYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBAcGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBOZXR3b3JrSW50ZXJmYWNlUGVybWlzc2lvblByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIGNvbnN0IHJvc05ldHdvcmtJbnRlcmZhY2VQZXJtaXNzaW9uID0gbmV3IFJvc05ldHdvcmtJbnRlcmZhY2VQZXJtaXNzaW9uKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgYWNjb3VudElkOiBwcm9wcy5hY2NvdW50SWQsXG4gICAgICAgICAgICBwZXJtaXNzaW9uOiBwcm9wcy5wZXJtaXNzaW9uID8gcHJvcHMucGVybWlzc2lvbiA6ICdJbnN0YW5jZUF0dGFjaCcsXG4gICAgICAgICAgICBuZXR3b3JrSW50ZXJmYWNlSWQ6IHByb3BzLm5ldHdvcmtJbnRlcmZhY2VJZCxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NOZXR3b3JrSW50ZXJmYWNlUGVybWlzc2lvbjtcbiAgICAgICAgdGhpcy5hdHRyTmV0d29ya0ludGVyZmFjZVBlcm1pc3Npb25JZCA9IHJvc05ldHdvcmtJbnRlcmZhY2VQZXJtaXNzaW9uLmF0dHJOZXR3b3JrSW50ZXJmYWNlUGVybWlzc2lvbklkO1xuICAgIH1cbn1cbiJdfQ==