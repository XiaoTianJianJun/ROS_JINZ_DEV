"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LaunchTemplate = exports.LaunchTemplateProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "LaunchTemplateProperty", { enumerable: true, get: function () { return ecs_generated_1.RosLaunchTemplate; } });
/**
 * A ROS resource type:  `ALIYUN::ECS::LaunchTemplate`
 */
class LaunchTemplate extends ros.Resource {
    /**
     * Create a new `ALIYUN::ECS::LaunchTemplate`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosLaunchTemplate = new ecs_generated_1.RosLaunchTemplate(this, id, {
            description: props.description,
            diskMappings: props.diskMappings,
            systemDiskSize: props.systemDiskSize,
            userData: props.userData,
            systemDiskDescription: props.systemDiskDescription,
            templateTags: props.templateTags,
            ramRoleName: props.ramRoleName,
            networkType: props.networkType,
            networkInterfaces: props.networkInterfaces,
            imageId: props.imageId,
            systemDiskDiskName: props.systemDiskDiskName,
            spotPriceLimit: props.spotPriceLimit,
            instanceType: props.instanceType,
            tags: ros.tagFactory(props.tags),
            hostName: props.hostName,
            spotStrategy: props.spotStrategy,
            keyPairName: props.keyPairName,
            launchTemplateName: props.launchTemplateName,
            ioOptimized: props.ioOptimized,
            versionDescription: props.versionDescription,
            zoneId: props.zoneId,
            vSwitchId: props.vSwitchId,
            securityGroupId: props.securityGroupId,
            internetChargeType: props.internetChargeType,
            systemDiskCategory: props.systemDiskCategory,
            instanceName: props.instanceName,
            internetMaxBandwidthOut: props.internetMaxBandwidthOut,
            internetMaxBandwidthIn: props.internetMaxBandwidthIn,
            securityEnhancementStrategy: props.securityEnhancementStrategy,
            autoReleaseTime: props.autoReleaseTime,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosLaunchTemplate;
        this.attrDefaultVersionNumber = rosLaunchTemplate.attrDefaultVersionNumber;
        this.attrLatestVersionNumber = rosLaunchTemplate.attrLatestVersionNumber;
        this.attrLaunchTemplateId = rosLaunchTemplate.attrLaunchTemplateId;
        this.attrLaunchTemplateName = rosLaunchTemplate.attrLaunchTemplateName;
    }
}
exports.LaunchTemplate = LaunchTemplate;
//# sourceMappingURL=data:application/json;base64,