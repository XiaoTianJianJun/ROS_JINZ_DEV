"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiskAttachment = exports.DiskAttachmentProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "DiskAttachmentProperty", { enumerable: true, get: function () { return ecs_generated_1.RosDiskAttachment; } });
/**
 * A ROS resource type:  `ALIYUN::ECS::DiskAttachment`
 */
class DiskAttachment extends ros.Resource {
    /**
     * Create a new `ALIYUN::ECS::DiskAttachment`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosDiskAttachment = new ecs_generated_1.RosDiskAttachment(this, id, {
            instanceId: props.instanceId,
            device: props.device,
            deleteWithInstance: props.deleteWithInstance,
            deleteAutoSnapshot: props.deleteAutoSnapshot ? props.deleteAutoSnapshot : true,
            diskId: props.diskId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDiskAttachment;
        this.attrDevice = rosDiskAttachment.attrDevice;
        this.attrDiskId = rosDiskAttachment.attrDiskId;
        this.attrStatus = rosDiskAttachment.attrStatus;
    }
}
exports.DiskAttachment = DiskAttachment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlza2F0dGFjaG1lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkaXNrYXR0YWNobWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQW9EO0FBRXRCLHVHQUZyQixpQ0FBaUIsT0FFMEI7QUFpQ3BEOztHQUVHO0FBQ0gsTUFBYSxjQUFlLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFzQjVDOzs7Ozs7T0FNRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBMEIsRUFBRSxtQ0FBMkMsSUFBSTtRQUNySCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxpQ0FBaUIsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ3ZELFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVTtZQUM1QixNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU07WUFDcEIsa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGtCQUFrQjtZQUM1QyxrQkFBa0IsRUFBRSxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsSUFBSTtZQUM5RSxNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU07U0FDdkIsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxpQkFBaUIsQ0FBQztRQUNsQyxJQUFJLENBQUMsVUFBVSxHQUFHLGlCQUFpQixDQUFDLFVBQVUsQ0FBQztRQUMvQyxJQUFJLENBQUMsVUFBVSxHQUFHLGlCQUFpQixDQUFDLFVBQVUsQ0FBQztRQUMvQyxJQUFJLENBQUMsVUFBVSxHQUFHLGlCQUFpQixDQUFDLFVBQVUsQ0FBQztJQUNuRCxDQUFDO0NBQ0o7QUE1Q0Qsd0NBNENDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zRGlza0F0dGFjaG1lbnQgfSBmcm9tICcuL2Vjcy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NEaXNrQXR0YWNobWVudCBhcyBEaXNrQXR0YWNobWVudFByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgQUxJWVVOOjpFQ1M6OkRpc2tBdHRhY2htZW50YFxuICovXG5leHBvcnQgaW50ZXJmYWNlIERpc2tBdHRhY2htZW50UHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGRpc2tJZDogVGhlIGRpc2sgaWQgdG8gYXR0YWNoZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGlza0lkOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgaW5zdGFuY2VJZDogVGhlIGluc3RhbmNlSWQgdG8gYXR0YWNoIHRoZSBkaXNrLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGluc3RhbmNlSWQ6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkZWxldGVBdXRvU25hcHNob3Q6IFdoZXRoZXIgdGhlIGF1dG8gc25hcHNob3QgaXMgcmVsZWFzZWQgd2l0aCB0aGUgZGlzay4gRGVmYXVsdCB0byB0cnVlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRlbGV0ZUF1dG9TbmFwc2hvdD86IGJvb2xlYW4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgZGVsZXRlV2l0aEluc3RhbmNlOiBJZiBwcm9wZXJ0eSBpcyB0cnVlLCB0aGUgZGlzayB3aWxsIGJlIGRlbGV0ZWQgd2hpbGUgaW5zdGFuY2UgaXMgZGVsZXRlZCwgaWYgcHJvcGVydHkgaXMgZmFsc2UsIHRoZSBkaXNrIHdpbGwgYmUgcmV0YWluIGFmdGVyIGluc3RhbmNlIGlzIGRlbGV0ZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVsZXRlV2l0aEluc3RhbmNlPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkZXZpY2U6IFRoZSBkZXZpY2Ugd2hlcmUgdGhlIHZvbHVtZSBpcyBleHBvc2VkIG9uIHRoZSBpbnN0YW5jZS4gY291bGQgYmUgL2Rldi94dmRbYi16XS4gSWYgbm90IHNwZWNpZmljYXRpb24sIHdpbGwgdXNlIGRlZmF1bHQgdmFsdWUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGV2aWNlPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIEEgUk9TIHJlc291cmNlIHR5cGU6ICBgQUxJWVVOOjpFQ1M6OkRpc2tBdHRhY2htZW50YFxuICovXG5leHBvcnQgY2xhc3MgRGlza0F0dGFjaG1lbnQgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuXG4gICAgLyoqXG4gICAgICogQSBmYWN0b3J5IG1ldGhvZCB0aGF0IGNyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcyBmcm9tIGFuIG9iamVjdFxuICAgICAqIGNvbnRhaW5pbmcgdGhlIHByb3BlcnRpZXMgb2YgdGhpcyBST1MgcmVzb3VyY2UsIHdoaWNoIHdpbGwgYmUgYXNzaWduZWQgdG8gUk9TIHJlc291cmNlLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQEF0dHJpYnV0ZSBEZXZpY2U6IFRoZSBkZXZpY2Ugd2hlcmUgdGhlIHZvbHVtZSBpcyBleHBvc2VkIG9uIGVjcyBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckRldmljZTogYW55O1xuXG4gICAgLyoqXG4gICAgICogQEF0dHJpYnV0ZSBEaXNrSWQ6IFRoZSBkaXNrIGlkIG9mIGNyZWF0ZWQgZGlza1xuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyRGlza0lkOiBhbnk7XG5cbiAgICAvKipcbiAgICAgKiBAQXR0cmlidXRlIFN0YXR1czogVGhlIGRpc2sgc3RhdHVzIG5vdy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clN0YXR1czogYW55O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGBBTElZVU46OkVDUzo6RGlza0F0dGFjaG1lbnRgLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogQHBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIEBwYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IERpc2tBdHRhY2htZW50UHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAgICAgY29uc3Qgcm9zRGlza0F0dGFjaG1lbnQgPSBuZXcgUm9zRGlza0F0dGFjaG1lbnQodGhpcywgaWQsICB7XG4gICAgICAgICAgICBpbnN0YW5jZUlkOiBwcm9wcy5pbnN0YW5jZUlkLFxuICAgICAgICAgICAgZGV2aWNlOiBwcm9wcy5kZXZpY2UsXG4gICAgICAgICAgICBkZWxldGVXaXRoSW5zdGFuY2U6IHByb3BzLmRlbGV0ZVdpdGhJbnN0YW5jZSxcbiAgICAgICAgICAgIGRlbGV0ZUF1dG9TbmFwc2hvdDogcHJvcHMuZGVsZXRlQXV0b1NuYXBzaG90ID8gcHJvcHMuZGVsZXRlQXV0b1NuYXBzaG90IDogdHJ1ZSxcbiAgICAgICAgICAgIGRpc2tJZDogcHJvcHMuZGlza0lkLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0Rpc2tBdHRhY2htZW50O1xuICAgICAgICB0aGlzLmF0dHJEZXZpY2UgPSByb3NEaXNrQXR0YWNobWVudC5hdHRyRGV2aWNlO1xuICAgICAgICB0aGlzLmF0dHJEaXNrSWQgPSByb3NEaXNrQXR0YWNobWVudC5hdHRyRGlza0lkO1xuICAgICAgICB0aGlzLmF0dHJTdGF0dXMgPSByb3NEaXNrQXR0YWNobWVudC5hdHRyU3RhdHVzO1xuICAgIH1cbn1cbiJdfQ==