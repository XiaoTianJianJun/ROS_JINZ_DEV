"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkInterface = exports.NetworkInterfaceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "NetworkInterfaceProperty", { enumerable: true, get: function () { return ecs_generated_1.RosNetworkInterface; } });
/**
 * A ROS resource type:  `ALIYUN::ECS::NetworkInterface`
 */
class NetworkInterface extends ros.Resource {
    /**
     * Create a new `ALIYUN::ECS::NetworkInterface`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosNetworkInterface = new ecs_generated_1.RosNetworkInterface(this, id, {
            description: props.description,
            privateIpAddresses: props.privateIpAddresses,
            resourceGroupId: props.resourceGroupId,
            securityGroupId: props.securityGroupId,
            vSwitchId: props.vSwitchId,
            networkInterfaceName: props.networkInterfaceName,
            primaryIpAddress: props.primaryIpAddress,
            securityGroupIds: props.securityGroupIds,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosNetworkInterface;
        this.attrMacAddress = rosNetworkInterface.attrMacAddress;
        this.attrNetworkInterfaceId = rosNetworkInterface.attrNetworkInterfaceId;
        this.attrPrivateIpAddress = rosNetworkInterface.attrPrivateIpAddress;
        this.attrSecondaryPrivateIpAddresses = rosNetworkInterface.attrSecondaryPrivateIpAddresses;
    }
}
exports.NetworkInterface = NetworkInterface;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV0d29ya2ludGVyZmFjZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm5ldHdvcmtpbnRlcmZhY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUFzRDtBQUV0Qix5R0FGdkIsbUNBQW1CLE9BRTRCO0FBZ0R4RDs7R0FFRztBQUNILE1BQWEsZ0JBQWlCLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUEyQjlDOzs7Ozs7T0FNRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBNEIsRUFBRSxtQ0FBMkMsSUFBSTtRQUN2SCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxtQ0FBbUIsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQzNELFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixrQkFBa0IsRUFBRSxLQUFLLENBQUMsa0JBQWtCO1lBQzVDLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0QyxlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTO1lBQzFCLG9CQUFvQixFQUFFLEtBQUssQ0FBQyxvQkFBb0I7WUFDaEQsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLGdCQUFnQjtZQUN4QyxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsZ0JBQWdCO1NBQzNDLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsbUJBQW1CLENBQUM7UUFDcEMsSUFBSSxDQUFDLGNBQWMsR0FBRyxtQkFBbUIsQ0FBQyxjQUFjLENBQUM7UUFDekQsSUFBSSxDQUFDLHNCQUFzQixHQUFHLG1CQUFtQixDQUFDLHNCQUFzQixDQUFDO1FBQ3pFLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxtQkFBbUIsQ0FBQyxvQkFBb0IsQ0FBQztRQUNyRSxJQUFJLENBQUMsK0JBQStCLEdBQUcsbUJBQW1CLENBQUMsK0JBQStCLENBQUM7SUFDL0YsQ0FBQztDQUNKO0FBckRELDRDQXFEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc05ldHdvcmtJbnRlcmZhY2UgfSBmcm9tICcuL2Vjcy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NOZXR3b3JrSW50ZXJmYWNlIGFzIE5ldHdvcmtJbnRlcmZhY2VQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYEFMSVlVTjo6RUNTOjpOZXR3b3JrSW50ZXJmYWNlYFxuICovXG5leHBvcnQgaW50ZXJmYWNlIE5ldHdvcmtJbnRlcmZhY2VQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgdlN3aXRjaElkOiBWU3dpdGNoIElEIG9mIHRoZSBzcGVjaWZpZWQgVlBDLiBTcGVjaWZpZXMgdGhlIHN3aXRjaCBJRCBmb3IgdGhlIFZQQy5cbiAgICAgKi9cbiAgICByZWFkb25seSB2U3dpdGNoSWQ6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkZXNjcmlwdGlvbjogRGVzY3JpcHRpb24gb2YgeW91ciBFTkkuIEl0IGlzIGEgc3RyaW5nIG9mIFsyLCAyNTZdIEVuZ2xpc2ggb3IgQ2hpbmVzZSBjaGFyYWN0ZXJzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IG5ldHdvcmtJbnRlcmZhY2VOYW1lOiBOYW1lIG9mIHlvdXIgRU5JLiBJdCBpcyBhIHN0cmluZyBvZiBbMiwgMTI4XSAgQ2hpbmVzZSBvciBFbmdsaXNoIGNoYXJhY3RlcnMuIEl0IG11c3QgYmVnaW4gd2l0aCBhIGxldHRlciBhbmQgY2FuIGNvbnRhaW4gbnVtYmVycywgdW5kZXJzY29yZXMgKF8pLCBjb2xvbnMgKDopLCBvciBoeXBoZW5zICgtKS5cbiAgICAgKi9cbiAgICByZWFkb25seSBuZXR3b3JrSW50ZXJmYWNlTmFtZT86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBwcmltYXJ5SXBBZGRyZXNzOiBUaGUgcHJpbWFyeSBwcml2YXRlIElQIGFkZHJlc3Mgb2YgdGhlIEVOSS4gIFRoZSBzcGVjaWZpZWQgSVAgYWRkcmVzcyBtdXN0IGhhdmUgdGhlIHNhbWUgSG9zdCBJRCBhcyB0aGUgVlN3aXRjaC4gSWYgbm8gSVAgYWRkcmVzc2VzIGFyZSBzcGVjaWZpZWQsIGEgcmFuZG9tIG5ldHdvcmsgSUQgaXMgYXNzaWduZWQgZm9yIHRoZSBFTkkuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcHJpbWFyeUlwQWRkcmVzcz86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBwcml2YXRlSXBBZGRyZXNzZXM6IFNwZWNpZmllcyBzZWNvbmRhcnkgcHJpdmF0ZSBJUCBhZGRyZXNzZXMgb2YgdGhlIEVOSS4gVGhpcyBJUCBhZGRyZXNzIG11c3QgYmUgYW4gYXZhaWxhYmxlIElQIGFkZHJlc3MgaW4gdGhlIENJRFIgYmxvY2sgb2YgdGhlIFZTd2l0Y2ggdG8gd2hpY2ggdGhlIEVOSSBiZWxvbmdzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHByaXZhdGVJcEFkZHJlc3Nlcz86IHN0cmluZ1tdO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHJlc291cmNlR3JvdXBJZDogUmVzb3VyY2UgZ3JvdXAgaWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcmVzb3VyY2VHcm91cElkPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHNlY3VyaXR5R3JvdXBJZDogVGhlIElEIG9mIHRoZSBzZWN1cml0eSBncm91cCB0aGF0IHRoZSBFTkkgam9pbnMuIFRoZSBzZWN1cml0eSBncm91cCBhbmQgdGhlIEVOSSBtdXN0IGJlIGluIGEgc2FtZSBWUEMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc2VjdXJpdHlHcm91cElkPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHNlY3VyaXR5R3JvdXBJZHM6IFRoZSBJRHMgb2YgdGhlIHNlY3VyaXR5IGdyb3VwcyB0aGF0IHRoZSBFTkkgam9pbnMuIFRoZSBzZWN1cml0eSBncm91cHMgYW5kIHRoZSBFTkkgbXVzdCBiZWxvbmcgdG8gdGhlIHNhbWUgVlBDLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNlY3VyaXR5R3JvdXBJZHM/OiBzdHJpbmdbXTtcbn1cblxuLyoqXG4gKiBBIFJPUyByZXNvdXJjZSB0eXBlOiAgYEFMSVlVTjo6RUNTOjpOZXR3b3JrSW50ZXJmYWNlYFxuICovXG5leHBvcnQgY2xhc3MgTmV0d29ya0ludGVyZmFjZSBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBIGZhY3RvcnkgbWV0aG9kIHRoYXQgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGZyb20gYW4gb2JqZWN0XG4gICAgICogY29udGFpbmluZyB0aGUgcHJvcGVydGllcyBvZiB0aGlzIFJPUyByZXNvdXJjZSwgd2hpY2ggd2lsbCBiZSBhc3NpZ25lZCB0byBST1MgcmVzb3VyY2UuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAQXR0cmlidXRlIE1hY0FkZHJlc3M6IFRoZSBNQUMgYWRkcmVzcyBvZiB5b3VyIE5ldHdvcmsgSW50ZXJmYWNlLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyTWFjQWRkcmVzczogYW55O1xuXG4gICAgLyoqXG4gICAgICogQEF0dHJpYnV0ZSBOZXR3b3JrSW50ZXJmYWNlSWQ6IElEIG9mIHlvdXIgTmV0d29yayBJbnRlcmZhY2UuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJOZXR3b3JrSW50ZXJmYWNlSWQ6IGFueTtcblxuICAgIC8qKlxuICAgICAqIEBBdHRyaWJ1dGUgUHJpdmF0ZUlwQWRkcmVzczogVGhlIHByaW1hcnkgcHJpdmF0ZSBpcCBhZGRyZXNzIG9mIHlvdXIgTmV0d29yayBJbnRlcmZhY2UuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJQcml2YXRlSXBBZGRyZXNzOiBhbnk7XG5cbiAgICAvKipcbiAgICAgKiBAQXR0cmlidXRlIFNlY29uZGFyeVByaXZhdGVJcEFkZHJlc3NlczogVGhlIHNlY29uZGFyeSBwcml2YXRlIElQIGFkZHJlc3NlcyBvZiB5b3VyIE5ldHdvcmsgSW50ZXJmYWNlLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyU2Vjb25kYXJ5UHJpdmF0ZUlwQWRkcmVzc2VzOiBhbnk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgYEFMSVlVTjo6RUNTOjpOZXR3b3JrSW50ZXJmYWNlYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIEBwYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBAcGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBOZXR3b3JrSW50ZXJmYWNlUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAgICAgY29uc3Qgcm9zTmV0d29ya0ludGVyZmFjZSA9IG5ldyBSb3NOZXR3b3JrSW50ZXJmYWNlKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IHByb3BzLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgcHJpdmF0ZUlwQWRkcmVzc2VzOiBwcm9wcy5wcml2YXRlSXBBZGRyZXNzZXMsXG4gICAgICAgICAgICByZXNvdXJjZUdyb3VwSWQ6IHByb3BzLnJlc291cmNlR3JvdXBJZCxcbiAgICAgICAgICAgIHNlY3VyaXR5R3JvdXBJZDogcHJvcHMuc2VjdXJpdHlHcm91cElkLFxuICAgICAgICAgICAgdlN3aXRjaElkOiBwcm9wcy52U3dpdGNoSWQsXG4gICAgICAgICAgICBuZXR3b3JrSW50ZXJmYWNlTmFtZTogcHJvcHMubmV0d29ya0ludGVyZmFjZU5hbWUsXG4gICAgICAgICAgICBwcmltYXJ5SXBBZGRyZXNzOiBwcm9wcy5wcmltYXJ5SXBBZGRyZXNzLFxuICAgICAgICAgICAgc2VjdXJpdHlHcm91cElkczogcHJvcHMuc2VjdXJpdHlHcm91cElkcyxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NOZXR3b3JrSW50ZXJmYWNlO1xuICAgICAgICB0aGlzLmF0dHJNYWNBZGRyZXNzID0gcm9zTmV0d29ya0ludGVyZmFjZS5hdHRyTWFjQWRkcmVzcztcbiAgICAgICAgdGhpcy5hdHRyTmV0d29ya0ludGVyZmFjZUlkID0gcm9zTmV0d29ya0ludGVyZmFjZS5hdHRyTmV0d29ya0ludGVyZmFjZUlkO1xuICAgICAgICB0aGlzLmF0dHJQcml2YXRlSXBBZGRyZXNzID0gcm9zTmV0d29ya0ludGVyZmFjZS5hdHRyUHJpdmF0ZUlwQWRkcmVzcztcbiAgICAgICAgdGhpcy5hdHRyU2Vjb25kYXJ5UHJpdmF0ZUlwQWRkcmVzc2VzID0gcm9zTmV0d29ya0ludGVyZmFjZS5hdHRyU2Vjb25kYXJ5UHJpdmF0ZUlwQWRkcmVzc2VzO1xuICAgIH1cbn1cbiJdfQ==