"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrepayInstance = exports.PrepayInstanceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "PrepayInstanceProperty", { enumerable: true, get: function () { return ecs_generated_1.RosPrepayInstance; } });
/**
 * A ROS resource type:  `ALIYUN::ECS::PrepayInstance`
 */
class PrepayInstance extends ros.Resource {
    /**
     * Create a new `ALIYUN::ECS::PrepayInstance`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosPrepayInstance = new ecs_generated_1.RosPrepayInstance(this, id, {
            periodType: props.periodType,
            dedicatedHostId: props.dedicatedHostId,
            privateIpAddress: props.privateIpAddress,
            description: props.description,
            diskMappings: props.diskMappings,
            systemDiskSize: props.systemDiskSize,
            userData: props.userData,
            systemDiskDescription: props.systemDiskDescription,
            instanceChargeType: props.instanceChargeType ? props.instanceChargeType : 'PostPaid',
            autoRenew: props.autoRenew ? props.autoRenew : false,
            maxAmount: props.maxAmount,
            ramRoleName: props.ramRoleName,
            systemDiskPerformanceLevel: props.systemDiskPerformanceLevel,
            minAmount: props.minAmount ? props.minAmount : 1,
            imageId: props.imageId,
            systemDiskDiskName: props.systemDiskDiskName,
            instanceType: props.instanceType,
            allocatePublicIp: props.allocatePublicIp ? props.allocatePublicIp : true,
            tags: ros.tagFactory(props.tags),
            hostName: props.hostName,
            passwordInherit: props.passwordInherit,
            password: props.password,
            autoRenewPeriod: props.autoRenewPeriod ? props.autoRenewPeriod : 1,
            keyPairName: props.keyPairName,
            ioOptimized: props.ioOptimized ? props.ioOptimized : true,
            zoneId: props.zoneId,
            hpcClusterId: props.hpcClusterId,
            vSwitchId: props.vSwitchId,
            securityGroupId: props.securityGroupId,
            period: props.period ? props.period : 1,
            internetChargeType: props.internetChargeType ? props.internetChargeType : 'PayByBandwidth',
            systemDiskCategory: props.systemDiskCategory ? props.systemDiskCategory : 'cloud_efficiency',
            instanceName: props.instanceName,
            deploymentSetId: props.deploymentSetId,
            internetMaxBandwidthOut: props.internetMaxBandwidthOut ? props.internetMaxBandwidthOut : 1,
            vpcId: props.vpcId,
            internetMaxBandwidthIn: props.internetMaxBandwidthIn ? props.internetMaxBandwidthIn : 200,
            securityEnhancementStrategy: props.securityEnhancementStrategy,
            periodUnit: props.periodUnit ? props.periodUnit : 'Month',
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosPrepayInstance;
        this.attrHostNames = rosPrepayInstance.attrHostNames;
        this.attrInnerIps = rosPrepayInstance.attrInnerIps;
        this.attrInstanceIds = rosPrepayInstance.attrInstanceIds;
        this.attrOrderId = rosPrepayInstance.attrOrderId;
        this.attrPrivateIps = rosPrepayInstance.attrPrivateIps;
        this.attrPublicIps = rosPrepayInstance.attrPublicIps;
        this.attrRelatedOrderIds = rosPrepayInstance.attrRelatedOrderIds;
        this.attrZoneIds = rosPrepayInstance.attrZoneIds;
    }
}
exports.PrepayInstance = PrepayInstance;
//# sourceMappingURL=data:application/json;base64,