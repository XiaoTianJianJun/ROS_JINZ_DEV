"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Index = exports.IndexProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const sls_generated_1 = require("./sls.generated");
Object.defineProperty(exports, "IndexProperty", { enumerable: true, get: function () { return sls_generated_1.RosIndex; } });
/**
 * A ROS resource type:  `ALIYUN::SLS::Index`
 */
class Index extends ros.Resource {
    /**
     * A factory method that creates a new instance of this class from an object
     * containing the properties of this ROS resource, which will be assigned to ROS resource.
     */
    /**
     * Create a new `ALIYUN::SLS::Index`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosIndex = new sls_generated_1.RosIndex(this, id, {
            logstoreName: props.logstoreName,
            projectName: props.projectName,
            keyIndices: props.keyIndices,
            fullTextIndex: props.fullTextIndex,
            logReduce: props.logReduce ? props.logReduce : false,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosIndex;
    }
}
exports.Index = Index;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgtcmVzb3VyY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC1yZXNvdXJjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQTJDO0FBRXRCLDhGQUZaLHdCQUFRLE9BRWlCO0FBeUNsQzs7R0FFRztBQUNILE1BQWEsS0FBTSxTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBRW5DOzs7T0FHRztJQUVIOzs7Ozs7T0FNRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBaUIsRUFBRSxtQ0FBMkMsSUFBSTtRQUM1RyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sUUFBUSxHQUFHLElBQUksd0JBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ3JDLFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWTtZQUNoQyxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQzVCLGFBQWEsRUFBRSxLQUFLLENBQUMsYUFBYTtZQUNsQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSztTQUN2RCxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUM3QixDQUFDO0NBQ0o7QUExQkQsc0JBMEJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zSW5kZXggfSBmcm9tICcuL3Nscy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NJbmRleCBhcyBJbmRleFByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgQUxJWVVOOjpTTFM6OkluZGV4YFxuICovXG5leHBvcnQgaW50ZXJmYWNlIEluZGV4UHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGZ1bGxUZXh0SW5kZXg6IEZ1bGwtdGV4dCBpbmRleGluZyBjb25maWd1cmF0aW9uLlxuICAgICAqIEZ1bGwtdGV4dCBpbmRleGluZyBhbmQga2V5IGluZGV4aW5nIG11c3QgaGF2ZSBhdCBsZWFzdCBvbmUgZW5hYmxlZC5cbiAgICAgKi9cbiAgICByZWFkb25seSBmdWxsVGV4dEluZGV4OiBSb3NJbmRleC5GdWxsVGV4dEluZGV4UHJvcGVydHkgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgbG9nc3RvcmVOYW1lOiBMb2dzdG9yZSBuYW1lOlxuICAgICAqIDEuIE9ubHkgc3VwcG9ydHMgbG93ZXJjYXNlIGxldHRlcnMsIG51bWJlcnMsIGh5cGhlbnMgKC0pIGFuZCB1bmRlcnNjb3JlcyAoXykuXG4gICAgICogMi4gTXVzdCBzdGFydCBhbmQgZW5kIHdpdGggbG93ZXJjYXNlIGxldHRlcnMgYW5kIG51bWJlcnMuXG4gICAgICogMy4gVGhlIG5hbWUgbGVuZ3RoIGlzIDMtNjMgY2hhcmFjdGVycy5cbiAgICAgKi9cbiAgICByZWFkb25seSBsb2dzdG9yZU5hbWU6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBwcm9qZWN0TmFtZTogUHJvamVjdCBuYW1lOlxuICAgICAqIDEuIE9ubHkgc3VwcG9ydHMgbG93ZXJjYXNlIGxldHRlcnMsIG51bWJlcnMsIGh5cGhlbnMgKC0pIGFuZCB1bmRlcnNjb3JlcyAoXykuXG4gICAgICogMi4gTXVzdCBzdGFydCBhbmQgZW5kIHdpdGggbG93ZXJjYXNlIGxldHRlcnMgYW5kIG51bWJlcnMuXG4gICAgICogMy4gVGhlIG5hbWUgbGVuZ3RoIGlzIDMtNjMgY2hhcmFjdGVycy5cbiAgICAgKi9cbiAgICByZWFkb25seSBwcm9qZWN0TmFtZTogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGtleUluZGljZXM6IEtleSBpbmRleCBjb25maWd1cmF0aW9ucy5cbiAgICAgKiBGdWxsLXRleHQgaW5kZXhpbmcgYW5kIGtleSBpbmRleGluZyBtdXN0IGhhdmUgYXQgbGVhc3Qgb25lIGVuYWJsZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkga2V5SW5kaWNlcz86IEFycmF5PFJvc0luZGV4LktleUluZGljZXNQcm9wZXJ0eSB8IHJvcy5JUmVzb2x2YWJsZT4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgbG9nUmVkdWNlOiBXaGV0aGVyIHRvIGVuYWJsZSBsb2cgcmVkdWNlLiBEZWZhdWx0IHRvIGZhbHNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGxvZ1JlZHVjZT86IGJvb2xlYW4gfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogQSBST1MgcmVzb3VyY2UgdHlwZTogIGBBTElZVU46OlNMUzo6SW5kZXhgXG4gKi9cbmV4cG9ydCBjbGFzcyBJbmRleCBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBIGZhY3RvcnkgbWV0aG9kIHRoYXQgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGZyb20gYW4gb2JqZWN0XG4gICAgICogY29udGFpbmluZyB0aGUgcHJvcGVydGllcyBvZiB0aGlzIFJPUyByZXNvdXJjZSwgd2hpY2ggd2lsbCBiZSBhc3NpZ25lZCB0byBST1MgcmVzb3VyY2UuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgYEFMSVlVTjo6U0xTOjpJbmRleGAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBAcGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogQHBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogSW5kZXhQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NJbmRleCA9IG5ldyBSb3NJbmRleCh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGxvZ3N0b3JlTmFtZTogcHJvcHMubG9nc3RvcmVOYW1lLFxuICAgICAgICAgICAgcHJvamVjdE5hbWU6IHByb3BzLnByb2plY3ROYW1lLFxuICAgICAgICAgICAga2V5SW5kaWNlczogcHJvcHMua2V5SW5kaWNlcyxcbiAgICAgICAgICAgIGZ1bGxUZXh0SW5kZXg6IHByb3BzLmZ1bGxUZXh0SW5kZXgsXG4gICAgICAgICAgICBsb2dSZWR1Y2U6IHByb3BzLmxvZ1JlZHVjZSA/IHByb3BzLmxvZ1JlZHVjZSA6IGZhbHNlLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0luZGV4O1xuICAgIH1cbn1cbiJdfQ==