"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogtailConfig = exports.LogtailConfigProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const sls_generated_1 = require("./sls.generated");
Object.defineProperty(exports, "LogtailConfigProperty", { enumerable: true, get: function () { return sls_generated_1.RosLogtailConfig; } });
/**
 * A ROS resource type:  `ALIYUN::SLS::LogtailConfig`
 */
class LogtailConfig extends ros.Resource {
    /**
     * Create a new `ALIYUN::SLS::LogtailConfig`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosLogtailConfig = new sls_generated_1.RosLogtailConfig(this, id, {
            logtailConfigName: props.logtailConfigName,
            logstoreName: props.logstoreName,
            projectName: props.projectName,
            rawConfigData: props.rawConfigData,
            cloneFrom: props.cloneFrom,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosLogtailConfig;
        this.attrAppliedMachineGroups = rosLogtailConfig.attrAppliedMachineGroups;
        this.attrEndpoint = rosLogtailConfig.attrEndpoint;
    }
}
exports.LogtailConfig = LogtailConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9ndGFpbGNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxvZ3RhaWxjb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUFtRDtBQUV0QixzR0FGcEIsZ0NBQWdCLE9BRXlCO0FBNkdsRDs7R0FFRztBQUNILE1BQWEsYUFBYyxTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBaUIzQzs7Ozs7O09BTUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQXlCLEVBQUUsbUNBQTJDLElBQUk7UUFDcEgsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLGdCQUFnQixHQUFHLElBQUksZ0NBQWdCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNyRCxpQkFBaUIsRUFBRSxLQUFLLENBQUMsaUJBQWlCO1lBQzFDLFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWTtZQUNoQyxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhO1lBQ2xDLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztTQUM3QixFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLGdCQUFnQixDQUFDO1FBQ2pDLElBQUksQ0FBQyx3QkFBd0IsR0FBRyxnQkFBZ0IsQ0FBQyx3QkFBd0IsQ0FBQztRQUMxRSxJQUFJLENBQUMsWUFBWSxHQUFHLGdCQUFnQixDQUFDLFlBQVksQ0FBQztJQUN0RCxDQUFDO0NBQ0o7QUF0Q0Qsc0NBc0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zTG9ndGFpbENvbmZpZyB9IGZyb20gJy4vc2xzLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0xvZ3RhaWxDb25maWcgYXMgTG9ndGFpbENvbmZpZ1Byb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgQUxJWVVOOjpTTFM6OkxvZ3RhaWxDb25maWdgXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTG9ndGFpbENvbmZpZ1Byb3BzIHtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBsb2dzdG9yZU5hbWU6IExvZ3N0b3JlIG5hbWU6XG4gICAgICogMS4gT25seSBzdXBwb3J0cyBsb3dlcmNhc2UgbGV0dGVycywgbnVtYmVycywgaHlwaGVucyAoLSkgYW5kIHVuZGVyc2NvcmVzIChfKS5cbiAgICAgKiAyLiBNdXN0IHN0YXJ0IGFuZCBlbmQgd2l0aCBsb3dlcmNhc2UgbGV0dGVycyBhbmQgbnVtYmVycy5cbiAgICAgKiAzLiBUaGUgbmFtZSBsZW5ndGggaXMgMy02MyBjaGFyYWN0ZXJzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGxvZ3N0b3JlTmFtZTogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGxvZ3RhaWxDb25maWdOYW1lOiBMb2d0YWlsIGNvbmZpZyBuYW1lOlxuICAgICAqIDEuIE9ubHkgc3VwcG9ydHMgbG93ZXJjYXNlIGxldHRlcnMsIG51bWJlcnMsIGh5cGhlbnMgKC0pIGFuZCB1bmRlcnNjb3JlcyAoXykuXG4gICAgICogMi4gTXVzdCBzdGFydCBhbmQgZW5kIHdpdGggbG93ZXJjYXNlIGxldHRlcnMgYW5kIG51bWJlcnMuXG4gICAgICogMy4gVGhlIG5hbWUgbGVuZ3RoIGlzIDMtNjMgY2hhcmFjdGVycy5cbiAgICAgKi9cbiAgICByZWFkb25seSBsb2d0YWlsQ29uZmlnTmFtZTogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHByb2plY3ROYW1lOiBQcm9qZWN0IG5hbWU6XG4gICAgICogMS4gT25seSBzdXBwb3J0cyBsb3dlcmNhc2UgbGV0dGVycywgbnVtYmVycywgaHlwaGVucyAoLSkgYW5kIHVuZGVyc2NvcmVzIChfKS5cbiAgICAgKiAyLiBNdXN0IHN0YXJ0IGFuZCBlbmQgd2l0aCBsb3dlcmNhc2UgbGV0dGVycyBhbmQgbnVtYmVycy5cbiAgICAgKiAzLiBUaGUgbmFtZSBsZW5ndGggaXMgMy02MyBjaGFyYWN0ZXJzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHByb2plY3ROYW1lOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgY2xvbmVGcm9tOiBDbG9uZSBsb2d0YWlsIGNvbmZpZyBkYXRhIGZyb20gZXhpc3RpbmcgbG9ndGFpbCBjb25maWcuXG4gICAgICogRWl0aGVyIENsb25lRnJvbSBvciBSYXdDb25maWdEYXRhIG11c3QgYmUgc3BlY2lmaWVkLiBJZiBDbG9uZUZyb20gYW5kIFJhd0NvbmZpZ0RhdGEgYXJlIGJvdGggc3BlY2lmaWVkLCBsb2d0YWlsIGNvbmZpZyBkYXRhIHdpbGwgYmUgbWVyZ2VkIGZyb20gYm90aCB3aXRoIFJhd0NvbmZpZ0RhdGEgZmlyc3QuXG4gICAgICovXG4gICAgcmVhZG9ubHkgY2xvbmVGcm9tPzogUm9zTG9ndGFpbENvbmZpZy5DbG9uZUZyb21Qcm9wZXJ0eSB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSByYXdDb25maWdEYXRhOiBUaGUgZm9ybWF0IGlzIHRoZSBzYW1lIGFzIHRoZSByZXNwb25zZSBvZiBTTFMgQVBJIEdldENvbmZpZy5cbiAgICAgKiBFaXRoZXIgQ2xvbmVGcm9tIG9yIFJhd0NvbmZpZ0RhdGEgbXVzdCBiZSBzcGVjaWZpZWQuIElmIENsb25lRnJvbSBhbmQgUmF3Q29uZmlnRGF0YSBhcmUgYm90aCBzcGVjaWZpZWQsIGxvZ3RhaWwgY29uZmlnIGRhdGEgd2lsbCBiZSBtZXJnZWQgZnJvbSBib3RoIHdpdGggUmF3Q29uZmlnRGF0YSBmaXJzdC5cbiAgICAgKiBjb25maWdOYW1lLCBvdXRwdXRUeXBlLCBvdXRwdXREZXRhaWwgaW4gZGF0YSB3aWxsIGJlIGlnbm9yZWQuRm9yIGV4YW1wbGU6XG4gICAgICoge1xuICAgICAqICAgICBcImNvbmZpZ05hbWVcIjogXCJ0ZXN0LWxvZ3RhaWwtY29uZmlnXCIsXG4gICAgICogICAgIFwiY3JlYXRlVGltZVwiOiAxNTc0ODQzNTU0LFxuICAgICAqICAgICBcImlucHV0RGV0YWlsXCI6IHtcbiAgICAgKiAgICAgICAgIFwiYWNjZXB0Tm9Fbm91Z2hLZXlzXCI6IGZhbHNlLFxuICAgICAqICAgICAgICAgXCJhZGp1c3RUaW1lem9uZVwiOiBmYWxzZSxcbiAgICAgKiAgICAgICAgIFwiYWR2YW5jZWRcIjoge1xuICAgICAqICAgICAgICAgICAgIFwiZm9yY2VfbXVsdGljb25maWdcIjogZmFsc2VcbiAgICAgKiAgICAgICAgIH0sXG4gICAgICogICAgICAgICBcImF1dG9FeHRlbmRcIjogdHJ1ZSxcbiAgICAgKiAgICAgICAgIFwiZGVsYXlBbGFybUJ5dGVzXCI6IDAsXG4gICAgICogICAgICAgICBcImRlbGF5U2tpcEJ5dGVzXCI6IDAsXG4gICAgICogICAgICAgICBcImRpc2NhcmROb25VdGY4XCI6IGZhbHNlLFxuICAgICAqICAgICAgICAgXCJkaXNjYXJkVW5tYXRjaFwiOiBmYWxzZSxcbiAgICAgKiAgICAgICAgIFwiZG9ja2VyRXhjbHVkZUVudlwiOiB7fSxcbiAgICAgKiAgICAgICAgIFwiZG9ja2VyRXhjbHVkZUxhYmVsXCI6IHt9LFxuICAgICAqICAgICAgICAgXCJkb2NrZXJGaWxlXCI6IGZhbHNlLFxuICAgICAqICAgICAgICAgXCJkb2NrZXJJbmNsdWRlRW52XCI6IHt9LFxuICAgICAqICAgICAgICAgXCJkb2NrZXJJbmNsdWRlTGFiZWxcIjoge30sXG4gICAgICogICAgICAgICBcImVuYWJsZVJhd0xvZ1wiOiBmYWxzZSxcbiAgICAgKiAgICAgICAgIFwiZW5hYmxlVGFnXCI6IGZhbHNlLFxuICAgICAqICAgICAgICAgXCJmaWxlRW5jb2RpbmdcIjogXCJ1dGY4XCIsXG4gICAgICogICAgICAgICBcImZpbGVQYXR0ZXJuXCI6IFwidGVzdC5sb2cqXCIsXG4gICAgICogICAgICAgICBcImZpbHRlcktleVwiOiBbXSxcbiAgICAgKiAgICAgICAgIFwiZmlsdGVyUmVnZXhcIjogW10sXG4gICAgICogICAgICAgICBcImtleVwiOiBbXG4gICAgICogICAgICAgICAgICAgXCJ0aW1lXCIsXG4gICAgICogICAgICAgICAgICAgXCJsb2dnZXJcIixcbiAgICAgKiAgICAgICAgICAgICBcImxldmVsXCIsXG4gICAgICogICAgICAgICAgICAgXCJyZXF1ZXN0X2lkXCIsXG4gICAgICogICAgICAgICAgICAgXCJ1c2VyX2lkXCIsXG4gICAgICogICAgICAgICAgICAgXCJyZWdpb25faWRcIixcbiAgICAgKiAgICAgICAgICAgICBcImNvbnRlbnRcIlxuICAgICAqICAgICAgICAgXSxcbiAgICAgKiAgICAgICAgIFwibG9jYWxTdG9yYWdlXCI6IHRydWUsXG4gICAgICogICAgICAgICBcImxvZ1BhdGhcIjogXCIvdmFyL2xvZy90ZXN0XCIsXG4gICAgICogICAgICAgICBcImxvZ1RpbWV6b25lXCI6IFwiXCIsXG4gICAgICogICAgICAgICBcImxvZ1R5cGVcIjogXCJkZWxpbWl0ZXJfbG9nXCIsXG4gICAgICogICAgICAgICBcIm1heERlcHRoXCI6IDEwMCxcbiAgICAgKiAgICAgICAgIFwibWF4U2VuZFJhdGVcIjogLTEsXG4gICAgICogICAgICAgICBcIm1lcmdlVHlwZVwiOiBcInRvcGljXCIsXG4gICAgICogICAgICAgICBcInByZXNlcnZlXCI6IHRydWUsXG4gICAgICogICAgICAgICBcInByZXNlcnZlRGVwdGhcIjogMSxcbiAgICAgKiAgICAgICAgIFwicHJpb3JpdHlcIjogMCxcbiAgICAgKiAgICAgICAgIFwicXVvdGVcIjogXCJcXHUwMDAxXCIsXG4gICAgICogICAgICAgICBcInNlbmRSYXRlRXhwaXJlXCI6IDAsXG4gICAgICogICAgICAgICBcInNlbnNpdGl2ZV9rZXlzXCI6IFtdLFxuICAgICAqICAgICAgICAgXCJzZXBhcmF0b3JcIjogXCIsLCxcIixcbiAgICAgKiAgICAgICAgIFwic2hhcmRIYXNoS2V5XCI6IFtdLFxuICAgICAqICAgICAgICAgXCJ0YWlsRXhpc3RlZFwiOiBmYWxzZSxcbiAgICAgKiAgICAgICAgIFwidGltZUZvcm1hdFwiOiBcIlwiLFxuICAgICAqICAgICAgICAgXCJ0aW1lS2V5XCI6IFwiXCIsXG4gICAgICogICAgICAgICBcInRvcGljRm9ybWF0XCI6IFwibm9uZVwiXG4gICAgICogICAgIH0sXG4gICAgICogICAgIFwiaW5wdXRUeXBlXCI6IFwiZmlsZVwiLFxuICAgICAqICAgICBcImxhc3RNb2RpZnlUaW1lXCI6IDE1NzQ4NDM1NTQsXG4gICAgICogICAgIFwibG9nU2FtcGxlXCI6IFwiMjAxOS0xMS0yNyAxMDo0ODoyMywxNjAsLCxNQUlOLCwsSU5GTywsLDk4RENDNTFELUJFNUQtNDlDNy1CM0ZELTM3QjJCQUVGQjI5NiwsLDEyMzQ1Njc4OSwsLGNuLWhhbmd6aG91LCwsdGhpcyBpcyBhIHNpbXBsZSB0ZXN0LlwiLFxuICAgICAqICAgICBcIm91dHB1dERldGFpbFwiOiB7XG4gICAgICogICAgICAgICBcImVuZHBvaW50XCI6IFwiY24taGFuZ3pob3UtaW50cmFuZXQubG9nLmFsaXl1bmNzLmNvbVwiLFxuICAgICAqICAgICAgICAgXCJsb2dzdG9yZU5hbWVcIjogXCJ0ZXN0LWxvZ3N0b3JlXCIsXG4gICAgICogICAgICAgICBcInJlZ2lvblwiOiBcImNuLWhhbmd6aG91XCJcbiAgICAgKiAgICAgfSxcbiAgICAgKiAgICAgXCJvdXRwdXRUeXBlXCI6IFwiTG9nU2VydmljZVwiXG4gICAgICogfVxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJhd0NvbmZpZ0RhdGE/OiB7IFtrZXk6IHN0cmluZ106IChhbnkgfCByb3MuSVJlc29sdmFibGUpIH0gfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogQSBST1MgcmVzb3VyY2UgdHlwZTogIGBBTElZVU46OlNMUzo6TG9ndGFpbENvbmZpZ2BcbiAqL1xuZXhwb3J0IGNsYXNzIExvZ3RhaWxDb25maWcgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuXG4gICAgLyoqXG4gICAgICogQSBmYWN0b3J5IG1ldGhvZCB0aGF0IGNyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcyBmcm9tIGFuIG9iamVjdFxuICAgICAqIGNvbnRhaW5pbmcgdGhlIHByb3BlcnRpZXMgb2YgdGhpcyBST1MgcmVzb3VyY2UsIHdoaWNoIHdpbGwgYmUgYXNzaWduZWQgdG8gUk9TIHJlc291cmNlLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQEF0dHJpYnV0ZSBBcHBsaWVkTWFjaGluZUdyb3VwczogQXBwbGllZCBtYWNoaW5lIGdyb3Vwcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckFwcGxpZWRNYWNoaW5lR3JvdXBzOiBhbnk7XG5cbiAgICAvKipcbiAgICAgKiBAQXR0cmlidXRlIEVuZHBvaW50OiBFbmRwb2ludCBhZGRyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyRW5kcG9pbnQ6IGFueTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBgQUxJWVVOOjpTTFM6OkxvZ3RhaWxDb25maWdgLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogQHBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIEBwYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IExvZ3RhaWxDb25maWdQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NMb2d0YWlsQ29uZmlnID0gbmV3IFJvc0xvZ3RhaWxDb25maWcodGhpcywgaWQsICB7XG4gICAgICAgICAgICBsb2d0YWlsQ29uZmlnTmFtZTogcHJvcHMubG9ndGFpbENvbmZpZ05hbWUsXG4gICAgICAgICAgICBsb2dzdG9yZU5hbWU6IHByb3BzLmxvZ3N0b3JlTmFtZSxcbiAgICAgICAgICAgIHByb2plY3ROYW1lOiBwcm9wcy5wcm9qZWN0TmFtZSxcbiAgICAgICAgICAgIHJhd0NvbmZpZ0RhdGE6IHByb3BzLnJhd0NvbmZpZ0RhdGEsXG4gICAgICAgICAgICBjbG9uZUZyb206IHByb3BzLmNsb25lRnJvbSxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NMb2d0YWlsQ29uZmlnO1xuICAgICAgICB0aGlzLmF0dHJBcHBsaWVkTWFjaGluZUdyb3VwcyA9IHJvc0xvZ3RhaWxDb25maWcuYXR0ckFwcGxpZWRNYWNoaW5lR3JvdXBzO1xuICAgICAgICB0aGlzLmF0dHJFbmRwb2ludCA9IHJvc0xvZ3RhaWxDb25maWcuYXR0ckVuZHBvaW50O1xuICAgIH1cbn1cbiJdfQ==