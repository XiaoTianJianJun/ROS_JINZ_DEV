"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosImageCache = exports.RosContainerGroup = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosContainerGroupProps`
 *
 * @param properties - the TypeScript properties of a `RosContainerGroupProps`
 *
 * @returns the result of the validation.
 */
function RosContainerGroupPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('securityContextSysctl', ros.listValidator(RosContainerGroup_SecurityContextSysctlPropertyValidator))(properties.securityContextSysctl));
    errors.collect(ros.propertyValidator('memory', ros.validateNumber)(properties.memory));
    errors.collect(ros.propertyValidator('initContainer', ros.listValidator(RosContainerGroup_InitContainerPropertyValidator))(properties.initContainer));
    errors.collect(ros.propertyValidator('cpu', ros.validateNumber)(properties.cpu));
    errors.collect(ros.propertyValidator('eipInstanceId', ros.validateString)(properties.eipInstanceId));
    errors.collect(ros.propertyValidator('containerGroupName', ros.requiredValidator)(properties.containerGroupName));
    if (properties.containerGroupName && (Array.isArray(properties.containerGroupName) || (typeof properties.containerGroupName) === 'string')) {
        errors.collect(ros.propertyValidator('containerGroupName', ros.validateLength)({
            data: properties.containerGroupName.length,
            min: 2,
            max: 128,
        }));
    }
    errors.collect(ros.propertyValidator('containerGroupName', ros.validateString)(properties.containerGroupName));
    errors.collect(ros.propertyValidator('container', ros.requiredValidator)(properties.container));
    errors.collect(ros.propertyValidator('container', ros.listValidator(RosContainerGroup_ContainerPropertyValidator))(properties.container));
    errors.collect(ros.propertyValidator('imageSnapshotId', ros.validateString)(properties.imageSnapshotId));
    errors.collect(ros.propertyValidator('ramRoleName', ros.validateString)(properties.ramRoleName));
    errors.collect(ros.propertyValidator('dnsConfig', RosContainerGroup_DnsConfigPropertyValidator)(properties.dnsConfig));
    errors.collect(ros.propertyValidator('autoMatchImageCache', ros.validateBoolean)(properties.autoMatchImageCache));
    errors.collect(ros.propertyValidator('ipv6AddressCount', ros.validateNumber)(properties.ipv6AddressCount));
    if (properties.imageRegistryCredential && (Array.isArray(properties.imageRegistryCredential) || (typeof properties.imageRegistryCredential) === 'string')) {
        errors.collect(ros.propertyValidator('imageRegistryCredential', ros.validateLength)({
            data: properties.imageRegistryCredential.length,
            min: undefined,
            max: 10,
        }));
    }
    errors.collect(ros.propertyValidator('imageRegistryCredential', ros.listValidator(RosContainerGroup_ImageRegistryCredentialPropertyValidator))(properties.imageRegistryCredential));
    errors.collect(ros.propertyValidator('spotPriceLimit', ros.validateNumber)(properties.spotPriceLimit));
    errors.collect(ros.propertyValidator('instanceType', ros.validateString)(properties.instanceType));
    if (properties.spotStrategy && (typeof properties.spotStrategy) !== 'object') {
        errors.collect(ros.propertyValidator('spotStrategy', ros.validateAllowedValues)({
            data: properties.spotStrategy,
            allowedValues: ["NoSpot", "SpotWithPriceLimit", "SpotAsPriceGo"],
        }));
    }
    errors.collect(ros.propertyValidator('spotStrategy', ros.validateString)(properties.spotStrategy));
    errors.collect(ros.propertyValidator('activeDeadlineSeconds', ros.validateNumber)(properties.activeDeadlineSeconds));
    errors.collect(ros.propertyValidator('hostAliase', ros.listValidator(RosContainerGroup_HostAliasePropertyValidator))(properties.hostAliase));
    errors.collect(ros.propertyValidator('zoneId', ros.validateString)(properties.zoneId));
    errors.collect(ros.propertyValidator('terminationGracePeriodSeconds', ros.validateNumber)(properties.terminationGracePeriodSeconds));
    errors.collect(ros.propertyValidator('vSwitchId', ros.requiredValidator)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('vSwitchId', ros.validateString)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('securityGroupId', ros.requiredValidator)(properties.securityGroupId));
    errors.collect(ros.propertyValidator('securityGroupId', ros.validateString)(properties.securityGroupId));
    errors.collect(ros.propertyValidator('slsEnable', ros.validateBoolean)(properties.slsEnable));
    if (properties.restartPolicy && (typeof properties.restartPolicy) !== 'object') {
        errors.collect(ros.propertyValidator('restartPolicy', ros.validateAllowedValues)({
            data: properties.restartPolicy,
            allowedValues: ["Always", "OnFailure", "Never"],
        }));
    }
    errors.collect(ros.propertyValidator('restartPolicy', ros.validateString)(properties.restartPolicy));
    if (properties.volume && (Array.isArray(properties.volume) || (typeof properties.volume) === 'string')) {
        errors.collect(ros.propertyValidator('volume', ros.validateLength)({
            data: properties.volume.length,
            min: undefined,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('volume', ros.listValidator(RosContainerGroup_VolumePropertyValidator))(properties.volume));
    if (properties.tag && (Array.isArray(properties.tag) || (typeof properties.tag) === 'string')) {
        errors.collect(ros.propertyValidator('tag', ros.validateLength)({
            data: properties.tag.length,
            min: undefined,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('tag', ros.listValidator(ros.validateRosTag))(properties.tag));
    return errors.wrap('supplied properties not correct for "RosContainerGroupProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ECI::ContainerGroup` resource
 *
 * @param properties - the TypeScript properties of a `RosContainerGroupProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ECI::ContainerGroup` resource.
 */
// @ts-ignore TS6133
function rosContainerGroupPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosContainerGroupPropsValidator(properties).assertSuccess();
    }
    return {
        Container: ros.listMapper(rosContainerGroupContainerPropertyToRosTemplate)(properties.container),
        ContainerGroupName: ros.stringToRosTemplate(properties.containerGroupName),
        SecurityGroupId: ros.stringToRosTemplate(properties.securityGroupId),
        VSwitchId: ros.stringToRosTemplate(properties.vSwitchId),
        ActiveDeadlineSeconds: ros.numberToRosTemplate(properties.activeDeadlineSeconds),
        AutoMatchImageCache: ros.booleanToRosTemplate(properties.autoMatchImageCache),
        Cpu: ros.numberToRosTemplate(properties.cpu),
        DnsConfig: rosContainerGroupDnsConfigPropertyToRosTemplate(properties.dnsConfig),
        EipInstanceId: ros.stringToRosTemplate(properties.eipInstanceId),
        HostAliase: ros.listMapper(rosContainerGroupHostAliasePropertyToRosTemplate)(properties.hostAliase),
        ImageRegistryCredential: ros.listMapper(rosContainerGroupImageRegistryCredentialPropertyToRosTemplate)(properties.imageRegistryCredential),
        ImageSnapshotId: ros.stringToRosTemplate(properties.imageSnapshotId),
        InitContainer: ros.listMapper(rosContainerGroupInitContainerPropertyToRosTemplate)(properties.initContainer),
        InstanceType: ros.stringToRosTemplate(properties.instanceType),
        Ipv6AddressCount: ros.numberToRosTemplate(properties.ipv6AddressCount),
        Memory: ros.numberToRosTemplate(properties.memory),
        RamRoleName: ros.stringToRosTemplate(properties.ramRoleName),
        RestartPolicy: ros.stringToRosTemplate(properties.restartPolicy),
        SecurityContextSysctl: ros.listMapper(rosContainerGroupSecurityContextSysctlPropertyToRosTemplate)(properties.securityContextSysctl),
        SlsEnable: ros.booleanToRosTemplate(properties.slsEnable),
        SpotPriceLimit: ros.numberToRosTemplate(properties.spotPriceLimit),
        SpotStrategy: ros.stringToRosTemplate(properties.spotStrategy),
        Tag: ros.listMapper(ros.rosTagToRosTemplate)(properties.tag),
        TerminationGracePeriodSeconds: ros.numberToRosTemplate(properties.terminationGracePeriodSeconds),
        Volume: ros.listMapper(rosContainerGroupVolumePropertyToRosTemplate)(properties.volume),
        ZoneId: ros.stringToRosTemplate(properties.zoneId),
    };
}
/**
 * A ROS template type:  `ALIYUN::ECI::ContainerGroup`
 */
class RosContainerGroup extends ros.RosResource {
    /**
     * Create a new `ALIYUN::ECI::ContainerGroup`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosContainerGroup.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrContainerGroupId = ros.Token.asString(this.getAtt('ContainerGroupId'));
        this.attrContainerGroupName = ros.Token.asString(this.getAtt('ContainerGroupName'));
        this.attrEniInstanceId = ros.Token.asString(this.getAtt('EniInstanceId'));
        this.attrInternetIp = ros.Token.asString(this.getAtt('InternetIp'));
        this.attrIntranetIp = ros.Token.asString(this.getAtt('IntranetIp'));
        this.attrIpv6Address = ros.Token.asString(this.getAtt('Ipv6Address'));
        this.attrRegionId = ros.Token.asString(this.getAtt('RegionId'));
        this.attrSecurityGroupId = ros.Token.asString(this.getAtt('SecurityGroupId'));
        this.attrVSwitchId = ros.Token.asString(this.getAtt('VSwitchId'));
        this.attrZoneId = ros.Token.asString(this.getAtt('ZoneId'));
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.container = props.container;
        this.containerGroupName = props.containerGroupName;
        this.securityGroupId = props.securityGroupId;
        this.vSwitchId = props.vSwitchId;
        this.activeDeadlineSeconds = props.activeDeadlineSeconds;
        this.autoMatchImageCache = props.autoMatchImageCache;
        this.cpu = props.cpu;
        this.dnsConfig = props.dnsConfig;
        this.eipInstanceId = props.eipInstanceId;
        this.hostAliase = props.hostAliase;
        this.imageRegistryCredential = props.imageRegistryCredential;
        this.imageSnapshotId = props.imageSnapshotId;
        this.initContainer = props.initContainer;
        this.instanceType = props.instanceType;
        this.ipv6AddressCount = props.ipv6AddressCount;
        this.memory = props.memory;
        this.ramRoleName = props.ramRoleName;
        this.restartPolicy = props.restartPolicy;
        this.securityContextSysctl = props.securityContextSysctl;
        this.slsEnable = props.slsEnable;
        this.spotPriceLimit = props.spotPriceLimit;
        this.spotStrategy = props.spotStrategy;
        this.tag = props.tag;
        this.terminationGracePeriodSeconds = props.terminationGracePeriodSeconds;
        this.volume = props.volume;
        this.zoneId = props.zoneId;
    }
    get rosProperties() {
        return {
            container: this.container,
            containerGroupName: this.containerGroupName,
            securityGroupId: this.securityGroupId,
            vSwitchId: this.vSwitchId,
            activeDeadlineSeconds: this.activeDeadlineSeconds,
            autoMatchImageCache: this.autoMatchImageCache,
            cpu: this.cpu,
            dnsConfig: this.dnsConfig,
            eipInstanceId: this.eipInstanceId,
            hostAliase: this.hostAliase,
            imageRegistryCredential: this.imageRegistryCredential,
            imageSnapshotId: this.imageSnapshotId,
            initContainer: this.initContainer,
            instanceType: this.instanceType,
            ipv6AddressCount: this.ipv6AddressCount,
            memory: this.memory,
            ramRoleName: this.ramRoleName,
            restartPolicy: this.restartPolicy,
            securityContextSysctl: this.securityContextSysctl,
            slsEnable: this.slsEnable,
            spotPriceLimit: this.spotPriceLimit,
            spotStrategy: this.spotStrategy,
            tag: this.tag,
            terminationGracePeriodSeconds: this.terminationGracePeriodSeconds,
            volume: this.volume,
            zoneId: this.zoneId,
        };
    }
    renderProperties(props) {
        return rosContainerGroupPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosContainerGroup = RosContainerGroup;
/**
 * The resource type name for this resource class.
 */
RosContainerGroup.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ECI::ContainerGroup";
/**
 * Determine whether the given properties match those of a `ConfigFileVolumeConfigFileToPathProperty`
 *
 * @param properties - the TypeScript properties of a `ConfigFileVolumeConfigFileToPathProperty`
 *
 * @returns the result of the validation.
 */
function RosContainerGroup_ConfigFileVolumeConfigFileToPathPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('path', ros.requiredValidator)(properties.path));
    errors.collect(ros.propertyValidator('path', ros.validateString)(properties.path));
    errors.collect(ros.propertyValidator('content', ros.validateString)(properties.content));
    return errors.wrap('supplied properties not correct for "ConfigFileVolumeConfigFileToPathProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ECI::ContainerGroup.ConfigFileVolumeConfigFileToPath` resource
 *
 * @param properties - the TypeScript properties of a `ConfigFileVolumeConfigFileToPathProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ECI::ContainerGroup.ConfigFileVolumeConfigFileToPath` resource.
 */
// @ts-ignore TS6133
function rosContainerGroupConfigFileVolumeConfigFileToPathPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosContainerGroup_ConfigFileVolumeConfigFileToPathPropertyValidator(properties).assertSuccess();
    return {
        Path: ros.stringToRosTemplate(properties.path),
        Content: ros.stringToRosTemplate(properties.content),
    };
}
/**
 * Determine whether the given properties match those of a `ContainerProperty`
 *
 * @param properties - the TypeScript properties of a `ContainerProperty`
 *
 * @returns the result of the validation.
 */
function RosContainerGroup_ContainerPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('readinessProbe', RosContainerGroup_ReadinessProbePropertyValidator)(properties.readinessProbe));
    errors.collect(ros.propertyValidator('livenessProbe', RosContainerGroup_LivenessProbePropertyValidator)(properties.livenessProbe));
    errors.collect(ros.propertyValidator('memory', ros.validateNumber)(properties.memory));
    if (properties.port && (Array.isArray(properties.port) || (typeof properties.port) === 'string')) {
        errors.collect(ros.propertyValidator('port', ros.validateLength)({
            data: properties.port.length,
            min: undefined,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('port', ros.listValidator(RosContainerGroup_PortPropertyValidator))(properties.port));
    errors.collect(ros.propertyValidator('cpu', ros.validateNumber)(properties.cpu));
    errors.collect(ros.propertyValidator('image', ros.requiredValidator)(properties.image));
    errors.collect(ros.propertyValidator('image', ros.validateString)(properties.image));
    errors.collect(ros.propertyValidator('stdinOnce', ros.validateBoolean)(properties.stdinOnce));
    errors.collect(ros.propertyValidator('name', ros.requiredValidator)(properties.name));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    errors.collect(ros.propertyValidator('stdin', ros.validateBoolean)(properties.stdin));
    errors.collect(ros.propertyValidator('workingDir', ros.validateString)(properties.workingDir));
    errors.collect(ros.propertyValidator('imagePullPolicy', ros.validateString)(properties.imagePullPolicy));
    if (properties.command && (Array.isArray(properties.command) || (typeof properties.command) === 'string')) {
        errors.collect(ros.propertyValidator('command', ros.validateLength)({
            data: properties.command.length,
            min: undefined,
            max: 1,
        }));
    }
    errors.collect(ros.propertyValidator('command', ros.listValidator(ros.validateString))(properties.command));
    if (properties.arg && (Array.isArray(properties.arg) || (typeof properties.arg) === 'string')) {
        errors.collect(ros.propertyValidator('arg', ros.validateLength)({
            data: properties.arg.length,
            min: undefined,
            max: 10,
        }));
    }
    errors.collect(ros.propertyValidator('arg', ros.listValidator(ros.validateString))(properties.arg));
    errors.collect(ros.propertyValidator('tty', ros.validateBoolean)(properties.tty));
    errors.collect(ros.propertyValidator('securityContext', RosContainerGroup_SecurityContextPropertyValidator)(properties.securityContext));
    if (properties.volumeMount && (Array.isArray(properties.volumeMount) || (typeof properties.volumeMount) === 'string')) {
        errors.collect(ros.propertyValidator('volumeMount', ros.validateLength)({
            data: properties.volumeMount.length,
            min: undefined,
            max: 16,
        }));
    }
    errors.collect(ros.propertyValidator('volumeMount', ros.listValidator(RosContainerGroup_VolumeMountPropertyValidator))(properties.volumeMount));
    if (properties.environmentVar && (Array.isArray(properties.environmentVar) || (typeof properties.environmentVar) === 'string')) {
        errors.collect(ros.propertyValidator('environmentVar', ros.validateLength)({
            data: properties.environmentVar.length,
            min: undefined,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('environmentVar', ros.listValidator(RosContainerGroup_EnvironmentVarPropertyValidator))(properties.environmentVar));
    return errors.wrap('supplied properties not correct for "ContainerProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ECI::ContainerGroup.Container` resource
 *
 * @param properties - the TypeScript properties of a `ContainerProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ECI::ContainerGroup.Container` resource.
 */
// @ts-ignore TS6133
function rosContainerGroupContainerPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosContainerGroup_ContainerPropertyValidator(properties).assertSuccess();
    return {
        ReadinessProbe: rosContainerGroupReadinessProbePropertyToRosTemplate(properties.readinessProbe),
        LivenessProbe: rosContainerGroupLivenessProbePropertyToRosTemplate(properties.livenessProbe),
        Memory: ros.numberToRosTemplate(properties.memory),
        Port: ros.listMapper(rosContainerGroupPortPropertyToRosTemplate)(properties.port),
        Cpu: ros.numberToRosTemplate(properties.cpu),
        Image: ros.stringToRosTemplate(properties.image),
        StdinOnce: ros.booleanToRosTemplate(properties.stdinOnce),
        Name: ros.stringToRosTemplate(properties.name),
        Stdin: ros.booleanToRosTemplate(properties.stdin),
        WorkingDir: ros.stringToRosTemplate(properties.workingDir),
        ImagePullPolicy: ros.stringToRosTemplate(properties.imagePullPolicy),
        Command: ros.listMapper(ros.stringToRosTemplate)(properties.command),
        Arg: ros.listMapper(ros.stringToRosTemplate)(properties.arg),
        Tty: ros.booleanToRosTemplate(properties.tty),
        SecurityContext: rosContainerGroupSecurityContextPropertyToRosTemplate(properties.securityContext),
        VolumeMount: ros.listMapper(rosContainerGroupVolumeMountPropertyToRosTemplate)(properties.volumeMount),
        EnvironmentVar: ros.listMapper(rosContainerGroupEnvironmentVarPropertyToRosTemplate)(properties.environmentVar),
    };
}
/**
 * Determine whether the given properties match those of a `DnsConfigProperty`
 *
 * @param properties - the TypeScript properties of a `DnsConfigProperty`
 *
 * @returns the result of the validation.
 */
function RosContainerGroup_DnsConfigPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('nameServer', ros.listValidator(ros.validateString))(properties.nameServer));
    errors.collect(ros.propertyValidator('search', ros.listValidator(ros.validateString))(properties.search));
    errors.collect(ros.propertyValidator('option', ros.listValidator(RosContainerGroup_OptionPropertyValidator))(properties.option));
    return errors.wrap('supplied properties not correct for "DnsConfigProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ECI::ContainerGroup.DnsConfig` resource
 *
 * @param properties - the TypeScript properties of a `DnsConfigProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ECI::ContainerGroup.DnsConfig` resource.
 */
// @ts-ignore TS6133
function rosContainerGroupDnsConfigPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosContainerGroup_DnsConfigPropertyValidator(properties).assertSuccess();
    return {
        NameServer: ros.listMapper(ros.stringToRosTemplate)(properties.nameServer),
        Search: ros.listMapper(ros.stringToRosTemplate)(properties.search),
        Option: ros.listMapper(rosContainerGroupOptionPropertyToRosTemplate)(properties.option),
    };
}
/**
 * Determine whether the given properties match those of a `EnvironmentVarProperty`
 *
 * @param properties - the TypeScript properties of a `EnvironmentVarProperty`
 *
 * @returns the result of the validation.
 */
function RosContainerGroup_EnvironmentVarPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.value && (Array.isArray(properties.value) || (typeof properties.value) === 'string')) {
        errors.collect(ros.propertyValidator('value', ros.validateLength)({
            data: properties.value.length,
            min: 0,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    if (properties.key && (Array.isArray(properties.key) || (typeof properties.key) === 'string')) {
        errors.collect(ros.propertyValidator('key', ros.validateLength)({
            data: properties.key.length,
            min: 1,
            max: 128,
        }));
    }
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    if (properties.fieldRefFieldPath && (typeof properties.fieldRefFieldPath) !== 'object') {
        errors.collect(ros.propertyValidator('fieldRefFieldPath', ros.validateAllowedValues)({
            data: properties.fieldRefFieldPath,
            allowedValues: ["status.podIP"],
        }));
    }
    errors.collect(ros.propertyValidator('fieldRefFieldPath', ros.validateString)(properties.fieldRefFieldPath));
    return errors.wrap('supplied properties not correct for "EnvironmentVarProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ECI::ContainerGroup.EnvironmentVar` resource
 *
 * @param properties - the TypeScript properties of a `EnvironmentVarProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ECI::ContainerGroup.EnvironmentVar` resource.
 */
// @ts-ignore TS6133
function rosContainerGroupEnvironmentVarPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosContainerGroup_EnvironmentVarPropertyValidator(properties).assertSuccess();
    return {
        Value: ros.stringToRosTemplate(properties.value),
        Key: ros.stringToRosTemplate(properties.key),
        FieldRefFieldPath: ros.stringToRosTemplate(properties.fieldRefFieldPath),
    };
}
/**
 * Determine whether the given properties match those of a `HostAliaseProperty`
 *
 * @param properties - the TypeScript properties of a `HostAliaseProperty`
 *
 * @returns the result of the validation.
 */
function RosContainerGroup_HostAliasePropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('ip', ros.validateString)(properties.ip));
    errors.collect(ros.propertyValidator('hostname', ros.listValidator(ros.validateString))(properties.hostname));
    return errors.wrap('supplied properties not correct for "HostAliaseProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ECI::ContainerGroup.HostAliase` resource
 *
 * @param properties - the TypeScript properties of a `HostAliaseProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ECI::ContainerGroup.HostAliase` resource.
 */
// @ts-ignore TS6133
function rosContainerGroupHostAliasePropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosContainerGroup_HostAliasePropertyValidator(properties).assertSuccess();
    return {
        Ip: ros.stringToRosTemplate(properties.ip),
        Hostname: ros.listMapper(ros.stringToRosTemplate)(properties.hostname),
    };
}
/**
 * Determine whether the given properties match those of a `ImageRegistryCredentialProperty`
 *
 * @param properties - the TypeScript properties of a `ImageRegistryCredentialProperty`
 *
 * @returns the result of the validation.
 */
function RosContainerGroup_ImageRegistryCredentialPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('userName', ros.requiredValidator)(properties.userName));
    errors.collect(ros.propertyValidator('userName', ros.validateString)(properties.userName));
    errors.collect(ros.propertyValidator('server', ros.requiredValidator)(properties.server));
    errors.collect(ros.propertyValidator('server', ros.validateString)(properties.server));
    errors.collect(ros.propertyValidator('password', ros.requiredValidator)(properties.password));
    errors.collect(ros.propertyValidator('password', ros.validateString)(properties.password));
    return errors.wrap('supplied properties not correct for "ImageRegistryCredentialProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ECI::ContainerGroup.ImageRegistryCredential` resource
 *
 * @param properties - the TypeScript properties of a `ImageRegistryCredentialProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ECI::ContainerGroup.ImageRegistryCredential` resource.
 */
// @ts-ignore TS6133
function rosContainerGroupImageRegistryCredentialPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosContainerGroup_ImageRegistryCredentialPropertyValidator(properties).assertSuccess();
    return {
        UserName: ros.stringToRosTemplate(properties.userName),
        Server: ros.stringToRosTemplate(properties.server),
        Password: ros.stringToRosTemplate(properties.password),
    };
}
/**
 * Determine whether the given properties match those of a `InitContainerProperty`
 *
 * @param properties - the TypeScript properties of a `InitContainerProperty`
 *
 * @returns the result of the validation.
 */
function RosContainerGroup_InitContainerPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('workingDir', ros.validateString)(properties.workingDir));
    errors.collect(ros.propertyValidator('imagePullPolicy', ros.validateString)(properties.imagePullPolicy));
    if (properties.command && (Array.isArray(properties.command) || (typeof properties.command) === 'string')) {
        errors.collect(ros.propertyValidator('command', ros.validateLength)({
            data: properties.command.length,
            min: undefined,
            max: 1,
        }));
    }
    errors.collect(ros.propertyValidator('command', ros.listValidator(ros.validateString))(properties.command));
    errors.collect(ros.propertyValidator('memory', ros.validateNumber)(properties.memory));
    if (properties.arg && (Array.isArray(properties.arg) || (typeof properties.arg) === 'string')) {
        errors.collect(ros.propertyValidator('arg', ros.validateLength)({
            data: properties.arg.length,
            min: undefined,
            max: 10,
        }));
    }
    errors.collect(ros.propertyValidator('arg', ros.listValidator(ros.validateString))(properties.arg));
    if (properties.port && (Array.isArray(properties.port) || (typeof properties.port) === 'string')) {
        errors.collect(ros.propertyValidator('port', ros.validateLength)({
            data: properties.port.length,
            min: undefined,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('port', ros.listValidator(RosContainerGroup_PortPropertyValidator))(properties.port));
    errors.collect(ros.propertyValidator('securityContext', RosContainerGroup_SecurityContextPropertyValidator)(properties.securityContext));
    errors.collect(ros.propertyValidator('cpu', ros.validateNumber)(properties.cpu));
    if (properties.volumeMount && (Array.isArray(properties.volumeMount) || (typeof properties.volumeMount) === 'string')) {
        errors.collect(ros.propertyValidator('volumeMount', ros.validateLength)({
            data: properties.volumeMount.length,
            min: undefined,
            max: 16,
        }));
    }
    errors.collect(ros.propertyValidator('volumeMount', ros.listValidator(RosContainerGroup_VolumeMountPropertyValidator))(properties.volumeMount));
    errors.collect(ros.propertyValidator('image', ros.validateString)(properties.image));
    if (properties.environmentVar && (Array.isArray(properties.environmentVar) || (typeof properties.environmentVar) === 'string')) {
        errors.collect(ros.propertyValidator('environmentVar', ros.validateLength)({
            data: properties.environmentVar.length,
            min: undefined,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('environmentVar', ros.listValidator(RosContainerGroup_EnvironmentVarPropertyValidator))(properties.environmentVar));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    return errors.wrap('supplied properties not correct for "InitContainerProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ECI::ContainerGroup.InitContainer` resource
 *
 * @param properties - the TypeScript properties of a `InitContainerProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ECI::ContainerGroup.InitContainer` resource.
 */
// @ts-ignore TS6133
function rosContainerGroupInitContainerPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosContainerGroup_InitContainerPropertyValidator(properties).assertSuccess();
    return {
        WorkingDir: ros.stringToRosTemplate(properties.workingDir),
        ImagePullPolicy: ros.stringToRosTemplate(properties.imagePullPolicy),
        Command: ros.listMapper(ros.stringToRosTemplate)(properties.command),
        Memory: ros.numberToRosTemplate(properties.memory),
        Arg: ros.listMapper(ros.stringToRosTemplate)(properties.arg),
        Port: ros.listMapper(rosContainerGroupPortPropertyToRosTemplate)(properties.port),
        SecurityContext: rosContainerGroupSecurityContextPropertyToRosTemplate(properties.securityContext),
        Cpu: ros.numberToRosTemplate(properties.cpu),
        VolumeMount: ros.listMapper(rosContainerGroupVolumeMountPropertyToRosTemplate)(properties.volumeMount),
        Image: ros.stringToRosTemplate(properties.image),
        EnvironmentVar: ros.listMapper(rosContainerGroupEnvironmentVarPropertyToRosTemplate)(properties.environmentVar),
        Name: ros.stringToRosTemplate(properties.name),
    };
}
/**
 * Determine whether the given properties match those of a `LivenessProbeProperty`
 *
 * @param properties - the TypeScript properties of a `LivenessProbeProperty`
 *
 * @returns the result of the validation.
 */
function RosContainerGroup_LivenessProbePropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.timeoutSeconds && (typeof properties.timeoutSeconds) !== 'object') {
        errors.collect(ros.propertyValidator('timeoutSeconds', ros.validateRange)({
            data: properties.timeoutSeconds,
            min: 1,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('timeoutSeconds', ros.validateNumber)(properties.timeoutSeconds));
    errors.collect(ros.propertyValidator('initialDelaySeconds', ros.validateNumber)(properties.initialDelaySeconds));
    if (properties.periodSeconds && (typeof properties.periodSeconds) !== 'object') {
        errors.collect(ros.propertyValidator('periodSeconds', ros.validateRange)({
            data: properties.periodSeconds,
            min: 1,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('periodSeconds', ros.validateNumber)(properties.periodSeconds));
    errors.collect(ros.propertyValidator('failureThreshold', ros.validateNumber)(properties.failureThreshold));
    errors.collect(ros.propertyValidator('successThreshold', ros.validateNumber)(properties.successThreshold));
    errors.collect(ros.propertyValidator('execCommand', ros.listValidator(ros.validateString))(properties.execCommand));
    errors.collect(ros.propertyValidator('httpGetPort', ros.validateNumber)(properties.httpGetPort));
    errors.collect(ros.propertyValidator('tcpSocketPort', ros.validateNumber)(properties.tcpSocketPort));
    if (properties.httpGetScheme && (typeof properties.httpGetScheme) !== 'object') {
        errors.collect(ros.propertyValidator('httpGetScheme', ros.validateAllowedValues)({
            data: properties.httpGetScheme,
            allowedValues: ["HTTP", "HTTPS"],
        }));
    }
    errors.collect(ros.propertyValidator('httpGetScheme', ros.validateString)(properties.httpGetScheme));
    errors.collect(ros.propertyValidator('httpGetPath', ros.validateString)(properties.httpGetPath));
    return errors.wrap('supplied properties not correct for "LivenessProbeProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ECI::ContainerGroup.LivenessProbe` resource
 *
 * @param properties - the TypeScript properties of a `LivenessProbeProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ECI::ContainerGroup.LivenessProbe` resource.
 */
// @ts-ignore TS6133
function rosContainerGroupLivenessProbePropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosContainerGroup_LivenessProbePropertyValidator(properties).assertSuccess();
    return {
        TimeoutSeconds: ros.numberToRosTemplate(properties.timeoutSeconds),
        InitialDelaySeconds: ros.numberToRosTemplate(properties.initialDelaySeconds),
        PeriodSeconds: ros.numberToRosTemplate(properties.periodSeconds),
        FailureThreshold: ros.numberToRosTemplate(properties.failureThreshold),
        SuccessThreshold: ros.numberToRosTemplate(properties.successThreshold),
        ExecCommand: ros.listMapper(ros.stringToRosTemplate)(properties.execCommand),
        HttpGetPort: ros.numberToRosTemplate(properties.httpGetPort),
        TcpSocketPort: ros.numberToRosTemplate(properties.tcpSocketPort),
        HttpGetScheme: ros.stringToRosTemplate(properties.httpGetScheme),
        HttpGetPath: ros.stringToRosTemplate(properties.httpGetPath),
    };
}
/**
 * Determine whether the given properties match those of a `OptionProperty`
 *
 * @param properties - the TypeScript properties of a `OptionProperty`
 *
 * @returns the result of the validation.
 */
function RosContainerGroup_OptionPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    return errors.wrap('supplied properties not correct for "OptionProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ECI::ContainerGroup.Option` resource
 *
 * @param properties - the TypeScript properties of a `OptionProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ECI::ContainerGroup.Option` resource.
 */
// @ts-ignore TS6133
function rosContainerGroupOptionPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosContainerGroup_OptionPropertyValidator(properties).assertSuccess();
    return {
        Value: ros.stringToRosTemplate(properties.value),
        Name: ros.stringToRosTemplate(properties.name),
    };
}
/**
 * Determine whether the given properties match those of a `PortProperty`
 *
 * @param properties - the TypeScript properties of a `PortProperty`
 *
 * @returns the result of the validation.
 */
function RosContainerGroup_PortPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.port && (typeof properties.port) !== 'object') {
        errors.collect(ros.propertyValidator('port', ros.validateRange)({
            data: properties.port,
            min: 1,
            max: 65535,
        }));
    }
    errors.collect(ros.propertyValidator('port', ros.validateNumber)(properties.port));
    if (properties.protocol && (typeof properties.protocol) !== 'object') {
        errors.collect(ros.propertyValidator('protocol', ros.validateAllowedValues)({
            data: properties.protocol,
            allowedValues: ["TCP", "UDP"],
        }));
    }
    errors.collect(ros.propertyValidator('protocol', ros.validateString)(properties.protocol));
    return errors.wrap('supplied properties not correct for "PortProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ECI::ContainerGroup.Port` resource
 *
 * @param properties - the TypeScript properties of a `PortProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ECI::ContainerGroup.Port` resource.
 */
// @ts-ignore TS6133
function rosContainerGroupPortPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosContainerGroup_PortPropertyValidator(properties).assertSuccess();
    return {
        Port: ros.numberToRosTemplate(properties.port),
        Protocol: ros.stringToRosTemplate(properties.protocol),
    };
}
/**
 * Determine whether the given properties match those of a `ReadinessProbeProperty`
 *
 * @param properties - the TypeScript properties of a `ReadinessProbeProperty`
 *
 * @returns the result of the validation.
 */
function RosContainerGroup_ReadinessProbePropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.timeoutSeconds && (typeof properties.timeoutSeconds) !== 'object') {
        errors.collect(ros.propertyValidator('timeoutSeconds', ros.validateRange)({
            data: properties.timeoutSeconds,
            min: 1,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('timeoutSeconds', ros.validateNumber)(properties.timeoutSeconds));
    errors.collect(ros.propertyValidator('initialDelaySeconds', ros.validateNumber)(properties.initialDelaySeconds));
    if (properties.periodSeconds && (typeof properties.periodSeconds) !== 'object') {
        errors.collect(ros.propertyValidator('periodSeconds', ros.validateRange)({
            data: properties.periodSeconds,
            min: 1,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('periodSeconds', ros.validateNumber)(properties.periodSeconds));
    errors.collect(ros.propertyValidator('failureThreshold', ros.validateNumber)(properties.failureThreshold));
    errors.collect(ros.propertyValidator('successThreshold', ros.validateNumber)(properties.successThreshold));
    errors.collect(ros.propertyValidator('execCommand', ros.listValidator(ros.validateString))(properties.execCommand));
    errors.collect(ros.propertyValidator('httpGetPort', ros.validateNumber)(properties.httpGetPort));
    errors.collect(ros.propertyValidator('tcpSocketPort', ros.validateNumber)(properties.tcpSocketPort));
    if (properties.httpGetScheme && (typeof properties.httpGetScheme) !== 'object') {
        errors.collect(ros.propertyValidator('httpGetScheme', ros.validateAllowedValues)({
            data: properties.httpGetScheme,
            allowedValues: ["HTTP", "HTTPS"],
        }));
    }
    errors.collect(ros.propertyValidator('httpGetScheme', ros.validateString)(properties.httpGetScheme));
    errors.collect(ros.propertyValidator('httpGetPath', ros.validateString)(properties.httpGetPath));
    return errors.wrap('supplied properties not correct for "ReadinessProbeProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ECI::ContainerGroup.ReadinessProbe` resource
 *
 * @param properties - the TypeScript properties of a `ReadinessProbeProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ECI::ContainerGroup.ReadinessProbe` resource.
 */
// @ts-ignore TS6133
function rosContainerGroupReadinessProbePropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosContainerGroup_ReadinessProbePropertyValidator(properties).assertSuccess();
    return {
        TimeoutSeconds: ros.numberToRosTemplate(properties.timeoutSeconds),
        InitialDelaySeconds: ros.numberToRosTemplate(properties.initialDelaySeconds),
        PeriodSeconds: ros.numberToRosTemplate(properties.periodSeconds),
        FailureThreshold: ros.numberToRosTemplate(properties.failureThreshold),
        SuccessThreshold: ros.numberToRosTemplate(properties.successThreshold),
        ExecCommand: ros.listMapper(ros.stringToRosTemplate)(properties.execCommand),
        HttpGetPort: ros.numberToRosTemplate(properties.httpGetPort),
        TcpSocketPort: ros.numberToRosTemplate(properties.tcpSocketPort),
        HttpGetScheme: ros.stringToRosTemplate(properties.httpGetScheme),
        HttpGetPath: ros.stringToRosTemplate(properties.httpGetPath),
    };
}
/**
 * Determine whether the given properties match those of a `SecurityContextProperty`
 *
 * @param properties - the TypeScript properties of a `SecurityContextProperty`
 *
 * @returns the result of the validation.
 */
function RosContainerGroup_SecurityContextPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('runAsUser', ros.validateNumber)(properties.runAsUser));
    if (properties.readOnlyRootFilesystem && (typeof properties.readOnlyRootFilesystem) !== 'object') {
        errors.collect(ros.propertyValidator('readOnlyRootFilesystem', ros.validateAllowedValues)({
            data: properties.readOnlyRootFilesystem,
            allowedValues: [true],
        }));
    }
    errors.collect(ros.propertyValidator('readOnlyRootFilesystem', ros.validateBoolean)(properties.readOnlyRootFilesystem));
    errors.collect(ros.propertyValidator('capabilityAdd', ros.listValidator(ros.validateString))(properties.capabilityAdd));
    return errors.wrap('supplied properties not correct for "SecurityContextProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ECI::ContainerGroup.SecurityContext` resource
 *
 * @param properties - the TypeScript properties of a `SecurityContextProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ECI::ContainerGroup.SecurityContext` resource.
 */
// @ts-ignore TS6133
function rosContainerGroupSecurityContextPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosContainerGroup_SecurityContextPropertyValidator(properties).assertSuccess();
    return {
        RunAsUser: ros.numberToRosTemplate(properties.runAsUser),
        ReadOnlyRootFilesystem: ros.booleanToRosTemplate(properties.readOnlyRootFilesystem),
        CapabilityAdd: ros.listMapper(ros.stringToRosTemplate)(properties.capabilityAdd),
    };
}
/**
 * Determine whether the given properties match those of a `SecurityContextSysctlProperty`
 *
 * @param properties - the TypeScript properties of a `SecurityContextSysctlProperty`
 *
 * @returns the result of the validation.
 */
function RosContainerGroup_SecurityContextSysctlPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    if (properties.name && (typeof properties.name) !== 'object') {
        errors.collect(ros.propertyValidator('name', ros.validateAllowedValues)({
            data: properties.name,
            allowedValues: ["kernel.shm_rmid_forced", "kernel.msgmax"],
        }));
    }
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    return errors.wrap('supplied properties not correct for "SecurityContextSysctlProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ECI::ContainerGroup.SecurityContextSysctl` resource
 *
 * @param properties - the TypeScript properties of a `SecurityContextSysctlProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ECI::ContainerGroup.SecurityContextSysctl` resource.
 */
// @ts-ignore TS6133
function rosContainerGroupSecurityContextSysctlPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosContainerGroup_SecurityContextSysctlPropertyValidator(properties).assertSuccess();
    return {
        Value: ros.stringToRosTemplate(properties.value),
        Name: ros.stringToRosTemplate(properties.name),
    };
}
/**
 * Determine whether the given properties match those of a `TagProperty`
 *
 * @param properties - the TypeScript properties of a `TagProperty`
 *
 * @returns the result of the validation.
 */
function RosContainerGroup_TagPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.requiredValidator)(properties.key));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "TagProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ECI::ContainerGroup.Tag` resource
 *
 * @param properties - the TypeScript properties of a `TagProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ECI::ContainerGroup.Tag` resource.
 */
// @ts-ignore TS6133
function rosContainerGroupTagPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosContainerGroup_TagPropertyValidator(properties).assertSuccess();
    return {
        Value: ros.stringToRosTemplate(properties.value),
        Key: ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `VolumeProperty`
 *
 * @param properties - the TypeScript properties of a `VolumeProperty`
 *
 * @returns the result of the validation.
 */
function RosContainerGroup_VolumePropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('type', ros.requiredValidator)(properties.type));
    if (properties.type && (typeof properties.type) !== 'object') {
        errors.collect(ros.propertyValidator('type', ros.validateAllowedValues)({
            data: properties.type,
            allowedValues: ["EmptyDirVolume", "NFSVolume", "ConfigFileVolume"],
        }));
    }
    errors.collect(ros.propertyValidator('type', ros.validateString)(properties.type));
    errors.collect(ros.propertyValidator('name', ros.requiredValidator)(properties.name));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    errors.collect(ros.propertyValidator('nfsVolumeServer', ros.validateString)(properties.nfsVolumeServer));
    errors.collect(ros.propertyValidator('nfsVolumeReadOnly', ros.validateBoolean)(properties.nfsVolumeReadOnly));
    errors.collect(ros.propertyValidator('configFileVolumeConfigFileToPath', ros.listValidator(RosContainerGroup_ConfigFileVolumeConfigFileToPathPropertyValidator))(properties.configFileVolumeConfigFileToPath));
    errors.collect(ros.propertyValidator('nfsVolumePath', ros.validateString)(properties.nfsVolumePath));
    if (properties.emptyDirVolumeMedium && (typeof properties.emptyDirVolumeMedium) !== 'object') {
        errors.collect(ros.propertyValidator('emptyDirVolumeMedium', ros.validateAllowedValues)({
            data: properties.emptyDirVolumeMedium,
            allowedValues: ["Memory"],
        }));
    }
    errors.collect(ros.propertyValidator('emptyDirVolumeMedium', ros.validateString)(properties.emptyDirVolumeMedium));
    return errors.wrap('supplied properties not correct for "VolumeProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ECI::ContainerGroup.Volume` resource
 *
 * @param properties - the TypeScript properties of a `VolumeProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ECI::ContainerGroup.Volume` resource.
 */
// @ts-ignore TS6133
function rosContainerGroupVolumePropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosContainerGroup_VolumePropertyValidator(properties).assertSuccess();
    return {
        Type: ros.stringToRosTemplate(properties.type),
        Name: ros.stringToRosTemplate(properties.name),
        NFSVolumeServer: ros.stringToRosTemplate(properties.nfsVolumeServer),
        NFSVolumeReadOnly: ros.booleanToRosTemplate(properties.nfsVolumeReadOnly),
        ConfigFileVolumeConfigFileToPath: ros.listMapper(rosContainerGroupConfigFileVolumeConfigFileToPathPropertyToRosTemplate)(properties.configFileVolumeConfigFileToPath),
        NFSVolumePath: ros.stringToRosTemplate(properties.nfsVolumePath),
        EmptyDirVolumeMedium: ros.stringToRosTemplate(properties.emptyDirVolumeMedium),
    };
}
/**
 * Determine whether the given properties match those of a `VolumeMountProperty`
 *
 * @param properties - the TypeScript properties of a `VolumeMountProperty`
 *
 * @returns the result of the validation.
 */
function RosContainerGroup_VolumeMountPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('readOnly', ros.validateBoolean)(properties.readOnly));
    errors.collect(ros.propertyValidator('mountPath', ros.validateString)(properties.mountPath));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    return errors.wrap('supplied properties not correct for "VolumeMountProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ECI::ContainerGroup.VolumeMount` resource
 *
 * @param properties - the TypeScript properties of a `VolumeMountProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ECI::ContainerGroup.VolumeMount` resource.
 */
// @ts-ignore TS6133
function rosContainerGroupVolumeMountPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosContainerGroup_VolumeMountPropertyValidator(properties).assertSuccess();
    return {
        ReadOnly: ros.booleanToRosTemplate(properties.readOnly),
        MountPath: ros.stringToRosTemplate(properties.mountPath),
        Name: ros.stringToRosTemplate(properties.name),
    };
}
/**
 * Determine whether the given properties match those of a `RosImageCacheProps`
 *
 * @param properties - the TypeScript properties of a `RosImageCacheProps`
 *
 * @returns the result of the validation.
 */
function RosImageCachePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    errors.collect(ros.propertyValidator('securityGroupId', ros.requiredValidator)(properties.securityGroupId));
    errors.collect(ros.propertyValidator('securityGroupId', ros.validateString)(properties.securityGroupId));
    errors.collect(ros.propertyValidator('vSwitchId', ros.requiredValidator)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('vSwitchId', ros.validateString)(properties.vSwitchId));
    if (properties.imageRegistryCredential && (Array.isArray(properties.imageRegistryCredential) || (typeof properties.imageRegistryCredential) === 'string')) {
        errors.collect(ros.propertyValidator('imageRegistryCredential', ros.validateLength)({
            data: properties.imageRegistryCredential.length,
            min: undefined,
            max: 10,
        }));
    }
    errors.collect(ros.propertyValidator('imageRegistryCredential', ros.listValidator(ros.validateString))(properties.imageRegistryCredential));
    errors.collect(ros.propertyValidator('imageCacheName', ros.requiredValidator)(properties.imageCacheName));
    errors.collect(ros.propertyValidator('imageCacheName', ros.validateString)(properties.imageCacheName));
    errors.collect(ros.propertyValidator('image', ros.requiredValidator)(properties.image));
    if (properties.image && (Array.isArray(properties.image) || (typeof properties.image) === 'string')) {
        errors.collect(ros.propertyValidator('image', ros.validateLength)({
            data: properties.image.length,
            min: undefined,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('image', ros.listValidator(ros.validateString))(properties.image));
    errors.collect(ros.propertyValidator('eipInstanceId', ros.validateString)(properties.eipInstanceId));
    return errors.wrap('supplied properties not correct for "RosImageCacheProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ECI::ImageCache` resource
 *
 * @param properties - the TypeScript properties of a `RosImageCacheProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ECI::ImageCache` resource.
 */
// @ts-ignore TS6133
function rosImageCachePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosImageCachePropsValidator(properties).assertSuccess();
    }
    return {
        Image: ros.listMapper(ros.stringToRosTemplate)(properties.image),
        ImageCacheName: ros.stringToRosTemplate(properties.imageCacheName),
        SecurityGroupId: ros.stringToRosTemplate(properties.securityGroupId),
        VSwitchId: ros.stringToRosTemplate(properties.vSwitchId),
        EipInstanceId: ros.stringToRosTemplate(properties.eipInstanceId),
        ImageRegistryCredential: ros.listMapper(ros.stringToRosTemplate)(properties.imageRegistryCredential),
        ResourceGroupId: ros.stringToRosTemplate(properties.resourceGroupId),
    };
}
/**
 * A ROS template type:  `ALIYUN::ECI::ImageCache`
 */
class RosImageCache extends ros.RosResource {
    /**
     * Create a new `ALIYUN::ECI::ImageCache`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosImageCache.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrImageCacheId = ros.Token.asString(this.getAtt('ImageCacheId'));
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.image = props.image;
        this.imageCacheName = props.imageCacheName;
        this.securityGroupId = props.securityGroupId;
        this.vSwitchId = props.vSwitchId;
        this.eipInstanceId = props.eipInstanceId;
        this.imageRegistryCredential = props.imageRegistryCredential;
        this.resourceGroupId = props.resourceGroupId;
    }
    get rosProperties() {
        return {
            image: this.image,
            imageCacheName: this.imageCacheName,
            securityGroupId: this.securityGroupId,
            vSwitchId: this.vSwitchId,
            eipInstanceId: this.eipInstanceId,
            imageRegistryCredential: this.imageRegistryCredential,
            resourceGroupId: this.resourceGroupId,
        };
    }
    renderProperties(props) {
        return rosImageCachePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosImageCache = RosImageCache;
/**
 * The resource type name for this resource class.
 */
RosImageCache.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ECI::ImageCache";
//# sourceMappingURL=data:application/json;base64,