"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContainerGroup = exports.ContainerGroupProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const eci_generated_1 = require("./eci.generated");
Object.defineProperty(exports, "ContainerGroupProperty", { enumerable: true, get: function () { return eci_generated_1.RosContainerGroup; } });
/**
 * A ROS resource type:  `ALIYUN::ECI::ContainerGroup`
 */
class ContainerGroup extends ros.Resource {
    /**
     * Create a new `ALIYUN::ECI::ContainerGroup`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosContainerGroup = new eci_generated_1.RosContainerGroup(this, id, {
            securityContextSysctl: props.securityContextSysctl,
            memory: props.memory,
            initContainer: props.initContainer,
            cpu: props.cpu,
            eipInstanceId: props.eipInstanceId,
            containerGroupName: props.containerGroupName,
            container: props.container,
            imageSnapshotId: props.imageSnapshotId,
            ramRoleName: props.ramRoleName,
            dnsConfig: props.dnsConfig,
            autoMatchImageCache: props.autoMatchImageCache,
            ipv6AddressCount: props.ipv6AddressCount,
            imageRegistryCredential: props.imageRegistryCredential,
            spotPriceLimit: props.spotPriceLimit,
            instanceType: props.instanceType,
            spotStrategy: props.spotStrategy,
            activeDeadlineSeconds: props.activeDeadlineSeconds,
            hostAliase: props.hostAliase,
            zoneId: props.zoneId,
            terminationGracePeriodSeconds: props.terminationGracePeriodSeconds,
            vSwitchId: props.vSwitchId,
            securityGroupId: props.securityGroupId,
            slsEnable: props.slsEnable,
            restartPolicy: props.restartPolicy,
            volume: props.volume,
            tag: props.tag,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosContainerGroup;
        this.attrContainerGroupId = rosContainerGroup.attrContainerGroupId;
        this.attrContainerGroupName = rosContainerGroup.attrContainerGroupName;
        this.attrEniInstanceId = rosContainerGroup.attrEniInstanceId;
        this.attrInternetIp = rosContainerGroup.attrInternetIp;
        this.attrIntranetIp = rosContainerGroup.attrIntranetIp;
        this.attrIpv6Address = rosContainerGroup.attrIpv6Address;
        this.attrRegionId = rosContainerGroup.attrRegionId;
        this.attrSecurityGroupId = rosContainerGroup.attrSecurityGroupId;
        this.attrVSwitchId = rosContainerGroup.attrVSwitchId;
        this.attrZoneId = rosContainerGroup.attrZoneId;
    }
}
exports.ContainerGroup = ContainerGroup;
//# sourceMappingURL=data:application/json;base64,