"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Device = exports.DeviceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const iot_generated_1 = require("./iot.generated");
Object.defineProperty(exports, "DeviceProperty", { enumerable: true, get: function () { return iot_generated_1.RosDevice; } });
/**
 * A ROS resource type:  `ALIYUN::IOT::Device`
 */
class Device extends ros.Resource {
    /**
     * Create a new `ALIYUN::IOT::Device`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosDevice = new iot_generated_1.RosDevice(this, id, {
            iotInstanceId: props.iotInstanceId,
            devEui: props.devEui,
            productKey: props.productKey,
            deviceName: props.deviceName,
            pinCode: props.pinCode,
            nickname: props.nickname,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDevice;
        this.attrDeviceName = rosDevice.attrDeviceName;
        this.attrDeviceSecret = rosDevice.attrDeviceSecret;
        this.attrIotId = rosDevice.attrIotId;
        this.attrIotInstanceId = rosDevice.attrIotInstanceId;
        this.attrIpAddress = rosDevice.attrIpAddress;
        this.attrNickName = rosDevice.attrNickName;
        this.attrNodeType = rosDevice.attrNodeType;
        this.attrProductKey = rosDevice.attrProductKey;
        this.attrProductName = rosDevice.attrProductName;
    }
}
exports.Device = Device;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGV2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBNEM7QUFFdEIsK0ZBRmIseUJBQVMsT0FFa0I7QUE4Q3BDOztHQUVHO0FBQ0gsTUFBYSxNQUFPLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFxRHBDOzs7Ozs7T0FNRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBa0IsRUFBRSxtQ0FBMkMsSUFBSTtRQUM3RyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sU0FBUyxHQUFHLElBQUkseUJBQVMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ3ZDLGFBQWEsRUFBRSxLQUFLLENBQUMsYUFBYTtZQUNsQyxNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU07WUFDcEIsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQzVCLFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVTtZQUM1QixPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87WUFDdEIsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1NBQzNCLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDO1FBQzFCLElBQUksQ0FBQyxjQUFjLEdBQUcsU0FBUyxDQUFDLGNBQWMsQ0FBQztRQUMvQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsU0FBUyxDQUFDLGdCQUFnQixDQUFDO1FBQ25ELElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQztRQUNyQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsU0FBUyxDQUFDLGlCQUFpQixDQUFDO1FBQ3JELElBQUksQ0FBQyxhQUFhLEdBQUcsU0FBUyxDQUFDLGFBQWEsQ0FBQztRQUM3QyxJQUFJLENBQUMsWUFBWSxHQUFHLFNBQVMsQ0FBQyxZQUFZLENBQUM7UUFDM0MsSUFBSSxDQUFDLFlBQVksR0FBRyxTQUFTLENBQUMsWUFBWSxDQUFDO1FBQzNDLElBQUksQ0FBQyxjQUFjLEdBQUcsU0FBUyxDQUFDLGNBQWMsQ0FBQztRQUMvQyxJQUFJLENBQUMsZUFBZSxHQUFHLFNBQVMsQ0FBQyxlQUFlLENBQUM7SUFDckQsQ0FBQztDQUNKO0FBbEZELHdCQWtGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc0RldmljZSB9IGZyb20gJy4vaW90LmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0RldmljZSBhcyBEZXZpY2VQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYEFMSVlVTjo6SU9UOjpEZXZpY2VgXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGV2aWNlUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHByb2R1Y3RLZXk6IFRoZSBpZGVudGlmaWVyIG9mIHRoZSBwcm9kdWN0IHRvIHdoaWNoIHRoZSBkZXZpY2UgdG8gYmUgcmVnaXN0ZXJlZCBiZWxvbmdzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHByb2R1Y3RLZXk6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkZXZFdWk6IERldkVVSSBMb1JhV0FOIGVxdWlwbWVudC5cbiAgICAgKiBXaGVuIHlvdSBjcmVhdGUgYSBMb1JhV0FOIGRldmljZXMsIHRoaXMgd2lsbCBwYXNzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRldkV1aT86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkZXZpY2VOYW1lOiBUaGUgbmFtZSBvZiB0aGUgZGV2aWNlIHRoYXQgeW91IHdhbnQgdG8gcmVnaXN0ZXIuIFRoZSBkZXZpY2UgbmFtZSBtdXN0IGNvbnNpc3Qgb2ZcbiAgICAgKiA0IHRvIDMyIGNoYXJhY3RlcnMsIGluY2x1ZGluZyBFbmdsaXNoIGxldHRlcnMsIGRpZ2l0cywgYW5kIHNwZWNpYWwgY2hhcmFjdGVycywgZm9yXG4gICAgICogZXhhbXBsZSwgaHlwaGVucyAoLSksIHVuZGVyc2NvcmVzIChfKSwgYXQgc2lnbnMgKEApLCBwZXJpb2RzICguKSAsIGFuZCBjb2xvbnMgKDopLlxuICAgICAqIERldmljZU5hbWUgaXMgdXNlZCB3aXRoIFByb2R1Y3RLZXkgdG8gaWRlbnRpZnkgYSBzcGVjaWZpZWQgZGV2aWNlLlxuICAgICAqIE5vdGUgSWYgeW91IGRvIG5vdCBzcGVjaWZ5IHRoaXMgcGFyYW1ldGVyLCB0aGUgc3lzdGVtIHdpbGwgZ2VuZXJhdGUgYSBuYW1lIGZvciB0aGUgZGV2aWNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRldmljZU5hbWU/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgaW90SW5zdGFuY2VJZDogUHVibGljIGluc3RhbmNlIGRvZXMgbm90IHBhc3MgdGhpcyBwYXJhbWV0ZXI7IGluc3RhbmNlIHRoYXQgeW91IG5lZWQgdG8gYnV5IHRoZSBpbmNvbWluZyBpbnN0YW5jZSBJRC5cbiAgICAgKi9cbiAgICByZWFkb25seSBpb3RJbnN0YW5jZUlkPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IG5pY2tuYW1lOiBBZGQgYSBuaWNrbmFtZSBmb3IgdGhlIGRldmljZS4gQSBuaWNrbmFtZSBjYW4gYmUgNC02NCBjaGFyYWN0ZXJzIGluIGxlbmd0aCwgYW5kIGNhblxuICAgICAqIGNvbnRhaW4gQ2hpbmVzZSBjaGFyYWN0ZXJzLCBFbmdsaXNoIGxldHRlcnMsIG51bWJlcnMgYW5kIHVuZGVyc2NvcmVzIChfKS4gQSBDaGluZXNlXG4gICAgICogY2hhcmFjdGVyIGNvdW50cyBhcyB0d28gY2hhcmFjdGVycy5cbiAgICAgKi9cbiAgICByZWFkb25seSBuaWNrbmFtZT86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBwaW5Db2RlOiBQSU4gQ29kZSBMb1JhV0FOIGRldmljZSBmb3IgY2hlY2tpbmcgdGhlIGxlZ2l0aW1hY3kgb2YgRGV2RVVJLlxuICAgICAqIFdoZW4geW91IGNyZWF0ZSBhIExvUmFXQU4gZGV2aWNlcywgdGhpcyB3aWxsIHBhc3MuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcGluQ29kZT86IHN0cmluZztcbn1cblxuLyoqXG4gKiBBIFJPUyByZXNvdXJjZSB0eXBlOiAgYEFMSVlVTjo6SU9UOjpEZXZpY2VgXG4gKi9cbmV4cG9ydCBjbGFzcyBEZXZpY2UgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuXG4gICAgLyoqXG4gICAgICogQSBmYWN0b3J5IG1ldGhvZCB0aGF0IGNyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcyBmcm9tIGFuIG9iamVjdFxuICAgICAqIGNvbnRhaW5pbmcgdGhlIHByb3BlcnRpZXMgb2YgdGhpcyBST1MgcmVzb3VyY2UsIHdoaWNoIHdpbGwgYmUgYXNzaWduZWQgdG8gUk9TIHJlc291cmNlLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQEF0dHJpYnV0ZSBEZXZpY2VOYW1lOiBEZXZpY2UgbmFtZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckRldmljZU5hbWU6IGFueTtcblxuICAgIC8qKlxuICAgICAqIEBBdHRyaWJ1dGUgRGV2aWNlU2VjcmV0OiBEZXZpY2Uga2V5LlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyRGV2aWNlU2VjcmV0OiBhbnk7XG5cbiAgICAvKipcbiAgICAgKiBAQXR0cmlidXRlIElvdElkOiBUaGluZ3MgaW50ZXJuZXQgZGV2aWNlIElEIGlzc3VlZCBmb3IgdGhlIGRldmljZSwgYXMgdGhlIHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBkZXZpY2UuXG5EZXNjcmlwdGlvbiBLZWVwLCBkbyBub3QgbGVhay5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0cklvdElkOiBhbnk7XG5cbiAgICAvKipcbiAgICAgKiBAQXR0cmlidXRlIElvdEluc3RhbmNlSWQ6IElPVCBpbnN0YW5jZSBJRC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0cklvdEluc3RhbmNlSWQ6IGFueTtcblxuICAgIC8qKlxuICAgICAqIEBBdHRyaWJ1dGUgSXBBZGRyZXNzOiBJUCBhZGRyZXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRySXBBZGRyZXNzOiBhbnk7XG5cbiAgICAvKipcbiAgICAgKiBAQXR0cmlidXRlIE5pY2tOYW1lOiBOaWNrIG5hbWUuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJOaWNrTmFtZTogYW55O1xuXG4gICAgLyoqXG4gICAgICogQEF0dHJpYnV0ZSBOb2RlVHlwZTogTm9kZSB0eXBlLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyTm9kZVR5cGU6IGFueTtcblxuICAgIC8qKlxuICAgICAqIEBBdHRyaWJ1dGUgUHJvZHVjdEtleTogUHJvZHVjdCBrZXkuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJQcm9kdWN0S2V5OiBhbnk7XG5cbiAgICAvKipcbiAgICAgKiBAQXR0cmlidXRlIFByb2R1Y3ROYW1lOiBQcm9kdWN0IG5hbWUuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJQcm9kdWN0TmFtZTogYW55O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGBBTElZVU46OklPVDo6RGV2aWNlYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIEBwYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBAcGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBEZXZpY2VQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NEZXZpY2UgPSBuZXcgUm9zRGV2aWNlKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgaW90SW5zdGFuY2VJZDogcHJvcHMuaW90SW5zdGFuY2VJZCxcbiAgICAgICAgICAgIGRldkV1aTogcHJvcHMuZGV2RXVpLFxuICAgICAgICAgICAgcHJvZHVjdEtleTogcHJvcHMucHJvZHVjdEtleSxcbiAgICAgICAgICAgIGRldmljZU5hbWU6IHByb3BzLmRldmljZU5hbWUsXG4gICAgICAgICAgICBwaW5Db2RlOiBwcm9wcy5waW5Db2RlLFxuICAgICAgICAgICAgbmlja25hbWU6IHByb3BzLm5pY2tuYW1lLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0RldmljZTtcbiAgICAgICAgdGhpcy5hdHRyRGV2aWNlTmFtZSA9IHJvc0RldmljZS5hdHRyRGV2aWNlTmFtZTtcbiAgICAgICAgdGhpcy5hdHRyRGV2aWNlU2VjcmV0ID0gcm9zRGV2aWNlLmF0dHJEZXZpY2VTZWNyZXQ7XG4gICAgICAgIHRoaXMuYXR0cklvdElkID0gcm9zRGV2aWNlLmF0dHJJb3RJZDtcbiAgICAgICAgdGhpcy5hdHRySW90SW5zdGFuY2VJZCA9IHJvc0RldmljZS5hdHRySW90SW5zdGFuY2VJZDtcbiAgICAgICAgdGhpcy5hdHRySXBBZGRyZXNzID0gcm9zRGV2aWNlLmF0dHJJcEFkZHJlc3M7XG4gICAgICAgIHRoaXMuYXR0ck5pY2tOYW1lID0gcm9zRGV2aWNlLmF0dHJOaWNrTmFtZTtcbiAgICAgICAgdGhpcy5hdHRyTm9kZVR5cGUgPSByb3NEZXZpY2UuYXR0ck5vZGVUeXBlO1xuICAgICAgICB0aGlzLmF0dHJQcm9kdWN0S2V5ID0gcm9zRGV2aWNlLmF0dHJQcm9kdWN0S2V5O1xuICAgICAgICB0aGlzLmF0dHJQcm9kdWN0TmFtZSA9IHJvc0RldmljZS5hdHRyUHJvZHVjdE5hbWU7XG4gICAgfVxufVxuIl19