"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rule = exports.RuleProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const iot_generated_1 = require("./iot.generated");
Object.defineProperty(exports, "RuleProperty", { enumerable: true, get: function () { return iot_generated_1.RosRule; } });
/**
 * A ROS resource type:  `ALIYUN::IOT::Rule`
 */
class Rule extends ros.Resource {
    /**
     * Create a new `ALIYUN::IOT::Rule`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosRule = new iot_generated_1.RosRule(this, id, {
            topicType: props.topicType,
            iotInstanceId: props.iotInstanceId,
            resourceGroupId: props.resourceGroupId,
            shortTopic: props.shortTopic,
            select: props.select,
            dataType: props.dataType,
            ruleDesc: props.ruleDesc,
            where: props.where,
            productKey: props.productKey,
            name: props.name,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosRule;
        this.attrDataType = rosRule.attrDataType;
        this.attrIotInstanceId = rosRule.attrIotInstanceId;
        this.attrName = rosRule.attrName;
        this.attrProductKey = rosRule.attrProductKey;
        this.attrResourceGroupId = rosRule.attrResourceGroupId;
        this.attrRuleDesc = rosRule.attrRuleDesc;
        this.attrRuleId = rosRule.attrRuleId;
        this.attrSelect = rosRule.attrSelect;
        this.attrShortTopic = rosRule.attrShortTopic;
        this.attrTopicType = rosRule.attrTopicType;
        this.attrWhere = rosRule.attrWhere;
    }
}
exports.Rule = Rule;
//# sourceMappingURL=data:application/json;base64,