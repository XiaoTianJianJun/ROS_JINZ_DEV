"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Subscription = exports.SubscriptionProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const mns_generated_1 = require("./mns.generated");
Object.defineProperty(exports, "SubscriptionProperty", { enumerable: true, get: function () { return mns_generated_1.RosSubscription; } });
/**
 * A ROS resource type:  `ALIYUN::MNS::Subscription`
 */
class Subscription extends ros.Resource {
    /**
     * Create a new `ALIYUN::MNS::Subscription`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosSubscription = new mns_generated_1.RosSubscription(this, id, {
            endpoint: props.endpoint,
            notifyStrategy: props.notifyStrategy ? props.notifyStrategy : 'BACKOFF_RETRY',
            notifyContentFormat: props.notifyContentFormat ? props.notifyContentFormat : 'XML',
            filterTag: props.filterTag,
            subscriptionName: props.subscriptionName,
            topicName: props.topicName,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosSubscription;
        this.attrSubscriptionUrl = rosSubscription.attrSubscriptionUrl;
    }
}
exports.Subscription = Subscription;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Vic2NyaXB0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3Vic2NyaXB0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBa0Q7QUFFdEIscUdBRm5CLCtCQUFlLE9BRXdCO0FBOENoRDs7R0FFRztBQUNILE1BQWEsWUFBYSxTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBWTFDOzs7Ozs7T0FNRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBd0IsRUFBRSxtQ0FBMkMsSUFBSTtRQUNuSCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sZUFBZSxHQUFHLElBQUksK0JBQWUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ25ELFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtZQUN4QixjQUFjLEVBQUUsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsZUFBZTtZQUM3RSxtQkFBbUIsRUFBRSxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsS0FBSztZQUNsRixTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLGdCQUFnQjtZQUN4QyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7U0FDN0IsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxlQUFlLENBQUM7UUFDaEMsSUFBSSxDQUFDLG1CQUFtQixHQUFHLGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQztJQUNuRSxDQUFDO0NBQ0o7QUFqQ0Qsb0NBaUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi9tbnMuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zU3Vic2NyaXB0aW9uIGFzIFN1YnNjcmlwdGlvblByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgQUxJWVVOOjpNTlM6OlN1YnNjcmlwdGlvbmBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTdWJzY3JpcHRpb25Qcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgZW5kcG9pbnQ6IFRlcm1pbmFsIGFkZHJlc3Mgb2YgdGhlIG1lc3NhZ2UgcmVjaXBpZW50IGZvciB0aGUgY3JlYXRlZCBzdWJzY3JpcHRpb24uXG4gICAgICogQ3VycmVudGx5LCBmb3VyIHR5cGVzIG9mIGVuZHBvaW50cyBhcmUgc3VwcG9ydGVkOiBcbiAgICAgKiAxLiBIdHRwRW5kcG9pbnQsIHdoaWNoIG11c3QgYmUgcHJlZml4ZWQgd2l0aCBcImh0dHA6Ly9cIjsgXG4gICAgICogMi4gUXVldWVFbmRwb2ludCwgaW4gdGhlIGZvcm1hdCBvZiBhY3M6bW5zOntSRUdJT059OntBY2NvdW50SUR9OnF1ZXVlcy97UXVldWVOYW1lfTsgXG4gICAgICogMy4gTWFpbEVuZHBvaW50LCBpbiB0aGUgZm9ybWF0IG9mIG1haWw6ZGlyZWN0bWFpbDp7TWFpbEFkZHJlc3N9OyBcbiAgICAgKiA0LiBTbXNFbmRwb2ludCwgaW4gdGhlIGZvcm1hdCBvZiBzbXM6ZGlyZWN0c21zOmFub255bW91cyBvciBzbXM6ZGlyZWN0c21zOntQaG9uZX0uXG4gICAgICovXG4gICAgcmVhZG9ubHkgZW5kcG9pbnQ6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBzdWJzY3JpcHRpb25OYW1lOiBTdWJzY3JpcHRpb24gbmFtZVxuICAgICAqL1xuICAgIHJlYWRvbmx5IHN1YnNjcmlwdGlvbk5hbWU6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSB0b3BpY05hbWU6IFRvcGljIG5hbWVcbiAgICAgKi9cbiAgICByZWFkb25seSB0b3BpY05hbWU6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBmaWx0ZXJUYWc6IE1lc3NhZ2UgZmlsdGVyIHRhZyBpbiB0aGUgY3JlYXRlZCBzdWJzY3JpcHRpb24gKE9ubHkgbWVzc2FnZXMgd2l0aCBjb25zaXN0ZW50IHRhZ3MgYXJlIHB1c2hlZC4pXG4gICAgICogVGhlIHZhbHVlIGlzIGEgc3RyaW5nIG9mIG5vIG1vcmUgdGhhbiAxNiBjaGFyYWN0ZXJzLiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBubyBtZXNzYWdlIGZpbHRlci5cbiAgICAgKi9cbiAgICByZWFkb25seSBmaWx0ZXJUYWc/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgbm90aWZ5Q29udGVudEZvcm1hdDogRm9ybWF0IG9mIHRoZSBtZXNzYWdlIGNvbnRlbnQgcHVzaGVkIHRvIHRoZSBlbmRwb2ludC5cbiAgICAgKiBYTUwsIEpTT04sIG9yIFNJTVBMSUZJRUQ7IGRlZmF1bHQgdmFsdWU6IFhNTC4gRm9yIGRldGFpbHMgYWJvdXQgbWVzc2FnZSBmb3JtYXRzLCByZWZlciB0byBCYXNpYyBDb25jZXB0cy9Ob3RpZnlDb250ZW50Rm9ybWF0LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG5vdGlmeUNvbnRlbnRGb3JtYXQ/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgbm90aWZ5U3RyYXRlZ3k6IFJldHJ5IHBvbGljeSB0aGF0IHdpbGwgYmUgYXBwbGllZCB3aGVuIGFuIGVycm9yIG9jY3VycyBkdXJpbmcgbWVzc2FnZSBwdXNoIHRvIHRoZSBlbmRwb2ludC5cbiAgICAgKiBCQUNLT0ZGX1JFVFJZIG9yIEVYUE9ORU5USUFMX0RFQ0FZX1JFVFJZOyBkZWZhdWx0IHZhbHVlOiBCQUNLT0ZGX1JFVFJZLiBGb3IgZGV0YWlscyBhYm91dCByZXRyeSBwb2xpY2llcywgcmVmZXIgdG8gQmFzaWMgQ29uY2VwdHMvTm90aWZ5U3RyYXRlZ3kuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbm90aWZ5U3RyYXRlZ3k/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogQSBST1MgcmVzb3VyY2UgdHlwZTogIGBBTElZVU46Ok1OUzo6U3Vic2NyaXB0aW9uYFxuICovXG5leHBvcnQgY2xhc3MgU3Vic2NyaXB0aW9uIGV4dGVuZHMgcm9zLlJlc291cmNlIHtcblxuICAgIC8qKlxuICAgICAqIEEgZmFjdG9yeSBtZXRob2QgdGhhdCBjcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIHRoaXMgY2xhc3MgZnJvbSBhbiBvYmplY3RcbiAgICAgKiBjb250YWluaW5nIHRoZSBwcm9wZXJ0aWVzIG9mIHRoaXMgUk9TIHJlc291cmNlLCB3aGljaCB3aWxsIGJlIGFzc2lnbmVkIHRvIFJPUyByZXNvdXJjZS5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBBdHRyaWJ1dGUgU3Vic2NyaXB0aW9uVXJsOiBVUkwgb2YgY3JlYXRlZCBzdWJzY3JpcHRpb25cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clN1YnNjcmlwdGlvblVybDogYW55O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGBBTElZVU46Ok1OUzo6U3Vic2NyaXB0aW9uYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIEBwYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBAcGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBTdWJzY3JpcHRpb25Qcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NTdWJzY3JpcHRpb24gPSBuZXcgUm9zU3Vic2NyaXB0aW9uKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgZW5kcG9pbnQ6IHByb3BzLmVuZHBvaW50LFxuICAgICAgICAgICAgbm90aWZ5U3RyYXRlZ3k6IHByb3BzLm5vdGlmeVN0cmF0ZWd5ID8gcHJvcHMubm90aWZ5U3RyYXRlZ3kgOiAnQkFDS09GRl9SRVRSWScsXG4gICAgICAgICAgICBub3RpZnlDb250ZW50Rm9ybWF0OiBwcm9wcy5ub3RpZnlDb250ZW50Rm9ybWF0ID8gcHJvcHMubm90aWZ5Q29udGVudEZvcm1hdCA6ICdYTUwnLFxuICAgICAgICAgICAgZmlsdGVyVGFnOiBwcm9wcy5maWx0ZXJUYWcsXG4gICAgICAgICAgICBzdWJzY3JpcHRpb25OYW1lOiBwcm9wcy5zdWJzY3JpcHRpb25OYW1lLFxuICAgICAgICAgICAgdG9waWNOYW1lOiBwcm9wcy50b3BpY05hbWUsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zU3Vic2NyaXB0aW9uO1xuICAgICAgICB0aGlzLmF0dHJTdWJzY3JpcHRpb25VcmwgPSByb3NTdWJzY3JpcHRpb24uYXR0clN1YnNjcmlwdGlvblVybDtcbiAgICB9XG59XG4iXX0=