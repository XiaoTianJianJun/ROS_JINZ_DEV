"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Application = exports.ApplicationProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const edas_generated_1 = require("./edas.generated");
Object.defineProperty(exports, "ApplicationProperty", { enumerable: true, get: function () { return edas_generated_1.RosApplication; } });
/**
 * A ROS resource type:  `ALIYUN::EDAS::Application`
 */
class Application extends ros.Resource {
    /**
     * Create a new `ALIYUN::EDAS::Application`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosApplication = new edas_generated_1.RosApplication(this, id, {
            componentIds: props.componentIds,
            logicalRegionId: props.logicalRegionId,
            applicationName: props.applicationName,
            description: props.description,
            ecuInfo: props.ecuInfo,
            healthCheckUrl: props.healthCheckUrl,
            clusterId: props.clusterId,
            packageType: props.packageType ? props.packageType : 'war',
            buildPackId: props.buildPackId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosApplication;
        this.attrAppId = rosApplication.attrAppId;
        this.attrPort = rosApplication.attrPort;
    }
}
exports.Application = Application;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwbGljYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhcHBsaWNhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMscURBQWtEO0FBRXZCLG9HQUZsQiwrQkFBYyxPQUV1QjtBQXlEOUM7O0dBRUc7QUFDSCxNQUFhLFdBQVksU0FBUSxHQUFHLENBQUMsUUFBUTtJQWlCekM7Ozs7OztPQU1HO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUF1QixFQUFFLG1DQUEyQyxJQUFJO1FBQ2xILEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxjQUFjLEdBQUcsSUFBSSwrQkFBYyxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDakQsWUFBWSxFQUFFLEtBQUssQ0FBQyxZQUFZO1lBQ2hDLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0QyxlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztZQUN0QixjQUFjLEVBQUUsS0FBSyxDQUFDLGNBQWM7WUFDcEMsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTO1lBQzFCLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxLQUFLO1lBQzFELFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztTQUNqQyxFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLGNBQWMsQ0FBQztRQUMvQixJQUFJLENBQUMsU0FBUyxHQUFHLGNBQWMsQ0FBQyxTQUFTLENBQUM7UUFDMUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxjQUFjLENBQUMsUUFBUSxDQUFDO0lBQzVDLENBQUM7Q0FDSjtBQTFDRCxrQ0EwQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NBcHBsaWNhdGlvbiB9IGZyb20gJy4vZWRhcy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NBcHBsaWNhdGlvbiBhcyBBcHBsaWNhdGlvblByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgQUxJWVVOOjpFREFTOjpBcHBsaWNhdGlvbmBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBcHBsaWNhdGlvblByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBhcHBsaWNhdGlvbk5hbWU6IFRoZSBhcHBsaWNhdGlvbiBuYW1lIChvbmx5IGFsbG93IHRoZSB1c2Ugb2YgbnVtYmVycywgbGV0dGVycywgLSwgXywgdXAgdG8gMzYgY2hhcmFjdGVycylcbiAgICAgKi9cbiAgICByZWFkb25seSBhcHBsaWNhdGlvbk5hbWU6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBjbHVzdGVySWQ6IENsdXN0ZXIgSUQgb2YgRUNTIGFwcGxpY2F0aW9uXG4gICAgICovXG4gICAgcmVhZG9ubHkgY2x1c3RlcklkOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgYnVpbGRQYWNrSWQ6IEVEQVMtQ29udGFpbmVyIGNvbnN0cnVjdCBhIHBhY2tldCBudW1iZXIgKGF2YWlsYWJsZSB2ZXJzaW9uIGxpc3QgYWNxdWlyZWQgdGhyb3VnaCB0aGUgTGlzdEJ1aWxkUGFjayBBUEkgKENvbmZpZ0lkIG9mIHJlc3BvbnNlKSBvciBcImNvbnRhaW5lciB2ZXJzaW9uXCIgdGFibGUgXCJCdWlsZGluZyBwYWNrZXQgbnVtYmVyXCIgY29sdW1uIGFjcXVpc2l0aW9uKS4gV2hlbiBjcmVhdGluZyBIU0YgYXBwbGljYXRpb24sIHRoaXMgcGFyYW1ldGVyIG11c3QgYmUgc3BlY2lmaWVkXG4gICAgICovXG4gICAgcmVhZG9ubHkgYnVpbGRQYWNrSWQ/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgY29tcG9uZW50SWRzOiBBcHBsaWNhdGlvbiBjb21wb25lbnQgSUQgKGF2YWlsYWJsZSB0aHJvdWdoIHRoZSBxdWVyeSBpbnRlcmZhY2UgdG8gb2J0YWluIGEgbGlzdCBvZiBjb21wb25lbnRzIHRvIHRoZSBpbnRlcmZhY2UgTGlzdENvbXBvbmVudHMpLCB3aGVuIGNyZWF0aW5nIHRoZSBhcHBsaWNhdGlvbiBydW50aW1lIGVudmlyb25tZW50IHVzaW5nIEFwYWNoZSBUb21jYXQgKHdhciBwYWNrZXQgZm9ybWF0IER1YmJvXG4gICAgICogQXBwbGljYXRpb24gcmVxdWlyZWQpIG9yIHN0YW5kYXJkIEphdmEgYXBwbGljYXRpb24gKGphciBwYWNrYWdlIGZvcm1hdCBTcHJpbmcgQm9vdCAvIFNwcmluZyBDbG91ZCBhcHBsaWNhdGlvbnMgcmVxdWlyZSkgeW91IG5lZWQgdG8gc3BlY2lmeSB3aGVuIHRoZSBvcGVyYXRpbmcgZW52aXJvbm1lbnQuIENvbW1vbmx5IHVzZWQgYXBwbGljYXRpb24gY29tcG9uZW50IElEIGFuZCBtZWFuaW5nOlxuICAgICAqIDQgcmVwcmVzZW50cyBBcGFjaGUgVG9tY2F0IDcuMC45MSw3IHJlcHJlc2VudGVkIEFwYWNoZSBUb21jYXQgOC41LjQyLDUgcmVwcmVzZW50ZWQgT3BlbkpESyAxLjgueCwgNiByZXByZXNlbnRzIE9wZW5KREtcbiAgICAgKiAxLjcueFxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNvbXBvbmVudElkcz86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkZXNjcmlwdGlvbjogRGVzY3JpcHRpdmUgaW5mb3JtYXRpb25cbiAgICAgKi9cbiAgICByZWFkb25seSBkZXNjcmlwdGlvbj86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBlY3VJbmZvOiBNYWNoaW5lIGNhcGFjaXR5IGlzIG5lZWRlZCBlY3VfaWQgKEVDUyBFeGFtcGxlcyBpbnRyb2R1Y2luZyBhbm90aGVyIHVuaXF1ZSBpZGVudGl0eSBFREFTIEVEQVMpLCB0aGUgcGx1cmFsaXR5IG9mIFwiLFwiIHNlcGFyYXRlZCAoYnkgcXVlcnlpbmcgTGlzdFNjYWxlT3V0RWN1IHdoZXJlaW4gZWN1X2lkXG4gICAgICogSW50ZXJmYWNlIHRvIG9idGFpbikuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZWN1SW5mbz86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBoZWFsdGhDaGVja1VybDogQXBwbGljYXRpb24gSGVhbHRoIENoZWNrIFVSTFxuICAgICAqL1xuICAgIHJlYWRvbmx5IGhlYWx0aENoZWNrVXJsPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGxvZ2ljYWxSZWdpb25JZDogTmFtZXNwYWNlIElEXG4gICAgICovXG4gICAgcmVhZG9ubHkgbG9naWNhbFJlZ2lvbklkPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHBhY2thZ2VUeXBlOiBBcHBsaWNhdGlvbiBwYWNrZXQgZm9ybWF0LCBwb3NzaWJsZSB2YWx1ZXM6IHdhciBvciBqYXJcbiAgICAgKi9cbiAgICByZWFkb25seSBwYWNrYWdlVHlwZT86IHN0cmluZztcbn1cblxuLyoqXG4gKiBBIFJPUyByZXNvdXJjZSB0eXBlOiAgYEFMSVlVTjo6RURBUzo6QXBwbGljYXRpb25gXG4gKi9cbmV4cG9ydCBjbGFzcyBBcHBsaWNhdGlvbiBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBIGZhY3RvcnkgbWV0aG9kIHRoYXQgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGZyb20gYW4gb2JqZWN0XG4gICAgICogY29udGFpbmluZyB0aGUgcHJvcGVydGllcyBvZiB0aGlzIFJPUyByZXNvdXJjZSwgd2hpY2ggd2lsbCBiZSBhc3NpZ25lZCB0byBST1MgcmVzb3VyY2UuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAQXR0cmlidXRlIEFwcElkOiBBcHBsaWNhdGlvbiBJZCwgYSB1bmlxdWUgaWRlbnRpZmllciBFREFTIGFwcGxpY2F0aW9uXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJBcHBJZDogYW55O1xuXG4gICAgLyoqXG4gICAgICogQEF0dHJpYnV0ZSBQb3J0OiBBcHBsaWNhdGlvbiBwb3J0XG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJQb3J0OiBhbnk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgYEFMSVlVTjo6RURBUzo6QXBwbGljYXRpb25gLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogQHBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIEBwYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IEFwcGxpY2F0aW9uUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAgICAgY29uc3Qgcm9zQXBwbGljYXRpb24gPSBuZXcgUm9zQXBwbGljYXRpb24odGhpcywgaWQsICB7XG4gICAgICAgICAgICBjb21wb25lbnRJZHM6IHByb3BzLmNvbXBvbmVudElkcyxcbiAgICAgICAgICAgIGxvZ2ljYWxSZWdpb25JZDogcHJvcHMubG9naWNhbFJlZ2lvbklkLFxuICAgICAgICAgICAgYXBwbGljYXRpb25OYW1lOiBwcm9wcy5hcHBsaWNhdGlvbk5hbWUsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogcHJvcHMuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICBlY3VJbmZvOiBwcm9wcy5lY3VJbmZvLFxuICAgICAgICAgICAgaGVhbHRoQ2hlY2tVcmw6IHByb3BzLmhlYWx0aENoZWNrVXJsLFxuICAgICAgICAgICAgY2x1c3RlcklkOiBwcm9wcy5jbHVzdGVySWQsXG4gICAgICAgICAgICBwYWNrYWdlVHlwZTogcHJvcHMucGFja2FnZVR5cGUgPyBwcm9wcy5wYWNrYWdlVHlwZSA6ICd3YXInLFxuICAgICAgICAgICAgYnVpbGRQYWNrSWQ6IHByb3BzLmJ1aWxkUGFja0lkLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0FwcGxpY2F0aW9uO1xuICAgICAgICB0aGlzLmF0dHJBcHBJZCA9IHJvc0FwcGxpY2F0aW9uLmF0dHJBcHBJZDtcbiAgICAgICAgdGhpcy5hdHRyUG9ydCA9IHJvc0FwcGxpY2F0aW9uLmF0dHJQb3J0O1xuICAgIH1cbn1cbiJdfQ==