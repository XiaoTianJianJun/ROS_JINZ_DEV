"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosGroup = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosGroupProps`
 *
 * @param properties - the TypeScript properties of a `RosGroupProps`
 *
 * @returns the result of the validation.
 */
function RosGroupPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('app', ros.validateString)(properties.app));
    errors.collect(ros.propertyValidator('inProtocol', ros.requiredValidator)(properties.inProtocol));
    errors.collect(ros.propertyValidator('inProtocol', ros.validateString)(properties.inProtocol));
    errors.collect(ros.propertyValidator('callback', ros.validateString)(properties.callback));
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('playDomain', ros.requiredValidator)(properties.playDomain));
    errors.collect(ros.propertyValidator('playDomain', ros.validateString)(properties.playDomain));
    errors.collect(ros.propertyValidator('enabled', ros.validateBoolean)(properties.enabled));
    errors.collect(ros.propertyValidator('region', ros.requiredValidator)(properties.region));
    errors.collect(ros.propertyValidator('region', ros.validateString)(properties.region));
    errors.collect(ros.propertyValidator('pushDomain', ros.requiredValidator)(properties.pushDomain));
    errors.collect(ros.propertyValidator('pushDomain', ros.validateString)(properties.pushDomain));
    errors.collect(ros.propertyValidator('lazyPull', ros.validateBoolean)(properties.lazyPull));
    errors.collect(ros.propertyValidator('outProtocol', ros.requiredValidator)(properties.outProtocol));
    errors.collect(ros.propertyValidator('outProtocol', ros.validateString)(properties.outProtocol));
    errors.collect(ros.propertyValidator('name', ros.requiredValidator)(properties.name));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    return errors.wrap('supplied properties not correct for "RosGroupProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::VS::Group` resource
 *
 * @param properties - the TypeScript properties of a `RosGroupProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::VS::Group` resource.
 */
// @ts-ignore TS6133
function rosGroupPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosGroupPropsValidator(properties).assertSuccess();
    }
    return {
        InProtocol: ros.stringToRosTemplate(properties.inProtocol),
        Name: ros.stringToRosTemplate(properties.name),
        OutProtocol: ros.stringToRosTemplate(properties.outProtocol),
        PlayDomain: ros.stringToRosTemplate(properties.playDomain),
        PushDomain: ros.stringToRosTemplate(properties.pushDomain),
        Region: ros.stringToRosTemplate(properties.region),
        App: ros.stringToRosTemplate(properties.app),
        Callback: ros.stringToRosTemplate(properties.callback),
        Description: ros.stringToRosTemplate(properties.description),
        Enabled: ros.booleanToRosTemplate(properties.enabled),
        LazyPull: ros.booleanToRosTemplate(properties.lazyPull),
    };
}
/**
 * A ROS template type:  `ALIYUN::VS::Group`
 */
class RosGroup extends ros.RosResource {
    /**
     * Create a new `ALIYUN::VS::Group`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosGroup.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrGbId = ros.Token.asString(this.getAtt('GbId'));
        this.attrGbIp = ros.Token.asString(this.getAtt('GbIp'));
        this.attrGbPort = ros.Token.asString(this.getAtt('GbPort'));
        this.attrId = ros.Token.asString(this.getAtt('Id'));
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.inProtocol = props.inProtocol;
        this.name = props.name;
        this.outProtocol = props.outProtocol;
        this.playDomain = props.playDomain;
        this.pushDomain = props.pushDomain;
        this.region = props.region;
        this.app = props.app;
        this.callback = props.callback;
        this.description = props.description;
        this.enabled = props.enabled;
        this.lazyPull = props.lazyPull;
    }
    get rosProperties() {
        return {
            inProtocol: this.inProtocol,
            name: this.name,
            outProtocol: this.outProtocol,
            playDomain: this.playDomain,
            pushDomain: this.pushDomain,
            region: this.region,
            app: this.app,
            callback: this.callback,
            description: this.description,
            enabled: this.enabled,
            lazyPull: this.lazyPull,
        };
    }
    renderProperties(props) {
        return rosGroupPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosGroup = RosGroup;
/**
 * The resource type name for this resource class.
 */
RosGroup.ROS_RESOURCE_TYPE_NAME = "ALIYUN::VS::Group";
//# sourceMappingURL=data:application/json;base64,