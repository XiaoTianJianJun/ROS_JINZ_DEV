"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosRestoreTask = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosRestoreTaskProps`
 *
 * @param properties - the TypeScript properties of a `RosRestoreTaskProps`
 *
 * @returns the result of the validation.
 */
function RosRestoreTaskPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('startTask', ros.validateBoolean)(properties.startTask));
    errors.collect(ros.propertyValidator('restoreDir', ros.validateString)(properties.restoreDir));
    if (properties.duplicateConflict && (typeof properties.duplicateConflict) !== 'object') {
        errors.collect(ros.propertyValidator('duplicateConflict', ros.validateAllowedValues)({
            data: properties.duplicateConflict,
            allowedValues: ["failure", "renamenew"],
        }));
    }
    errors.collect(ros.propertyValidator('duplicateConflict', ros.validateString)(properties.duplicateConflict));
    errors.collect(ros.propertyValidator('restoreHome', ros.validateString)(properties.restoreHome));
    errors.collect(ros.propertyValidator('destinationEndpointPassword', ros.validateString)(properties.destinationEndpointPassword));
    errors.collect(ros.propertyValidator('destinationEndpointIp', ros.validateString)(properties.destinationEndpointIp));
    errors.collect(ros.propertyValidator('destinationEndpointPort', ros.validateNumber)(properties.destinationEndpointPort));
    errors.collect(ros.propertyValidator('destinationEndpointOracleSid', ros.validateString)(properties.destinationEndpointOracleSid));
    errors.collect(ros.propertyValidator('backupSetId', ros.validateString)(properties.backupSetId));
    errors.collect(ros.propertyValidator('destinationEndpointInstanceType', ros.requiredValidator)(properties.destinationEndpointInstanceType));
    errors.collect(ros.propertyValidator('destinationEndpointInstanceType', ros.validateString)(properties.destinationEndpointInstanceType));
    errors.collect(ros.propertyValidator('restoreTime', ros.validateNumber)(properties.restoreTime));
    errors.collect(ros.propertyValidator('destinationEndpointRegion', ros.validateString)(properties.destinationEndpointRegion));
    errors.collect(ros.propertyValidator('destinationEndpointDatabaseName', ros.validateString)(properties.destinationEndpointDatabaseName));
    errors.collect(ros.propertyValidator('destinationEndpointUserName', ros.validateString)(properties.destinationEndpointUserName));
    errors.collect(ros.propertyValidator('restoreObjects', ros.validateString)(properties.restoreObjects));
    errors.collect(ros.propertyValidator('restoreTaskName', ros.requiredValidator)(properties.restoreTaskName));
    errors.collect(ros.propertyValidator('restoreTaskName', ros.validateString)(properties.restoreTaskName));
    errors.collect(ros.propertyValidator('backupPlanId', ros.requiredValidator)(properties.backupPlanId));
    errors.collect(ros.propertyValidator('backupPlanId', ros.validateString)(properties.backupPlanId));
    errors.collect(ros.propertyValidator('backupGatewayId', ros.validateNumber)(properties.backupGatewayId));
    errors.collect(ros.propertyValidator('destinationEndpointInstanceId', ros.validateString)(properties.destinationEndpointInstanceId));
    return errors.wrap('supplied properties not correct for "RosRestoreTaskProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DBS::RestoreTask` resource
 *
 * @param properties - the TypeScript properties of a `RosRestoreTaskProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DBS::RestoreTask` resource.
 */
// @ts-ignore TS6133
function rosRestoreTaskPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosRestoreTaskPropsValidator(properties).assertSuccess();
    }
    return {
        BackupPlanId: ros.stringToRosTemplate(properties.backupPlanId),
        DestinationEndpointInstanceType: ros.stringToRosTemplate(properties.destinationEndpointInstanceType),
        RestoreTaskName: ros.stringToRosTemplate(properties.restoreTaskName),
        BackupGatewayId: ros.numberToRosTemplate(properties.backupGatewayId),
        BackupSetId: ros.stringToRosTemplate(properties.backupSetId),
        DestinationEndpointDatabaseName: ros.stringToRosTemplate(properties.destinationEndpointDatabaseName),
        DestinationEndpointInstanceID: ros.stringToRosTemplate(properties.destinationEndpointInstanceId),
        DestinationEndpointIP: ros.stringToRosTemplate(properties.destinationEndpointIp),
        DestinationEndpointOracleSID: ros.stringToRosTemplate(properties.destinationEndpointOracleSid),
        DestinationEndpointPassword: ros.stringToRosTemplate(properties.destinationEndpointPassword),
        DestinationEndpointPort: ros.numberToRosTemplate(properties.destinationEndpointPort),
        DestinationEndpointRegion: ros.stringToRosTemplate(properties.destinationEndpointRegion),
        DestinationEndpointUserName: ros.stringToRosTemplate(properties.destinationEndpointUserName),
        DuplicateConflict: ros.stringToRosTemplate(properties.duplicateConflict),
        RestoreDir: ros.stringToRosTemplate(properties.restoreDir),
        RestoreHome: ros.stringToRosTemplate(properties.restoreHome),
        RestoreObjects: ros.stringToRosTemplate(properties.restoreObjects),
        RestoreTime: ros.numberToRosTemplate(properties.restoreTime),
        StartTask: ros.booleanToRosTemplate(properties.startTask),
    };
}
/**
 * A ROS template type:  `ALIYUN::DBS::RestoreTask`
 */
class RosRestoreTask extends ros.RosResource {
    /**
     * Create a new `ALIYUN::DBS::RestoreTask`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosRestoreTask.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrRestoreTaskId = ros.Token.asString(this.getAtt('RestoreTaskId'));
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.backupPlanId = props.backupPlanId;
        this.destinationEndpointInstanceType = props.destinationEndpointInstanceType;
        this.restoreTaskName = props.restoreTaskName;
        this.backupGatewayId = props.backupGatewayId;
        this.backupSetId = props.backupSetId;
        this.destinationEndpointDatabaseName = props.destinationEndpointDatabaseName;
        this.destinationEndpointInstanceId = props.destinationEndpointInstanceId;
        this.destinationEndpointIp = props.destinationEndpointIp;
        this.destinationEndpointOracleSid = props.destinationEndpointOracleSid;
        this.destinationEndpointPassword = props.destinationEndpointPassword;
        this.destinationEndpointPort = props.destinationEndpointPort;
        this.destinationEndpointRegion = props.destinationEndpointRegion;
        this.destinationEndpointUserName = props.destinationEndpointUserName;
        this.duplicateConflict = props.duplicateConflict;
        this.restoreDir = props.restoreDir;
        this.restoreHome = props.restoreHome;
        this.restoreObjects = props.restoreObjects;
        this.restoreTime = props.restoreTime;
        this.startTask = props.startTask;
    }
    get rosProperties() {
        return {
            backupPlanId: this.backupPlanId,
            destinationEndpointInstanceType: this.destinationEndpointInstanceType,
            restoreTaskName: this.restoreTaskName,
            backupGatewayId: this.backupGatewayId,
            backupSetId: this.backupSetId,
            destinationEndpointDatabaseName: this.destinationEndpointDatabaseName,
            destinationEndpointInstanceId: this.destinationEndpointInstanceId,
            destinationEndpointIp: this.destinationEndpointIp,
            destinationEndpointOracleSid: this.destinationEndpointOracleSid,
            destinationEndpointPassword: this.destinationEndpointPassword,
            destinationEndpointPort: this.destinationEndpointPort,
            destinationEndpointRegion: this.destinationEndpointRegion,
            destinationEndpointUserName: this.destinationEndpointUserName,
            duplicateConflict: this.duplicateConflict,
            restoreDir: this.restoreDir,
            restoreHome: this.restoreHome,
            restoreObjects: this.restoreObjects,
            restoreTime: this.restoreTime,
            startTask: this.startTask,
        };
    }
    renderProperties(props) {
        return rosRestoreTaskPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosRestoreTask = RosRestoreTask;
/**
 * The resource type name for this resource class.
 */
RosRestoreTask.ROS_RESOURCE_TYPE_NAME = "ALIYUN::DBS::RestoreTask";
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGJzLmdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRicy5nZW5lcmF0ZWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHlEQUF5RDs7O0FBRXpELDhDQUE4QztBQStIOUM7Ozs7OztHQU1HO0FBQ0gsU0FBUyw0QkFBNEIsQ0FBQyxVQUFlO0lBQ2pELElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1FBQUUsT0FBTyxHQUFHLENBQUMsa0JBQWtCLENBQUM7S0FBRTtJQUNuRSxNQUFNLE1BQU0sR0FBRyxJQUFJLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzNDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFDOUYsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsWUFBWSxFQUFFLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztJQUMvRixJQUFHLFVBQVUsQ0FBQyxpQkFBaUIsSUFBSSxDQUFDLE9BQU8sVUFBVSxDQUFDLGlCQUFpQixDQUFDLEtBQUssUUFBUSxFQUFFO1FBQ25GLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLG1CQUFtQixFQUFFLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1lBQ25GLElBQUksRUFBRSxVQUFVLENBQUMsaUJBQWlCO1lBQ2xDLGFBQWEsRUFBRSxDQUFDLFNBQVMsRUFBQyxXQUFXLENBQUM7U0FDdkMsQ0FBQyxDQUFDLENBQUM7S0FDUDtJQUNELE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLG1CQUFtQixFQUFFLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxV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MkIsRUFBRSxJQUFJLENBQUMsMkJBQTJCO1lBQzdELGlCQUFpQixFQUFFLElBQUksQ0FBQyxpQkFBaUI7WUFDekMsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVO1lBQzNCLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVztZQUM3QixjQUFjLEVBQUUsSUFBSSxDQUFDLGNBQWM7WUFDbkMsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXO1lBQzdCLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUztTQUM1QixDQUFDO0lBQ04sQ0FBQztJQUNTLGdCQUFnQixDQUFDLEtBQTJCO1FBQ2xELE9BQU8sZ0NBQWdDLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0lBQzFGLENBQUM7O0FBck1MLHdDQXNNQztBQXJNRzs7R0FFRztBQUNvQixxQ0FBc0IsR0FBRywwQkFBMEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuXG5pbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgQUxJWVVOOjpEQlM6OlJlc3RvcmVUYXNrYFxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJvc1Jlc3RvcmVUYXNrUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGJhY2t1cFBsYW5JZDogVGhlIElEIG9mIHRoZSBiYWNrdXAgcGxhbi5cbiAgICAgKi9cbiAgICByZWFkb25seSBiYWNrdXBQbGFuSWQ6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkZXN0aW5hdGlvbkVuZHBvaW50SW5zdGFuY2VUeXBlOiBUaGUgbG9jYXRpb24gb2YgdGhlIGRhdGFiYXNlLiBWYWxpZCB2YWx1ZXM6IFxuICAgICAqIC0gcmRzIFxuICAgICAqIC0gZWNzIFxuICAgICAqIC0gZXhwcmVzczogYSBkYXRhYmFzZSBjb25uZWN0ZWQgb3ZlciBleHByZXNzIGNvbm5lY3QsIFZQTiBHYXRld2F5LCBvciBzbWFydCBnYXRld2F5LiBcbiAgICAgKiAtIGFnZW50OiBUaGUgZGF0YWJhc2UgY29ubmVjdGVkIHRocm91Z2ggdGhlIGJhY2t1cCBHYXRld2F5IFxuICAgICAqIC0gZGRzOiBhcHNhcmFkYiBmb3IgTW9uZ29EQiBcbiAgICAgKiAtIGt2c3RvcmUgXG4gICAgICogLSBwb2xhcmRiIFxuICAgICAqIC0gZHJkcyBcbiAgICAgKiAtIGRnOiB0aGUgZGF0YWJhc2UgaXMgZGlyZWN0bHkgY29ubmVjdGVkIHRocm91Z2ggSVAgQWRkcmVzczogUG9ydC5cbiAgICAgKi9cbiAgICByZWFkb25seSBkZXN0aW5hdGlvbkVuZHBvaW50SW5zdGFuY2VUeXBlOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgcmVzdG9yZVRhc2tOYW1lOiBUaGUgbmFtZSBvZiB0aGUgcmVzdG9yYXRpb24gdGFzay5cbiAgICAgKi9cbiAgICByZWFkb25seSByZXN0b3JlVGFza05hbWU6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBiYWNrdXBHYXRld2F5SWQ6IFRoZSBJRCBvZiB0aGUgYmFja3VwIGdhdGV3YXkuXG4gICAgICogTm90ZURlc3RpbmF0aW9uRW5kcG9pbnRJbnN0YW5jZVR5cGUgaWYgeW91IHNldCB0aGlzIHBhcmFtZXRlciB0byBhZ2VudCwgdGhpcyBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYmFja3VwR2F0ZXdheUlkPzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGJhY2t1cFNldElkOiBUaGUgSUQgb2YgdGhlIGZ1bGwgYmFja3VwIHNldCB1c2VkIGZvciByZXN0b3JhdGlvbiwgd2hpY2ggaXMgbXV0dWFsbHkgZXhjbHVzaXZlIHRvXG4gICAgICogUmVzdG9yZVRpbWUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYmFja3VwU2V0SWQ/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgZGVzdGluYXRpb25FbmRwb2ludERhdGFiYXNlTmFtZTogVGhlIG5hbWUgb2YgdGhlIFJEUyBkYXRhYmFzZS5cbiAgICAgKiBOb3RlIFdoZW4gdGhlIGRhdGFiYXNlIHR5cGUgaXMgUG9zdGdyZVNRTCBvciBNb25nb0RCLCB0aGlzIHBhcmFtZXRlciBpcyByZXF1aXJlZC5cbiAgICAgKi9cbiAgICByZWFkb25seSBkZXN0aW5hdGlvbkVuZHBvaW50RGF0YWJhc2VOYW1lPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGRlc3RpbmF0aW9uRW5kcG9pbnRJbnN0YW5jZUlkOiBUaGUgSUQgb2YgdGhlIEFwc2FyYURCIFJEUyBpbnN0YW5jZSB0byBxdWVyeS5cbiAgICAgKiBOb3RlRGVzdGluYXRpb25FbmRwb2ludEluc3RhbmNlVHlwZSBpZiB0aGUgdmFsdWUgaXMgUkRTLCBFQ1MsIEREUywgb3IgRXhwcmVzcywgdGhpcyBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVzdGluYXRpb25FbmRwb2ludEluc3RhbmNlSWQ/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgZGVzdGluYXRpb25FbmRwb2ludElwOiBUaGUgZW5kcG9pbnQgdXNlZCB0byBjb25uZWN0IHRvIHRoZSBkYXRhYmFzZS5cbiAgICAgKiBOb3RlRGVzdGluYXRpb25FbmRwb2ludEluc3RhbmNlVHlwZSBpcyBleHByZXNzLCBhZ2VudCwgb3Igb3RoZXIuIFRoaXMgcGFyYW1ldGVyIGlzIHJlcXVpcmVkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRlc3RpbmF0aW9uRW5kcG9pbnRJcD86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkZXN0aW5hdGlvbkVuZHBvaW50T3JhY2xlU2lkOiBUaGUgU0lEIG9mIHRoZSBPcmFjbGUgaW5zdGFuY2UuXG4gICAgICogTm90ZSBUaGlzIHBhcmFtZXRlciBpcyByZXF1aXJlZCBpZiB0aGUgZGF0YWJhc2UgdHlwZSBpcyBPcmFjbGUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVzdGluYXRpb25FbmRwb2ludE9yYWNsZVNpZD86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkZXN0aW5hdGlvbkVuZHBvaW50UGFzc3dvcmQ6IFRoZSBwYXNzd29yZCB0aGF0IGlzIHVzZWQgdG8gbG9nIG9uIHRvIHRoZSBSRFMgaW5zdGFuY2UuXG4gICAgICogTm90ZSBZb3UgbXVzdCBzcGVjaWZ5IHRoaXMgcGFyYW1ldGVyIHdoZW4gdGhlIGRhdGFiYXNlIHR5cGUgaXMgUmVkaXMsIG9yIHRoZSBkYXRhYmFzZSBsb2NhdGlvblxuICAgICAqIGlzIGFnZW50IGFuZCB0aGUgZGF0YWJhc2UgdHlwZSBpcyBNU1NRTC5cbiAgICAgKi9cbiAgICByZWFkb25seSBkZXN0aW5hdGlvbkVuZHBvaW50UGFzc3dvcmQ/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgZGVzdGluYXRpb25FbmRwb2ludFBvcnQ6IFRoZSBwb3J0IHRoYXQgaXMgdXNlZCB0byBhY2Nlc3MgdGhlIGRhdGFiYXNlIG9mIHRoZSBwcmltYXJ5IE15U1FMIHNlcnZlci5cbiAgICAgKiBOb3RlRGVzdGluYXRpb25FbmRwb2ludEluc3RhbmNlVHlwZSBpcyBpbiB0aGUgZm9ybWF0IG9mIGV4cHJlc3MsIGFnZW50LCBvdGhlciwgb3IgRUNTLiBUaGlzIHBhcmFtZXRlciBpcyByZXF1aXJlZC5cbiAgICAgKi9cbiAgICByZWFkb25seSBkZXN0aW5hdGlvbkVuZHBvaW50UG9ydD86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkZXN0aW5hdGlvbkVuZHBvaW50UmVnaW9uOiBUaGUgcmVnaW9uIG9mIHRoZSBkYXRhYmFzZS5cbiAgICAgKiBOb3RlRGVzdGluYXRpb25FbmRwb2ludEluc3RhbmNlVHlwZSBmb3IgUkRTLCBFQ1MsIEREUywgRXhwcmVzcywgb3IgQWdlbnQsIHRoaXMgcGFyYW1ldGVyIGlzIHJlcXVpcmVkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRlc3RpbmF0aW9uRW5kcG9pbnRSZWdpb24/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgZGVzdGluYXRpb25FbmRwb2ludFVzZXJOYW1lOiBUaGUgZGF0YWJhc2UgYWNjb3VudC5cbiAgICAgKiBOb3RlIFlvdSBtdXN0IHNwZWNpZnkgdGhpcyBwYXJhbWV0ZXIgd2hlbiB0aGUgZGF0YWJhc2UgdHlwZSBpcyBSZWRpcywgb3IgdGhlIGRhdGFiYXNlIGxvY2F0aW9uXG4gICAgICogaXMgYWdlbnQgYW5kIHRoZSBkYXRhYmFzZSB0eXBlIGlzIE1TU1FMLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRlc3RpbmF0aW9uRW5kcG9pbnRVc2VyTmFtZT86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkdXBsaWNhdGVDb25mbGljdDogVGhlIGhhbmRsaW5nIG1ldGhvZCBmb3IgY29uZmxpY3RzIGJldHdlZW4gb2JqZWN0cyB3aXRoIHRoZSBzYW1lIG5hbWUuIFZhbGlkIHZhbHVlczpcbiAgICAgKiBmYWlsdXJlOiBUaGUgb2JqZWN0IHdpdGggdGhlIHNhbWUgbmFtZSBmYWlscyAoZGVmYXVsdCkuXG4gICAgICogcmVuYW1lbmV3OiByZW5hbWVzIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIG5hbWUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZHVwbGljYXRlQ29uZmxpY3Q/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgcmVzdG9yZURpcjogRGVzdGluYXRpb25FbmRwb2ludEluc3RhbmNlVHlwZSB0aGlzIHBhcmFtZXRlciBpcyByZXF1aXJlZCB3aGVuIGFnZW50IGlzIHNwZWNpZmllZCBhbmQgdGhlIGJhY2t1cCBzY2hlZHVsZSBpcyBNeVNRTC5cbiAgICAgKi9cbiAgICByZWFkb25seSByZXN0b3JlRGlyPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHJlc3RvcmVIb21lOiBEYXRhYmFzZSBQcm9ncmFtIERpcmVjdG9yeS5cbiAgICAgKi9cbiAgICByZWFkb25seSByZXN0b3JlSG9tZT86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSByZXN0b3JlT2JqZWN0czogUmVzdG9yZSBhbiBvYmplY3QuXG4gICAgICogTm90ZSBGb3IgZGV0YWlscywgc2VlIHRoZSBmb2xsb3dpbmcgUmVzdG9yZU9iamVjdHMgaWYgdGhlIGRhdGFiYXNlIGlzIGxvY2F0ZWQgaW4gYW4gYWdlbnQsIHRoaXMgcGFyYW1ldGVyIGlzIHJlcXVpcmVkIGluIG90aGVyIHNjZW5hcmlvcy5cbiAgICAgKi9cbiAgICByZWFkb25seSByZXN0b3JlT2JqZWN0cz86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSByZXN0b3JlVGltZTogVGhlIHRpbWUgd2hlbiB0aGUgZmF1bHQgaXMgcmVzdG9yZWQuIFNldCB0aGUgdmFsdWUgdG8gMTU1NDU2MDQ3NzAwMC5cbiAgICAgKi9cbiAgICByZWFkb25seSByZXN0b3JlVGltZT86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBzdGFydFRhc2s6IFN0YXJ0IHJlc3RvcmUgdGFzayBhZnRlciBjcmVhdGluZyBhIHJlY292ZXJ5IHRhc2suXG4gICAgICovXG4gICAgcmVhZG9ubHkgc3RhcnRUYXNrPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgd2hldGhlciB0aGUgZ2l2ZW4gcHJvcGVydGllcyBtYXRjaCB0aG9zZSBvZiBhIGBSb3NSZXN0b3JlVGFza1Byb3BzYFxuICpcbiAqIEBwYXJhbSBwcm9wZXJ0aWVzIC0gdGhlIFR5cGVTY3JpcHQgcHJvcGVydGllcyBvZiBhIGBSb3NSZXN0b3JlVGFza1Byb3BzYFxuICpcbiAqIEByZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIHZhbGlkYXRpb24uXG4gKi9cbmZ1bmN0aW9uIFJvc1Jlc3RvcmVUYXNrUHJvcHNWYWxpZGF0b3IocHJvcGVydGllczogYW55KTogcm9zLlZhbGlkYXRpb25SZXN1bHQge1xuICAgIGlmICghcm9zLmNhbkluc3BlY3QocHJvcGVydGllcykpIHsgcmV0dXJuIHJvcy5WQUxJREFUSU9OX1NVQ0NFU1M7IH1cbiAgICBjb25zdCBlcnJvcnMgPSBuZXcgcm9zLlZhbGlkYXRpb25SZXN1bHRzKCk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdzdGFydFRhc2snLCByb3MudmFsaWRhdGVCb29sZWFuKShwcm9wZXJ0aWVzLnN0YXJ0VGFzaykpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcigncmVzdG9yZURpcicsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5yZXN0b3JlRGlyKSk7XG4gICAgaWYocHJvcGVydGllcy5kdXBsaWNhdGVDb25mbGljdCAmJiAodHlwZW9mIHByb3BlcnRpZXMuZHVwbGljYXRlQ29uZmxpY3QpICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2R1cGxpY2F0ZUNvbmZsaWN0Jywgcm9zLnZhbGlkYXRlQWxsb3dlZFZhbHVlcykoe1xuICAgICAgICAgIGRhdGE6IHByb3BlcnRpZXMuZHVwbGljYXRlQ29uZmxpY3QsXG4gICAgICAgICAgYWxsb3dlZFZhbHVlczogW1wiZmFpbHVyZVwiLFwicmVuYW1lbmV3XCJdLFxuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignZHVwbGljYXRlQ29uZmxpY3QnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMuZHVwbGljYXRlQ29uZmxpY3QpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ3Jlc3RvcmVIb21lJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLnJlc3RvcmVIb21lKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdkZXN0aW5hdGlvbkVuZHBvaW50UGFzc3dvcmQnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMuZGVzdGluYXRpb25FbmRwb2ludFBhc3N3b3JkKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdkZXN0aW5hdGlvbkVuZHBvaW50SXAnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMuZGVzdGluYXRpb25FbmRwb2ludElwKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdkZXN0aW5hdGlvbkVuZHBvaW50UG9ydCcsIHJvcy52YWxpZGF0ZU51bWJlcikocHJvcGVydGllcy5kZXN0aW5hdGlvbkVuZHBvaW50UG9ydCkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignZGVzdGluYXRpb25FbmRwb2ludE9yYWNsZVNpZCcsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5kZXN0aW5hdGlvbkVuZHBvaW50T3JhY2xlU2lkKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdiYWNrdXBTZXRJZCcsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5iYWNrdXBTZXRJZCkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignZGVzdGluYXRpb25FbmRwb2ludEluc3RhbmNlVHlwZScsIHJvcy5yZXF1aXJlZFZhbGlkYXRvcikocHJvcGVydGllcy5kZXN0aW5hdGlvbkVuZHBvaW50SW5zdGFuY2VUeXBlKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdkZXN0aW5hdGlvbkVuZHBvaW50SW5zdGFuY2VUeXBlJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLmRlc3RpbmF0aW9uRW5kcG9pbnRJbnN0YW5jZVR5cGUpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ3Jlc3RvcmVUaW1lJywgcm9zLnZhbGlkYXRlTnVtYmVyKShwcm9wZXJ0aWVzLnJlc3RvcmVUaW1lKSk7XG4gICAgZXJyb3JzLmNvbGxlY3Qocm9zLnByb3BlcnR5VmFsaWRhdG9yKCdkZXN0aW5hdGlvbkVuZHBvaW50UmVnaW9uJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLmRlc3RpbmF0aW9uRW5kcG9pbnRSZWdpb24pKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2Rlc3RpbmF0aW9uRW5kcG9pbnREYXRhYmFzZU5hbWUnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMuZGVzdGluYXRpb25FbmRwb2ludERhdGFiYXNlTmFtZSkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcignZGVzdGluYXRpb25FbmRwb2ludFVzZXJOYW1lJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLmRlc3RpbmF0aW9uRW5kcG9pbnRVc2VyTmFtZSkpO1xuICAgIGVycm9ycy5jb2xsZWN0KHJvcy5wcm9wZXJ0eVZhbGlkYXRvcigncmVzdG9yZU9iamVjdHMnLCByb3MudmFsaWRhdGVTdHJpbmcpKHByb3BlcnRpZXMucmVzdG9yZU9iamVjdHMpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ3Jlc3RvcmVUYXNrTmFtZScsIHJvcy5yZXF1aXJlZFZhbGlkYXRvcikocHJvcGVydGllcy5yZXN0b3JlVGFza05hbWUpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ3Jlc3RvcmVUYXNrTmFtZScsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5yZXN0b3JlVGFza05hbWUpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2JhY2t1cFBsYW5JZCcsIHJvcy5yZXF1aXJlZFZhbGlkYXRvcikocHJvcGVydGllcy5iYWNrdXBQbGFuSWQpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2JhY2t1cFBsYW5JZCcsIHJvcy52YWxpZGF0ZVN0cmluZykocHJvcGVydGllcy5iYWNrdXBQbGFuSWQpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2JhY2t1cEdhdGV3YXlJZCcsIHJvcy52YWxpZGF0ZU51bWJlcikocHJvcGVydGllcy5iYWNrdXBHYXRld2F5SWQpKTtcbiAgICBlcnJvcnMuY29sbGVjdChyb3MucHJvcGVydHlWYWxpZGF0b3IoJ2Rlc3RpbmF0aW9uRW5kcG9pbnRJbnN0YW5jZUlkJywgcm9zLnZhbGlkYXRlU3RyaW5nKShwcm9wZXJ0aWVzLmRlc3RpbmF0aW9uRW5kcG9pbnRJbnN0YW5jZUlkKSk7XG4gICAgcmV0dXJuIGVycm9ycy53cmFwKCdzdXBwbGllZCBwcm9wZXJ0aWVzIG5vdCBjb3JyZWN0IGZvciBcIlJvc1Jlc3RvcmVUYXNrUHJvcHNcIicpO1xufVxuXG4vKipcbiAqIFJlbmRlcnMgdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBwcm9wZXJ0aWVzIG9mIGFuIGBBTElZVU46OkRCUzo6UmVzdG9yZVRhc2tgIHJlc291cmNlXG4gKlxuICogQHBhcmFtIHByb3BlcnRpZXMgLSB0aGUgVHlwZVNjcmlwdCBwcm9wZXJ0aWVzIG9mIGEgYFJvc1Jlc3RvcmVUYXNrUHJvcHNgXG4gKlxuICogQHJldHVybnMgdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBwcm9wZXJ0aWVzIG9mIGFuIGBBTElZVU46OkRCUzo6UmVzdG9yZVRhc2tgIHJlc291cmNlLlxuICovXG4vLyBAdHMtaWdub3JlIFRTNjEzM1xuZnVuY3Rpb24gcm9zUmVzdG9yZVRhc2tQcm9wc1RvUm9zVGVtcGxhdGUocHJvcGVydGllczogYW55LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDogYm9vbGVhbik6IGFueSB7XG4gICAgaWYgKCFyb3MuY2FuSW5zcGVjdChwcm9wZXJ0aWVzKSkgeyByZXR1cm4gcHJvcGVydGllczsgfVxuICAgIGlmKGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KSB7XG4gICAgICAgIFJvc1Jlc3RvcmVUYXNrUHJvcHNWYWxpZGF0b3IocHJvcGVydGllcykuYXNzZXJ0U3VjY2VzcygpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgQmFja3VwUGxhbklkOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmJhY2t1cFBsYW5JZCksXG4gICAgICBEZXN0aW5hdGlvbkVuZHBvaW50SW5zdGFuY2VUeXBlOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmRlc3RpbmF0aW9uRW5kcG9pbnRJbnN0YW5jZVR5cGUpLFxuICAgICAgUmVzdG9yZVRhc2tOYW1lOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLnJlc3RvcmVUYXNrTmFtZSksXG4gICAgICBCYWNrdXBHYXRld2F5SWQ6IHJvcy5udW1iZXJUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuYmFja3VwR2F0ZXdheUlkKSxcbiAgICAgIEJhY2t1cFNldElkOiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmJhY2t1cFNldElkKSxcbiAgICAgIERlc3RpbmF0aW9uRW5kcG9pbnREYXRhYmFzZU5hbWU6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuZGVzdGluYXRpb25FbmRwb2ludERhdGFiYXNlTmFtZSksXG4gICAgICBEZXN0aW5hdGlvbkVuZHBvaW50SW5zdGFuY2VJRDogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy5kZXN0aW5hdGlvbkVuZHBvaW50SW5zdGFuY2VJZCksXG4gICAgICBEZXN0aW5hdGlvbkVuZHBvaW50SVA6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuZGVzdGluYXRpb25FbmRwb2ludElwKSxcbiAgICAgIERlc3RpbmF0aW9uRW5kcG9pbnRPcmFjbGVTSUQ6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuZGVzdGluYXRpb25FbmRwb2ludE9yYWNsZVNpZCksXG4gICAgICBEZXN0aW5hdGlvbkVuZHBvaW50UGFzc3dvcmQ6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuZGVzdGluYXRpb25FbmRwb2ludFBhc3N3b3JkKSxcbiAgICAgIERlc3RpbmF0aW9uRW5kcG9pbnRQb3J0OiByb3MubnVtYmVyVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmRlc3RpbmF0aW9uRW5kcG9pbnRQb3J0KSxcbiAgICAgIERlc3RpbmF0aW9uRW5kcG9pbnRSZWdpb246IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuZGVzdGluYXRpb25FbmRwb2ludFJlZ2lvbiksXG4gICAgICBEZXN0aW5hdGlvbkVuZHBvaW50VXNlck5hbWU6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMuZGVzdGluYXRpb25FbmRwb2ludFVzZXJOYW1lKSxcbiAgICAgIER1cGxpY2F0ZUNvbmZsaWN0OiByb3Muc3RyaW5nVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLmR1cGxpY2F0ZUNvbmZsaWN0KSxcbiAgICAgIFJlc3RvcmVEaXI6IHJvcy5zdHJpbmdUb1Jvc1RlbXBsYXRlKHByb3BlcnRpZXMucmVzdG9yZURpciksXG4gICAgICBSZXN0b3JlSG9tZTogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy5yZXN0b3JlSG9tZSksXG4gICAgICBSZXN0b3JlT2JqZWN0czogcm9zLnN0cmluZ1RvUm9zVGVtcGxhdGUocHJvcGVydGllcy5yZXN0b3JlT2JqZWN0cyksXG4gICAgICBSZXN0b3JlVGltZTogcm9zLm51bWJlclRvUm9zVGVtcGxhdGUocHJvcGVydGllcy5yZXN0b3JlVGltZSksXG4gICAgICBTdGFydFRhc2s6IHJvcy5ib29sZWFuVG9Sb3NUZW1wbGF0ZShwcm9wZXJ0aWVzLnN0YXJ0VGFzayksXG4gICAgfTtcbn1cblxuLyoqXG4gKiBBIFJPUyB0ZW1wbGF0ZSB0eXBlOiAgYEFMSVlVTjo6REJTOjpSZXN0b3JlVGFza2BcbiAqL1xuZXhwb3J0IGNsYXNzIFJvc1Jlc3RvcmVUYXNrIGV4dGVuZHMgcm9zLlJvc1Jlc291cmNlIHtcbiAgICAvKipcbiAgICAgKiBUaGUgcmVzb3VyY2UgdHlwZSBuYW1lIGZvciB0aGlzIHJlc291cmNlIGNsYXNzLlxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgUk9TX1JFU09VUkNFX1RZUEVfTkFNRSA9IFwiQUxJWVVOOjpEQlM6OlJlc3RvcmVUYXNrXCI7XG5cbiAgICAvKipcbiAgICAgKiBBIGZhY3RvcnkgbWV0aG9kIHRoYXQgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGZyb20gYW4gb2JqZWN0XG4gICAgICogY29udGFpbmluZyB0aGUgcHJvcGVydGllcyBvZiB0aGlzIFJPUyByZXNvdXJjZS5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBBdHRyaWJ1dGUgUmVzdG9yZVRhc2tJZDogVGhlIElEIG9mIHRoZSByZXN0b3JhdGlvbiB0YXNrLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyUmVzdG9yZVRhc2tJZDogYW55O1xuXG4gICAgcHVibGljIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OiBib29sZWFuO1xuXG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgYmFja3VwUGxhbklkOiBUaGUgSUQgb2YgdGhlIGJhY2t1cCBwbGFuLlxuICAgICAqL1xuICAgIHB1YmxpYyBiYWNrdXBQbGFuSWQ6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkZXN0aW5hdGlvbkVuZHBvaW50SW5zdGFuY2VUeXBlOiBUaGUgbG9jYXRpb24gb2YgdGhlIGRhdGFiYXNlLiBWYWxpZCB2YWx1ZXM6IFxuICAgICAqIC0gcmRzIFxuICAgICAqIC0gZWNzIFxuICAgICAqIC0gZXhwcmVzczogYSBkYXRhYmFzZSBjb25uZWN0ZWQgb3ZlciBleHByZXNzIGNvbm5lY3QsIFZQTiBHYXRld2F5LCBvciBzbWFydCBnYXRld2F5LiBcbiAgICAgKiAtIGFnZW50OiBUaGUgZGF0YWJhc2UgY29ubmVjdGVkIHRocm91Z2ggdGhlIGJhY2t1cCBHYXRld2F5IFxuICAgICAqIC0gZGRzOiBhcHNhcmFkYiBmb3IgTW9uZ29EQiBcbiAgICAgKiAtIGt2c3RvcmUgXG4gICAgICogLSBwb2xhcmRiIFxuICAgICAqIC0gZHJkcyBcbiAgICAgKiAtIGRnOiB0aGUgZGF0YWJhc2UgaXMgZGlyZWN0bHkgY29ubmVjdGVkIHRocm91Z2ggSVAgQWRkcmVzczogUG9ydC5cbiAgICAgKi9cbiAgICBwdWJsaWMgZGVzdGluYXRpb25FbmRwb2ludEluc3RhbmNlVHlwZTogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHJlc3RvcmVUYXNrTmFtZTogVGhlIG5hbWUgb2YgdGhlIHJlc3RvcmF0aW9uIHRhc2suXG4gICAgICovXG4gICAgcHVibGljIHJlc3RvcmVUYXNrTmFtZTogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGJhY2t1cEdhdGV3YXlJZDogVGhlIElEIG9mIHRoZSBiYWNrdXAgZ2F0ZXdheS5cbiAgICAgKiBOb3RlRGVzdGluYXRpb25FbmRwb2ludEluc3RhbmNlVHlwZSBpZiB5b3Ugc2V0IHRoaXMgcGFyYW1ldGVyIHRvIGFnZW50LCB0aGlzIHBhcmFtZXRlciBpcyByZXF1aXJlZC5cbiAgICAgKi9cbiAgICBwdWJsaWMgYmFja3VwR2F0ZXdheUlkOiBudW1iZXIgfCB1bmRlZmluZWQ7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgYmFja3VwU2V0SWQ6IFRoZSBJRCBvZiB0aGUgZnVsbCBiYWNrdXAgc2V0IHVzZWQgZm9yIHJlc3RvcmF0aW9uLCB3aGljaCBpcyBtdXR1YWxseSBleGNsdXNpdmUgdG9cbiAgICAgKiBSZXN0b3JlVGltZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgYmFja3VwU2V0SWQ6IHN0cmluZyB8IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkZXN0aW5hdGlvbkVuZHBvaW50RGF0YWJhc2VOYW1lOiBUaGUgbmFtZSBvZiB0aGUgUkRTIGRhdGFiYXNlLlxuICAgICAqIE5vdGUgV2hlbiB0aGUgZGF0YWJhc2UgdHlwZSBpcyBQb3N0Z3JlU1FMIG9yIE1vbmdvREIsIHRoaXMgcGFyYW1ldGVyIGlzIHJlcXVpcmVkLlxuICAgICAqL1xuICAgIHB1YmxpYyBkZXN0aW5hdGlvbkVuZHBvaW50RGF0YWJhc2VOYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgZGVzdGluYXRpb25FbmRwb2ludEluc3RhbmNlSWQ6IFRoZSBJRCBvZiB0aGUgQXBzYXJhREIgUkRTIGluc3RhbmNlIHRvIHF1ZXJ5LlxuICAgICAqIE5vdGVEZXN0aW5hdGlvbkVuZHBvaW50SW5zdGFuY2VUeXBlIGlmIHRoZSB2YWx1ZSBpcyBSRFMsIEVDUywgRERTLCBvciBFeHByZXNzLCB0aGlzIHBhcmFtZXRlciBpcyByZXF1aXJlZC5cbiAgICAgKi9cbiAgICBwdWJsaWMgZGVzdGluYXRpb25FbmRwb2ludEluc3RhbmNlSWQ6IHN0cmluZyB8IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkZXN0aW5hdGlvbkVuZHBvaW50SXA6IFRoZSBlbmRwb2ludCB1c2VkIHRvIGNvbm5lY3QgdG8gdGhlIGRhdGFiYXNlLlxuICAgICAqIE5vdGVEZXN0aW5hdGlvbkVuZHBvaW50SW5zdGFuY2VUeXBlIGlzIGV4cHJlc3MsIGFnZW50LCBvciBvdGhlci4gVGhpcyBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQuXG4gICAgICovXG4gICAgcHVibGljIGRlc3RpbmF0aW9uRW5kcG9pbnRJcDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGRlc3RpbmF0aW9uRW5kcG9pbnRPcmFjbGVTaWQ6IFRoZSBTSUQgb2YgdGhlIE9yYWNsZSBpbnN0YW5jZS5cbiAgICAgKiBOb3RlIFRoaXMgcGFyYW1ldGVyIGlzIHJlcXVpcmVkIGlmIHRoZSBkYXRhYmFzZSB0eXBlIGlzIE9yYWNsZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgZGVzdGluYXRpb25FbmRwb2ludE9yYWNsZVNpZDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGRlc3RpbmF0aW9uRW5kcG9pbnRQYXNzd29yZDogVGhlIHBhc3N3b3JkIHRoYXQgaXMgdXNlZCB0byBsb2cgb24gdG8gdGhlIFJEUyBpbnN0YW5jZS5cbiAgICAgKiBOb3RlIFlvdSBtdXN0IHNwZWNpZnkgdGhpcyBwYXJhbWV0ZXIgd2hlbiB0aGUgZGF0YWJhc2UgdHlwZSBpcyBSZWRpcywgb3IgdGhlIGRhdGFiYXNlIGxvY2F0aW9uXG4gICAgICogaXMgYWdlbnQgYW5kIHRoZSBkYXRhYmFzZSB0eXBlIGlzIE1TU1FMLlxuICAgICAqL1xuICAgIHB1YmxpYyBkZXN0aW5hdGlvbkVuZHBvaW50UGFzc3dvcmQ6IHN0cmluZyB8IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkZXN0aW5hdGlvbkVuZHBvaW50UG9ydDogVGhlIHBvcnQgdGhhdCBpcyB1c2VkIHRvIGFjY2VzcyB0aGUgZGF0YWJhc2Ugb2YgdGhlIHByaW1hcnkgTXlTUUwgc2VydmVyLlxuICAgICAqIE5vdGVEZXN0aW5hdGlvbkVuZHBvaW50SW5zdGFuY2VUeXBlIGlzIGluIHRoZSBmb3JtYXQgb2YgZXhwcmVzcywgYWdlbnQsIG90aGVyLCBvciBFQ1MuIFRoaXMgcGFyYW1ldGVyIGlzIHJlcXVpcmVkLlxuICAgICAqL1xuICAgIHB1YmxpYyBkZXN0aW5hdGlvbkVuZHBvaW50UG9ydDogbnVtYmVyIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGRlc3RpbmF0aW9uRW5kcG9pbnRSZWdpb246IFRoZSByZWdpb24gb2YgdGhlIGRhdGFiYXNlLlxuICAgICAqIE5vdGVEZXN0aW5hdGlvbkVuZHBvaW50SW5zdGFuY2VUeXBlIGZvciBSRFMsIEVDUywgRERTLCBFeHByZXNzLCBvciBBZ2VudCwgdGhpcyBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQuXG4gICAgICovXG4gICAgcHVibGljIGRlc3RpbmF0aW9uRW5kcG9pbnRSZWdpb246IHN0cmluZyB8IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkZXN0aW5hdGlvbkVuZHBvaW50VXNlck5hbWU6IFRoZSBkYXRhYmFzZSBhY2NvdW50LlxuICAgICAqIE5vdGUgWW91IG11c3Qgc3BlY2lmeSB0aGlzIHBhcmFtZXRlciB3aGVuIHRoZSBkYXRhYmFzZSB0eXBlIGlzIFJlZGlzLCBvciB0aGUgZGF0YWJhc2UgbG9jYXRpb25cbiAgICAgKiBpcyBhZ2VudCBhbmQgdGhlIGRhdGFiYXNlIHR5cGUgaXMgTVNTUUwuXG4gICAgICovXG4gICAgcHVibGljIGRlc3RpbmF0aW9uRW5kcG9pbnRVc2VyTmFtZTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGR1cGxpY2F0ZUNvbmZsaWN0OiBUaGUgaGFuZGxpbmcgbWV0aG9kIGZvciBjb25mbGljdHMgYmV0d2VlbiBvYmplY3RzIHdpdGggdGhlIHNhbWUgbmFtZS4gVmFsaWQgdmFsdWVzOlxuICAgICAqIGZhaWx1cmU6IFRoZSBvYmplY3Qgd2l0aCB0aGUgc2FtZSBuYW1lIGZhaWxzIChkZWZhdWx0KS5cbiAgICAgKiByZW5hbWVuZXc6IHJlbmFtZXMgYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgbmFtZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgZHVwbGljYXRlQ29uZmxpY3Q6IHN0cmluZyB8IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSByZXN0b3JlRGlyOiBEZXN0aW5hdGlvbkVuZHBvaW50SW5zdGFuY2VUeXBlIHRoaXMgcGFyYW1ldGVyIGlzIHJlcXVpcmVkIHdoZW4gYWdlbnQgaXMgc3BlY2lmaWVkIGFuZCB0aGUgYmFja3VwIHNjaGVkdWxlIGlzIE15U1FMLlxuICAgICAqL1xuICAgIHB1YmxpYyByZXN0b3JlRGlyOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgcmVzdG9yZUhvbWU6IERhdGFiYXNlIFByb2dyYW0gRGlyZWN0b3J5LlxuICAgICAqL1xuICAgIHB1YmxpYyByZXN0b3JlSG9tZTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHJlc3RvcmVPYmplY3RzOiBSZXN0b3JlIGFuIG9iamVjdC5cbiAgICAgKiBOb3RlIEZvciBkZXRhaWxzLCBzZWUgdGhlIGZvbGxvd2luZyBSZXN0b3JlT2JqZWN0cyBpZiB0aGUgZGF0YWJhc2UgaXMgbG9jYXRlZCBpbiBhbiBhZ2VudCwgdGhpcyBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQgaW4gb3RoZXIgc2NlbmFyaW9zLlxuICAgICAqL1xuICAgIHB1YmxpYyByZXN0b3JlT2JqZWN0czogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHJlc3RvcmVUaW1lOiBUaGUgdGltZSB3aGVuIHRoZSBmYXVsdCBpcyByZXN0b3JlZC4gU2V0IHRoZSB2YWx1ZSB0byAxNTU0NTYwNDc3MDAwLlxuICAgICAqL1xuICAgIHB1YmxpYyByZXN0b3JlVGltZTogbnVtYmVyIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHN0YXJ0VGFzazogU3RhcnQgcmVzdG9yZSB0YXNrIGFmdGVyIGNyZWF0aW5nIGEgcmVjb3ZlcnkgdGFzay5cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhcnRUYXNrOiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlIHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGBBTElZVU46OkRCUzo6UmVzdG9yZVRhc2tgLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogQHBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIEBwYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFJvc1Jlc3RvcmVUYXNrUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OiBib29sZWFuKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCwgeyB0eXBlOiBSb3NSZXN0b3JlVGFzay5ST1NfUkVTT1VSQ0VfVFlQRV9OQU1FLCBwcm9wZXJ0aWVzOiBwcm9wcyB9KTtcbiAgICAgICAgdGhpcy5hdHRyUmVzdG9yZVRhc2tJZCA9IHJvcy5Ub2tlbi5hc1N0cmluZyh0aGlzLmdldEF0dCgnUmVzdG9yZVRhc2tJZCcpKTtcblxuICAgICAgICB0aGlzLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ID0gZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ7XG4gICAgICAgIHRoaXMuYmFja3VwUGxhbklkID0gcHJvcHMuYmFja3VwUGxhbklkO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uRW5kcG9pbnRJbnN0YW5jZVR5cGUgPSBwcm9wcy5kZXN0aW5hdGlvbkVuZHBvaW50SW5zdGFuY2VUeXBlO1xuICAgICAgICB0aGlzLnJlc3RvcmVUYXNrTmFtZSA9IHByb3BzLnJlc3RvcmVUYXNrTmFtZTtcbiAgICAgICAgdGhpcy5iYWNrdXBHYXRld2F5SWQgPSBwcm9wcy5iYWNrdXBHYXRld2F5SWQ7XG4gICAgICAgIHRoaXMuYmFja3VwU2V0SWQgPSBwcm9wcy5iYWNrdXBTZXRJZDtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbkVuZHBvaW50RGF0YWJhc2VOYW1lID0gcHJvcHMuZGVzdGluYXRpb25FbmRwb2ludERhdGFiYXNlTmFtZTtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbkVuZHBvaW50SW5zdGFuY2VJZCA9IHByb3BzLmRlc3RpbmF0aW9uRW5kcG9pbnRJbnN0YW5jZUlkO1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uRW5kcG9pbnRJcCA9IHByb3BzLmRlc3RpbmF0aW9uRW5kcG9pbnRJcDtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbkVuZHBvaW50T3JhY2xlU2lkID0gcHJvcHMuZGVzdGluYXRpb25FbmRwb2ludE9yYWNsZVNpZDtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbkVuZHBvaW50UGFzc3dvcmQgPSBwcm9wcy5kZXN0aW5hdGlvbkVuZHBvaW50UGFzc3dvcmQ7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb25FbmRwb2ludFBvcnQgPSBwcm9wcy5kZXN0aW5hdGlvbkVuZHBvaW50UG9ydDtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbkVuZHBvaW50UmVnaW9uID0gcHJvcHMuZGVzdGluYXRpb25FbmRwb2ludFJlZ2lvbjtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbkVuZHBvaW50VXNlck5hbWUgPSBwcm9wcy5kZXN0aW5hdGlvbkVuZHBvaW50VXNlck5hbWU7XG4gICAgICAgIHRoaXMuZHVwbGljYXRlQ29uZmxpY3QgPSBwcm9wcy5kdXBsaWNhdGVDb25mbGljdDtcbiAgICAgICAgdGhpcy5yZXN0b3JlRGlyID0gcHJvcHMucmVzdG9yZURpcjtcbiAgICAgICAgdGhpcy5yZXN0b3JlSG9tZSA9IHByb3BzLnJlc3RvcmVIb21lO1xuICAgICAgICB0aGlzLnJlc3RvcmVPYmplY3RzID0gcHJvcHMucmVzdG9yZU9iamVjdHM7XG4gICAgICAgIHRoaXMucmVzdG9yZVRpbWUgPSBwcm9wcy5yZXN0b3JlVGltZTtcbiAgICAgICAgdGhpcy5zdGFydFRhc2sgPSBwcm9wcy5zdGFydFRhc2s7XG4gICAgfVxuXG5cbiAgICBwcm90ZWN0ZWQgZ2V0IHJvc1Byb3BlcnRpZXMoKTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSAge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYmFja3VwUGxhbklkOiB0aGlzLmJhY2t1cFBsYW5JZCxcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uRW5kcG9pbnRJbnN0YW5jZVR5cGU6IHRoaXMuZGVzdGluYXRpb25FbmRwb2ludEluc3RhbmNlVHlwZSxcbiAgICAgICAgICAgIHJlc3RvcmVUYXNrTmFtZTogdGhpcy5yZXN0b3JlVGFza05hbWUsXG4gICAgICAgICAgICBiYWNrdXBHYXRld2F5SWQ6IHRoaXMuYmFja3VwR2F0ZXdheUlkLFxuICAgICAgICAgICAgYmFja3VwU2V0SWQ6IHRoaXMuYmFja3VwU2V0SWQsXG4gICAgICAgICAgICBkZXN0aW5hdGlvbkVuZHBvaW50RGF0YWJhc2VOYW1lOiB0aGlzLmRlc3RpbmF0aW9uRW5kcG9pbnREYXRhYmFzZU5hbWUsXG4gICAgICAgICAgICBkZXN0aW5hdGlvbkVuZHBvaW50SW5zdGFuY2VJZDogdGhpcy5kZXN0aW5hdGlvbkVuZHBvaW50SW5zdGFuY2VJZCxcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uRW5kcG9pbnRJcDogdGhpcy5kZXN0aW5hdGlvbkVuZHBvaW50SXAsXG4gICAgICAgICAgICBkZXN0aW5hdGlvbkVuZHBvaW50T3JhY2xlU2lkOiB0aGlzLmRlc3RpbmF0aW9uRW5kcG9pbnRPcmFjbGVTaWQsXG4gICAgICAgICAgICBkZXN0aW5hdGlvbkVuZHBvaW50UGFzc3dvcmQ6IHRoaXMuZGVzdGluYXRpb25FbmRwb2ludFBhc3N3b3JkLFxuICAgICAgICAgICAgZGVzdGluYXRpb25FbmRwb2ludFBvcnQ6IHRoaXMuZGVzdGluYXRpb25FbmRwb2ludFBvcnQsXG4gICAgICAgICAgICBkZXN0aW5hdGlvbkVuZHBvaW50UmVnaW9uOiB0aGlzLmRlc3RpbmF0aW9uRW5kcG9pbnRSZWdpb24sXG4gICAgICAgICAgICBkZXN0aW5hdGlvbkVuZHBvaW50VXNlck5hbWU6IHRoaXMuZGVzdGluYXRpb25FbmRwb2ludFVzZXJOYW1lLFxuICAgICAgICAgICAgZHVwbGljYXRlQ29uZmxpY3Q6IHRoaXMuZHVwbGljYXRlQ29uZmxpY3QsXG4gICAgICAgICAgICByZXN0b3JlRGlyOiB0aGlzLnJlc3RvcmVEaXIsXG4gICAgICAgICAgICByZXN0b3JlSG9tZTogdGhpcy5yZXN0b3JlSG9tZSxcbiAgICAgICAgICAgIHJlc3RvcmVPYmplY3RzOiB0aGlzLnJlc3RvcmVPYmplY3RzLFxuICAgICAgICAgICAgcmVzdG9yZVRpbWU6IHRoaXMucmVzdG9yZVRpbWUsXG4gICAgICAgICAgICBzdGFydFRhc2s6IHRoaXMuc3RhcnRUYXNrLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgcmVuZGVyUHJvcGVydGllcyhwcm9wczoge1trZXk6IHN0cmluZ106IGFueX0pOiB7IFtrZXk6IHN0cmluZ106IGFueSB9ICB7XG4gICAgICAgIHJldHVybiByb3NSZXN0b3JlVGFza1Byb3BzVG9Sb3NUZW1wbGF0ZShwcm9wcywgdGhpcy5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgfVxufVxuIl19