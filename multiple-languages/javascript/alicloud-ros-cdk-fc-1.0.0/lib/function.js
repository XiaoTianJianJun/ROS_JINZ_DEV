"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Function = exports.FunctionProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const fc_generated_1 = require("./fc.generated");
Object.defineProperty(exports, "FunctionProperty", { enumerable: true, get: function () { return fc_generated_1.RosFunction; } });
/**
 * A ROS resource type:  `ALIYUN::FC::Function`
 */
class Function extends ros.Resource {
    /**
     * Create a new `ALIYUN::FC::Function`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosFunction = new fc_generated_1.RosFunction(this, id, {
            memorySize: props.memorySize ? props.memorySize : 128,
            description: props.description,
            timeout: props.timeout ? props.timeout : 3,
            handler: props.handler,
            customContainerConfig: props.customContainerConfig,
            code: props.code,
            asyncConfiguration: props.asyncConfiguration,
            functionName: props.functionName,
            caPort: props.caPort ? props.caPort : 9000,
            runtime: props.runtime,
            environmentVariables: props.environmentVariables,
            initializer: props.initializer,
            serviceName: props.serviceName,
            initializationTimeout: props.initializationTimeout,
            instanceConcurrency: props.instanceConcurrency,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosFunction;
        this.attrArn = rosFunction.attrArn;
        this.attrFunctionId = rosFunction.attrFunctionId;
        this.attrFunctionName = rosFunction.attrFunctionName;
        this.attrServiceName = rosFunction.attrServiceName;
    }
}
exports.Function = Function;
//# sourceMappingURL=data:application/json;base64,