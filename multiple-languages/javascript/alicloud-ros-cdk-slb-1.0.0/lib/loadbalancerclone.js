"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoadBalancerClone = exports.LoadBalancerCloneProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const slb_generated_1 = require("./slb.generated");
Object.defineProperty(exports, "LoadBalancerCloneProperty", { enumerable: true, get: function () { return slb_generated_1.RosLoadBalancerClone; } });
/**
 * A ROS resource type:  `ALIYUN::SLB::LoadBalancerClone`
 */
class LoadBalancerClone extends ros.Resource {
    /**
     * Create a new `ALIYUN::SLB::LoadBalancerClone`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosLoadBalancerClone = new slb_generated_1.RosLoadBalancerClone(this, id, {
            loadBalancerName: props.loadBalancerName,
            sourceLoadBalancerId: props.sourceLoadBalancerId,
            resourceGroupId: props.resourceGroupId,
            tagsPolicy: props.tagsPolicy ? props.tagsPolicy : 'empty',
            vSwitchId: props.vSwitchId,
            backendServers: props.backendServers,
            tags: ros.tagFactory(props.tags),
            backendServersPolicy: props.backendServersPolicy ? props.backendServersPolicy : 'clone',
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosLoadBalancerClone;
        this.attrLoadBalancerId = rosLoadBalancerClone.attrLoadBalancerId;
    }
}
exports.LoadBalancerClone = LoadBalancerClone;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGJhbGFuY2VyY2xvbmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsb2FkYmFsYW5jZXJjbG9uZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQXVEO0FBRXRCLDBHQUZ4QixvQ0FBb0IsT0FFNkI7QUFpRDFEOztHQUVHO0FBQ0gsTUFBYSxpQkFBa0IsU0FBUSxHQUFHLENBQUMsUUFBUTtJQVkvQzs7Ozs7O09BTUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQTZCLEVBQUUsbUNBQTJDLElBQUk7UUFDeEgsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLG9CQUFvQixHQUFHLElBQUksb0NBQW9CLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUM3RCxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsZ0JBQWdCO1lBQ3hDLG9CQUFvQixFQUFFLEtBQUssQ0FBQyxvQkFBb0I7WUFDaEQsZUFBZSxFQUFFLEtBQUssQ0FBQyxlQUFlO1lBQ3RDLFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxPQUFPO1lBQ3pELFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztZQUMxQixjQUFjLEVBQUUsS0FBSyxDQUFDLGNBQWM7WUFDcEMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztZQUNoQyxvQkFBb0IsRUFBRSxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsT0FBTztTQUMxRixFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLG9CQUFvQixDQUFDO1FBQ3JDLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxvQkFBb0IsQ0FBQyxrQkFBa0IsQ0FBQztJQUN0RSxDQUFDO0NBQ0o7QUFuQ0QsOENBbUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zTG9hZEJhbGFuY2VyQ2xvbmUgfSBmcm9tICcuL3NsYi5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NMb2FkQmFsYW5jZXJDbG9uZSBhcyBMb2FkQmFsYW5jZXJDbG9uZVByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgQUxJWVVOOjpTTEI6OkxvYWRCYWxhbmNlckNsb25lYFxuICovXG5leHBvcnQgaW50ZXJmYWNlIExvYWRCYWxhbmNlckNsb25lUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHNvdXJjZUxvYWRCYWxhbmNlcklkOiBTb3VyY2UgbG9hZCBiYWxhbmNlciBpZCB0byBjbG9uZVxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNvdXJjZUxvYWRCYWxhbmNlcklkOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgYmFja2VuZFNlcnZlcnM6IFRoZSBsaXN0IG9mIEVDUyBpbnN0YW5jZSwgd2hpY2ggd2lsbCBhdHRhY2hlZCB0byBsb2FkIGJhbGFuY2VyLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGJhY2tlbmRTZXJ2ZXJzPzogQXJyYXk8Um9zTG9hZEJhbGFuY2VyQ2xvbmUuQmFja2VuZFNlcnZlcnNQcm9wZXJ0eSB8IHJvcy5JUmVzb2x2YWJsZT4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgYmFja2VuZFNlcnZlcnNQb2xpY3k6IFNvbHV0aW9uIGZvciBoYW5kbGUgdGhlIGJhY2tlbmQgc2VydmVyIGFuZCB3ZWlnaHRzLiBJZiBzZWxlY3QgJ2Nsb25lJywgaXQgd2lsbCBjbG9uZSBmcm9tIHNvdXJjZSBsb2FkIGJhbGFuY2VyLiBJZiBzZWxlY3QgJ2VtcHR5JyBpdCB3aWxsIG5vdCBhdHRhY2ggYW55IGJhY2tlbmQgc2VydmVycy4gSWYgc2VsZWN0ICdhcHBlbmQnIGl0IHdpbGwgYXBwZW5kIHRoZSBuZXcgYmFja2VuZCBzZXJ2ZXIgbGlzdCB0byBzb3VyY2UgYmFja2VkIHNlcnZlcnMuIElmIHNlbGVjdCAncmVwbGFjZScgaXQgd2lsbCBvbmx5IGF0dGFjaCBuZXcgYmFja2VuZCBzZXJ2ZXIgbGlzdC4gRGVmYXVsdCBpcyAnY2xvbmUnLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGJhY2tlbmRTZXJ2ZXJzUG9saWN5Pzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGxvYWRCYWxhbmNlck5hbWU6IE5hbWUgb2YgY3JlYXRlZCBsb2FkIGJhbGFuY2VyLiBMZW5ndGggaXMgbGltaXRlZCB0byAxLTgwIGNoYXJhY3RlcnMsIGFsbG93ZWQgdG8gY29udGFpbiBsZXR0ZXJzLCBudW1iZXJzLCAnLSwgLywgXywuJyBXaGVuIG5vdCBzcGVjaWZpZWQsIGEgZGVmYXVsdCBuYW1lIHdpbGwgYmUgYXNzaWduZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbG9hZEJhbGFuY2VyTmFtZT86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSByZXNvdXJjZUdyb3VwSWQ6IFJlc291cmNlIGdyb3VwIGlkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJlc291cmNlR3JvdXBJZD86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSB0YWdzOiBUYWdzIHRvIGF0dGFjaCB0byBzbGIuIE1heCBzdXBwb3J0IDUgdGFncyB0byBhZGQgZHVyaW5nIGNyZWF0ZSBzbGIuIEVhY2ggdGFnIHdpdGggdHdvIHByb3BlcnRpZXMgS2V5IGFuZCBWYWx1ZSwgYW5kIEtleSBpcyByZXF1aXJlZC5cbiAgICAgKi9cbiAgICByZWFkb25seSB0YWdzPzogeyBba2V5OiBzdHJpbmddOiBhbnkgfVtdO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHRhZ3NQb2xpY3k6IFNvbHV0aW9uIGZvciBoYW5kbGUgdGhlIHRhZ3MuIElmIHNlbGVjdCAnY2xvbmUnLCBpdCB3aWxsIGNsb25lIGZyb20gc291cmNlIGxvYWQgYmFsYW5jZXIuIElmIHNlbGVjdCAnZW1wdHknIGl0IHdpbGwgbm90IGNvcHB5IHRhZ3MuIElmIHNlbGVjdCAnYXBwZW5kJyBpdCB3aWxsIGFwcGVuZCB0aGUgbmV3IHRhZ3MuIElmIHNlbGVjdCAncmVwbGFjZScgaXQgd2lsbCBhZGQgbmV3IHRhZ3MuXG4gICAgICogRGVmYXVsdCBpcyAnZW1wdHknLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHRhZ3NQb2xpY3k/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgdlN3aXRjaElkOiBUaGUgbmV3IFZTd2l0Y2ggSUQgdG8gY3JlYXRlIGxvYWQgYmFsYW5jZXIgaW5zdGFuY2UuIEZvciBWUEMgbmV0d29yayBvbmx5IGFuZCB0aGUgVlN3aXRjaCBzaG91bGQgYmVsb25nIHRvIHRoZSBWUEMgd2hpY2ggc291cmNlIGxvYWQgYmFsYW5jZXIgaXMgbG9jYXRlZC5XaGVuIG5vdCBzcGVjaWZpZWQsIHNvdXJjZSBsb2FkIGJhbGFuY2VyIFZTd2l0Y2ggSUQgd2lsbCBiZSB1c2VkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHZTd2l0Y2hJZD86IHN0cmluZztcbn1cblxuLyoqXG4gKiBBIFJPUyByZXNvdXJjZSB0eXBlOiAgYEFMSVlVTjo6U0xCOjpMb2FkQmFsYW5jZXJDbG9uZWBcbiAqL1xuZXhwb3J0IGNsYXNzIExvYWRCYWxhbmNlckNsb25lIGV4dGVuZHMgcm9zLlJlc291cmNlIHtcblxuICAgIC8qKlxuICAgICAqIEEgZmFjdG9yeSBtZXRob2QgdGhhdCBjcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIHRoaXMgY2xhc3MgZnJvbSBhbiBvYmplY3RcbiAgICAgKiBjb250YWluaW5nIHRoZSBwcm9wZXJ0aWVzIG9mIHRoaXMgUk9TIHJlc291cmNlLCB3aGljaCB3aWxsIGJlIGFzc2lnbmVkIHRvIFJPUyByZXNvdXJjZS5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBBdHRyaWJ1dGUgTG9hZEJhbGFuY2VySWQ6IFRoZSBpZCBvZiBsb2FkIGJhbGFuY2UgZ2VuZXJhdGVkXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJMb2FkQmFsYW5jZXJJZDogYW55O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGBBTElZVU46OlNMQjo6TG9hZEJhbGFuY2VyQ2xvbmVgLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogQHBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIEBwYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IExvYWRCYWxhbmNlckNsb25lUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAgICAgY29uc3Qgcm9zTG9hZEJhbGFuY2VyQ2xvbmUgPSBuZXcgUm9zTG9hZEJhbGFuY2VyQ2xvbmUodGhpcywgaWQsICB7XG4gICAgICAgICAgICBsb2FkQmFsYW5jZXJOYW1lOiBwcm9wcy5sb2FkQmFsYW5jZXJOYW1lLFxuICAgICAgICAgICAgc291cmNlTG9hZEJhbGFuY2VySWQ6IHByb3BzLnNvdXJjZUxvYWRCYWxhbmNlcklkLFxuICAgICAgICAgICAgcmVzb3VyY2VHcm91cElkOiBwcm9wcy5yZXNvdXJjZUdyb3VwSWQsXG4gICAgICAgICAgICB0YWdzUG9saWN5OiBwcm9wcy50YWdzUG9saWN5ID8gcHJvcHMudGFnc1BvbGljeSA6ICdlbXB0eScsXG4gICAgICAgICAgICB2U3dpdGNoSWQ6IHByb3BzLnZTd2l0Y2hJZCxcbiAgICAgICAgICAgIGJhY2tlbmRTZXJ2ZXJzOiBwcm9wcy5iYWNrZW5kU2VydmVycyxcbiAgICAgICAgICAgIHRhZ3M6IHJvcy50YWdGYWN0b3J5KHByb3BzLnRhZ3MpLFxuICAgICAgICAgICAgYmFja2VuZFNlcnZlcnNQb2xpY3k6IHByb3BzLmJhY2tlbmRTZXJ2ZXJzUG9saWN5ID8gcHJvcHMuYmFja2VuZFNlcnZlcnNQb2xpY3kgOiAnY2xvbmUnLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0xvYWRCYWxhbmNlckNsb25lO1xuICAgICAgICB0aGlzLmF0dHJMb2FkQmFsYW5jZXJJZCA9IHJvc0xvYWRCYWxhbmNlckNsb25lLmF0dHJMb2FkQmFsYW5jZXJJZDtcbiAgICB9XG59XG4iXX0=