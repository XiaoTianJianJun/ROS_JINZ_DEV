"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Listener = exports.ListenerProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const slb_generated_1 = require("./slb.generated");
Object.defineProperty(exports, "ListenerProperty", { enumerable: true, get: function () { return slb_generated_1.RosListener; } });
/**
 * A ROS resource type:  `ALIYUN::SLB::Listener`
 */
class Listener extends ros.Resource {
    /**
     * Create a new `ALIYUN::SLB::Listener`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosListener = new slb_generated_1.RosListener(this, id, {
            requestTimeout: props.requestTimeout,
            listenerPort: props.listenerPort,
            vServerGroupId: props.vServerGroupId,
            caCertificateId: props.caCertificateId,
            scheduler: props.scheduler ? props.scheduler : 'wrr',
            aclId: props.aclId,
            healthCheck: props.healthCheck,
            idleTimeout: props.idleTimeout,
            loadBalancerId: props.loadBalancerId,
            backendServerPort: props.backendServerPort,
            persistence: props.persistence,
            aclStatus: props.aclStatus ? props.aclStatus : 'off',
            bandwidth: props.bandwidth,
            masterSlaveServerGroupId: props.masterSlaveServerGroupId,
            serverCertificateId: props.serverCertificateId,
            httpConfig: props.httpConfig,
            aclType: props.aclType,
            protocol: props.protocol,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosListener;
        this.attrListenerPortsAndProtocol = rosListener.attrListenerPortsAndProtocol;
        this.attrLoadBalancerId = rosListener.attrLoadBalancerId;
    }
}
exports.Listener = Listener;
//# sourceMappingURL=data:application/json;base64,