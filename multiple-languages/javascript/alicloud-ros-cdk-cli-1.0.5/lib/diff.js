"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.printStackDiff = void 0;
const cxschema = require("@alicloud/ros-cdk-assembly-schema");
const rosDiff = require("@alicloud/ros-cdk-template-diff");
const colors = require("colors/safe");
const logging_1 = require("./logging");
/**
 * Pretty-prints the differences between two template states to the console.
 *
 * @param oldTemplate the old/current state of the stack.
 * @param newTemplate the new/target state of the stack.
 * @param strict      do not filter out ALIYUN::CDK::Metadata
 * @param context     lines of context to use in arbitrary JSON diff
 *
 * @returns the count of differences that were rendered.
 */
function printStackDiff(oldTemplate, newTemplate, context, stream) {
    const diff = rosDiff.diffTemplate(oldTemplate, newTemplate.template);
    if (!diff.isEmpty) {
        rosDiff.formatDifferences(stream || process.stderr, diff, buildLogicalToPathMap(newTemplate), context);
    }
    else {
        logging_1.print(colors.green('There were no differences'));
    }
    return diff.differenceCount;
}
exports.printStackDiff = printStackDiff;
function buildLogicalToPathMap(stack) {
    const map = {};
    for (const md of stack.findMetadataByType(cxschema.ArtifactMetadataEntryType.LOGICAL_ID)) {
        map[md.data] = md.path;
    }
    return map;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlmZi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRpZmYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOERBQThEO0FBQzlELDJEQUEyRDtBQUczRCxzQ0FBc0M7QUFDdEMsdUNBQWtDO0FBRWxDOzs7Ozs7Ozs7R0FTRztBQUNILFNBQWdCLGNBQWMsQ0FDNUIsV0FBZ0IsRUFDaEIsV0FBbUMsRUFDbkMsT0FBZSxFQUNmLE1BQTZCO0lBRTdCLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUVyRSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtRQUNqQixPQUFPLENBQUMsaUJBQWlCLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLHFCQUFxQixDQUFDLFdBQVcsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQ3hHO1NBQU07UUFDTCxlQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQywyQkFBMkIsQ0FBQyxDQUFDLENBQUM7S0FDbEQ7SUFFRCxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUM7QUFDOUIsQ0FBQztBQWZELHdDQWVDO0FBRUQsU0FBUyxxQkFBcUIsQ0FBQyxLQUE2QjtJQUMxRCxNQUFNLEdBQUcsR0FBNkIsRUFBRSxDQUFDO0lBQ3pDLEtBQUssTUFBTSxFQUFFLElBQUksS0FBSyxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyx5QkFBeUIsQ0FBQyxVQUFVLENBQUMsRUFBRTtRQUN4RixHQUFHLENBQUMsRUFBRSxDQUFDLElBQWMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUM7S0FDbEM7SUFDRCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjeHNjaGVtYSBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1hc3NlbWJseS1zY2hlbWEnO1xyXG5pbXBvcnQgKiBhcyByb3NEaWZmIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLXRlbXBsYXRlLWRpZmYnO1xyXG5cclxuaW1wb3J0ICogYXMgY3hhcGkgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY3hhcGknO1xyXG5pbXBvcnQgKiBhcyBjb2xvcnMgZnJvbSAnY29sb3JzL3NhZmUnO1xyXG5pbXBvcnQgeyBwcmludCB9IGZyb20gJy4vbG9nZ2luZyc7XHJcblxyXG4vKipcclxuICogUHJldHR5LXByaW50cyB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiB0d28gdGVtcGxhdGUgc3RhdGVzIHRvIHRoZSBjb25zb2xlLlxyXG4gKlxyXG4gKiBAcGFyYW0gb2xkVGVtcGxhdGUgdGhlIG9sZC9jdXJyZW50IHN0YXRlIG9mIHRoZSBzdGFjay5cclxuICogQHBhcmFtIG5ld1RlbXBsYXRlIHRoZSBuZXcvdGFyZ2V0IHN0YXRlIG9mIHRoZSBzdGFjay5cclxuICogQHBhcmFtIHN0cmljdCAgICAgIGRvIG5vdCBmaWx0ZXIgb3V0IEFMSVlVTjo6Q0RLOjpNZXRhZGF0YVxyXG4gKiBAcGFyYW0gY29udGV4dCAgICAgbGluZXMgb2YgY29udGV4dCB0byB1c2UgaW4gYXJiaXRyYXJ5IEpTT04gZGlmZlxyXG4gKlxyXG4gKiBAcmV0dXJucyB0aGUgY291bnQgb2YgZGlmZmVyZW5jZXMgdGhhdCB3ZXJlIHJlbmRlcmVkLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHByaW50U3RhY2tEaWZmKFxyXG4gIG9sZFRlbXBsYXRlOiBhbnksXHJcbiAgbmV3VGVtcGxhdGU6IGN4YXBpLlJvc1N0YWNrQXJ0aWZhY3QsXHJcbiAgY29udGV4dDogbnVtYmVyLFxyXG4gIHN0cmVhbT86IHJvc0RpZmYuRm9ybWF0U3RyZWFtLFxyXG4pOiBudW1iZXIge1xyXG4gIGNvbnN0IGRpZmYgPSByb3NEaWZmLmRpZmZUZW1wbGF0ZShvbGRUZW1wbGF0ZSwgbmV3VGVtcGxhdGUudGVtcGxhdGUpO1xyXG5cclxuICBpZiAoIWRpZmYuaXNFbXB0eSkge1xyXG4gICAgcm9zRGlmZi5mb3JtYXREaWZmZXJlbmNlcyhzdHJlYW0gfHwgcHJvY2Vzcy5zdGRlcnIsIGRpZmYsIGJ1aWxkTG9naWNhbFRvUGF0aE1hcChuZXdUZW1wbGF0ZSksIGNvbnRleHQpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBwcmludChjb2xvcnMuZ3JlZW4oJ1RoZXJlIHdlcmUgbm8gZGlmZmVyZW5jZXMnKSk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gZGlmZi5kaWZmZXJlbmNlQ291bnQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGJ1aWxkTG9naWNhbFRvUGF0aE1hcChzdGFjazogY3hhcGkuUm9zU3RhY2tBcnRpZmFjdCkge1xyXG4gIGNvbnN0IG1hcDogeyBbaWQ6IHN0cmluZ106IHN0cmluZyB9ID0ge307XHJcbiAgZm9yIChjb25zdCBtZCBvZiBzdGFjay5maW5kTWV0YWRhdGFCeVR5cGUoY3hzY2hlbWEuQXJ0aWZhY3RNZXRhZGF0YUVudHJ5VHlwZS5MT0dJQ0FMX0lEKSkge1xyXG4gICAgbWFwW21kLmRhdGEgYXMgc3RyaW5nXSA9IG1kLnBhdGg7XHJcbiAgfVxyXG4gIHJldHVybiBtYXA7XHJcbn1cclxuIl19