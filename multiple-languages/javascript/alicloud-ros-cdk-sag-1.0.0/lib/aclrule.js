"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ACLRule = exports.ACLRuleProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const sag_generated_1 = require("./sag.generated");
Object.defineProperty(exports, "ACLRuleProperty", { enumerable: true, get: function () { return sag_generated_1.RosACLRule; } });
/**
 * A ROS resource type:  `ALIYUN::SAG::ACLRule`
 */
class ACLRule extends ros.Resource {
    /**
     * Create a new `ALIYUN::SAG::ACLRule`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosACLRule = new sag_generated_1.RosACLRule(this, id, {
            policy: props.policy,
            description: props.description,
            destCidr: props.destCidr,
            sourcePortRange: props.sourcePortRange,
            sourceCidr: props.sourceCidr,
            priority: props.priority ? props.priority : 1,
            aclId: props.aclId,
            ipProtocol: props.ipProtocol,
            destPortRange: props.destPortRange,
            direction: props.direction,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosACLRule;
        this.attrAcrId = rosACLRule.attrAcrId;
    }
}
exports.ACLRule = ACLRule;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNscnVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFjbHJ1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUE2QztBQUV0QixnR0FGZCwwQkFBVSxPQUVtQjtBQTREdEM7O0dBRUc7QUFDSCxNQUFhLE9BQVEsU0FBUSxHQUFHLENBQUMsUUFBUTtJQVlyQzs7Ozs7O09BTUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQW1CLEVBQUUsbUNBQTJDLElBQUk7UUFDOUcsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLFVBQVUsR0FBRyxJQUFJLDBCQUFVLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUN6QyxNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU07WUFDcEIsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtZQUN4QixlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQzVCLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzdDLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSztZQUNsQixVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVU7WUFDNUIsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhO1lBQ2xDLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztTQUM3QixFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLFVBQVUsQ0FBQztRQUMzQixJQUFJLENBQUMsU0FBUyxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUM7SUFDMUMsQ0FBQztDQUNKO0FBckNELDBCQXFDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc0FDTFJ1bGUgfSBmcm9tICcuL3NhZy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NBQ0xSdWxlIGFzIEFDTFJ1bGVQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYEFMSVlVTjo6U0FHOjpBQ0xSdWxlYFxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFDTFJ1bGVQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgYWNsSWQ6IEFjY2VzcyBjb250cm9sIElELlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGFjbElkOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgZGVzdENpZHI6IERlc3RpbmF0aW9uIGFkZHJlc3MsIENJRFIgZm9ybWF0IGFuZCBJUCBhZGRyZXNzIHJhbmdlIGluIElQdjQgZm9ybWF0LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRlc3RDaWRyOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgZGVzdFBvcnRSYW5nZTogRGVzdGluYXRpb24gcG9ydCByYW5nZSwgODAvODAuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVzdFBvcnRSYW5nZTogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGRpcmVjdGlvbjogUmVndWxhciBkaXJlY3Rpb24uXG4gICAgICogVmFsdWU6IGlufG91dFxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRpcmVjdGlvbjogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGlwUHJvdG9jb2w6IFByb3RvY29sLCBub3QgY2FzZSBzZW5zaXRpdmUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaXBQcm90b2NvbDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHBvbGljeTogQWNjZXNzOiBhY2NlcHR8ZHJvcFxuICAgICAqL1xuICAgIHJlYWRvbmx5IHBvbGljeTogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHNvdXJjZUNpZHI6IFNvdXJjZSBhZGRyZXNzLCBDSURSIGZvcm1hdCBhbmQgSVAgYWRkcmVzcyByYW5nZSBpbiBJUHY0IGZvcm1hdC5cbiAgICAgKi9cbiAgICByZWFkb25seSBzb3VyY2VDaWRyOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgc291cmNlUG9ydFJhbmdlOiBTb3VyY2UgcG9ydCByYW5nZSwgODAvODAuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc291cmNlUG9ydFJhbmdlOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgZGVzY3JpcHRpb246IFJ1bGUgZGVzY3JpcHRpb24gaW5mb3JtYXRpb24sIHJhbmdpbmcgZnJvbSAxIHRvIDUxMiBjaGFyYWN0ZXJzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHByaW9yaXR5OiBQcmlvcml0eSwgcmFuZ2luZyBmcm9tIDEgdG8gMTAwLlxuICAgICAqIERlZmF1bHQ6IDFcbiAgICAgKi9cbiAgICByZWFkb25seSBwcmlvcml0eT86IG51bWJlcjtcbn1cblxuLyoqXG4gKiBBIFJPUyByZXNvdXJjZSB0eXBlOiAgYEFMSVlVTjo6U0FHOjpBQ0xSdWxlYFxuICovXG5leHBvcnQgY2xhc3MgQUNMUnVsZSBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBIGZhY3RvcnkgbWV0aG9kIHRoYXQgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGZyb20gYW4gb2JqZWN0XG4gICAgICogY29udGFpbmluZyB0aGUgcHJvcGVydGllcyBvZiB0aGlzIFJPUyByZXNvdXJjZSwgd2hpY2ggd2lsbCBiZSBhc3NpZ25lZCB0byBST1MgcmVzb3VyY2UuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAQXR0cmlidXRlIEFjcklkOiBBY2Nlc3MgY29udHJvbCBydWxlIElELlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQWNySWQ6IGFueTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBgQUxJWVVOOjpTQUc6OkFDTFJ1bGVgLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogQHBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIEBwYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IEFDTFJ1bGVQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NBQ0xSdWxlID0gbmV3IFJvc0FDTFJ1bGUodGhpcywgaWQsICB7XG4gICAgICAgICAgICBwb2xpY3k6IHByb3BzLnBvbGljeSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBwcm9wcy5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgIGRlc3RDaWRyOiBwcm9wcy5kZXN0Q2lkcixcbiAgICAgICAgICAgIHNvdXJjZVBvcnRSYW5nZTogcHJvcHMuc291cmNlUG9ydFJhbmdlLFxuICAgICAgICAgICAgc291cmNlQ2lkcjogcHJvcHMuc291cmNlQ2lkcixcbiAgICAgICAgICAgIHByaW9yaXR5OiBwcm9wcy5wcmlvcml0eSA/IHByb3BzLnByaW9yaXR5IDogMSxcbiAgICAgICAgICAgIGFjbElkOiBwcm9wcy5hY2xJZCxcbiAgICAgICAgICAgIGlwUHJvdG9jb2w6IHByb3BzLmlwUHJvdG9jb2wsXG4gICAgICAgICAgICBkZXN0UG9ydFJhbmdlOiBwcm9wcy5kZXN0UG9ydFJhbmdlLFxuICAgICAgICAgICAgZGlyZWN0aW9uOiBwcm9wcy5kaXJlY3Rpb24sXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zQUNMUnVsZTtcbiAgICAgICAgdGhpcy5hdHRyQWNySWQgPSByb3NBQ0xSdWxlLmF0dHJBY3JJZDtcbiAgICB9XG59XG4iXX0=