"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SynchronizationJob = exports.SynchronizationJobProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const dts_generated_1 = require("./dts.generated");
Object.defineProperty(exports, "SynchronizationJobProperty", { enumerable: true, get: function () { return dts_generated_1.RosSynchronizationJob; } });
/**
 * A ROS resource type:  `ALIYUN::DTS::SynchronizationJob`
 */
class SynchronizationJob extends ros.Resource {
    /**
     * Create a new `ALIYUN::DTS::SynchronizationJob`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosSynchronizationJob = new dts_generated_1.RosSynchronizationJob(this, id, {
            synchronizationObjects: props.synchronizationObjects,
            period: props.period,
            payType: props.payType ? props.payType : 'Postpaid',
            topology: props.topology,
            sourceRegion: props.sourceRegion,
            dataInitialization: props.dataInitialization ? props.dataInitialization : true,
            destinationEndpoint: props.destinationEndpoint,
            networkType: props.networkType,
            sourceEndpoint: props.sourceEndpoint,
            usedTime: props.usedTime,
            structureInitialization: props.structureInitialization ? props.structureInitialization : true,
            synchronizationJobClass: props.synchronizationJobClass,
            destRegion: props.destRegion,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosSynchronizationJob;
        this.attrSynchronizationJobId = rosSynchronizationJob.attrSynchronizationJobId;
    }
}
exports.SynchronizationJob = SynchronizationJob;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3luY2hyb25pemF0aW9uam9iLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3luY2hyb25pemF0aW9uam9iLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBd0Q7QUFFdEIsMkdBRnpCLHFDQUFxQixPQUU4QjtBQWdGNUQ7O0dBRUc7QUFDSCxNQUFhLGtCQUFtQixTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBWWhEOzs7Ozs7T0FNRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBOEIsRUFBRSxtQ0FBMkMsSUFBSTtRQUN6SCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0scUJBQXFCLEdBQUcsSUFBSSxxQ0FBcUIsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQy9ELHNCQUFzQixFQUFFLEtBQUssQ0FBQyxzQkFBc0I7WUFDcEQsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNO1lBQ3BCLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxVQUFVO1lBQ25ELFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtZQUN4QixZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVk7WUFDaEMsa0JBQWtCLEVBQUUsS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLElBQUk7WUFDOUUsbUJBQW1CLEVBQUUsS0FBSyxDQUFDLG1CQUFtQjtZQUM5QyxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsY0FBYyxFQUFFLEtBQUssQ0FBQyxjQUFjO1lBQ3BDLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtZQUN4Qix1QkFBdUIsRUFBRSxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsSUFBSTtZQUM3Rix1QkFBdUIsRUFBRSxLQUFLLENBQUMsdUJBQXVCO1lBQ3RELFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVTtTQUMvQixFQUFFLGdDQUFnQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsUUFBUSxHQUFHLHFCQUFxQixDQUFDO1FBQ3RDLElBQUksQ0FBQyx3QkFBd0IsR0FBRyxxQkFBcUIsQ0FBQyx3QkFBd0IsQ0FBQztJQUNuRixDQUFDO0NBQ0o7QUF4Q0QsZ0RBd0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zU3luY2hyb25pemF0aW9uSm9iIH0gZnJvbSAnLi9kdHMuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zU3luY2hyb25pemF0aW9uSm9iIGFzIFN5bmNocm9uaXphdGlvbkpvYlByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgQUxJWVVOOjpEVFM6OlN5bmNocm9uaXphdGlvbkpvYmBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTeW5jaHJvbml6YXRpb25Kb2JQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgZGVzdGluYXRpb25FbmRwb2ludDogTWlncmF0aW9uIHRhcmdldCBjb25maWd1cmF0aW9uXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVzdGluYXRpb25FbmRwb2ludDogUm9zU3luY2hyb25pemF0aW9uSm9iLkRlc3RpbmF0aW9uRW5kcG9pbnRQcm9wZXJ0eSB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkZXN0UmVnaW9uOiBSZWdpb24gd2hlcmUgdGhlIHN5bmNocm9uaXphdGlvbiB0YXJnZXQgaW5zdGFuY2UgaXMgbG9jYXRlZC5cbiAgICAgKi9cbiAgICByZWFkb25seSBkZXN0UmVnaW9uOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgc291cmNlRW5kcG9pbnQ6IE1pZ3JhdGlvbiBzb3VyY2UgY29uZmlndXJhdGlvblxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNvdXJjZUVuZHBvaW50OiBSb3NTeW5jaHJvbml6YXRpb25Kb2IuU291cmNlRW5kcG9pbnRQcm9wZXJ0eSB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBzb3VyY2VSZWdpb246IFJlZ2lvbiB3aGVyZSB0aGUgc3luY2hyb25pemF0aW9uIHNvdXJjZSBpbnN0YW5jZSBpcyBsb2NhdGVkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNvdXJjZVJlZ2lvbjogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHN5bmNocm9uaXphdGlvbkpvYkNsYXNzOiBTeW5jaHJvbm91cyBpbnN0YW5jZSBzcGVjaWZpY2F0aW9ucywgd2hpY2ggY2FuIGJlOlxuICAgICAqIG1pY3JvLCBzbWFsbCwgbWVkaXVtLCBsYXJnZSBhbmQgc28gb24uIFRoZSBkZWZhdWx0IHZhbHVlIGlzOiBzbWFsbFxuICAgICAqL1xuICAgIHJlYWRvbmx5IHN5bmNocm9uaXphdGlvbkpvYkNsYXNzOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgZGF0YUluaXRpYWxpemF0aW9uOiBXaGV0aGVyIHRvIHBlcmZvcm0gZnVsbCBkYXRhIGluaXRpYWxpemF0aW9uIGJlZm9yZSBzeW5jaHJvbml6YXRpb24uIFRoZSB2YWx1ZXMgaW5jbHVkZTp0cnVlOiBtZWFucyBmdWxsIGRhdGEgaW5pdGlhbGl6YXRpb25cbiAgICAgKiBmYWxzZTogbm8gZnVsbCBkYXRhIGluaXRpYWxpemF0aW9uXG4gICAgICogVGhlIGRlZmF1bHQgdmFsdWUgaXM6IHRydWVcbiAgICAgKi9cbiAgICByZWFkb25seSBkYXRhSW5pdGlhbGl6YXRpb24/OiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IG5ldHdvcmtUeXBlOiBXaGVuIHN5bmNocm9uaXphdGlvbiBnZW9ncmFwaGllcywgdGhlIHR5cGUgb2YgZGF0YSB0cmFuc21pc3Npb24gbmV0d29yayB1c2VkLiBWYWx1ZSBpbmNsdWRlOiBJbnRlcm5ldCwgSW50cmFuZXQuIFRoZSBkZWZhdWx0IHZhbHVlIGlzOiBJbnRlcm5ldFxuICAgICAqL1xuICAgIHJlYWRvbmx5IG5ldHdvcmtUeXBlPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHBheVR5cGU6IFBheW1lbnQgdHlwZSwgd2hpY2ggaW5jbHVkZTpcbiAgICAgKiBQb3N0cGFpZDogcG9zdHBhaWQgdHlwZSwgUHJlcGFpZDogUHJlcGFpZCB0eXBlLiBEZWZhdWx0IGlzIFBvc3RwYWlkXG4gICAgICovXG4gICAgcmVhZG9ubHkgcGF5VHlwZT86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBwZXJpb2Q6IElmIHByZXBhaWQgcGF5bWVudCB0eXBlLCB0aGVuIHRoZSBwYXJhbWV0ZXJzIHNwZWNpZmllZCBpbiB0aGUgcHVyY2hhc2UgcGFja2FnZSBpbnN0YW5jZSBvciBpbnN0YW5jZXMgYXMgZXhhbXBsZXMgb2YgYSBtb250aGx5IHN1YnNjcmlwdGlvbiwgd2hpY2ggY2FuIGJlOlxuICAgICAqIFllYXI6IEFubnVhbCwgTW9udGg6IG1vbnRobHlcbiAgICAgKi9cbiAgICByZWFkb25seSBwZXJpb2Q/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgc3RydWN0dXJlSW5pdGlhbGl6YXRpb246IFdoZXRoZXIgdG8gaW5pdGlhbGl6ZSB0aGUgc3RydWN0dXJlIG9iamVjdCBiZWZvcmUgc3luY2hyb25pemF0aW9uLiBUaGUgdmFsdWVzIGluY2x1ZGU6dHJ1ZTogaW5kaWNhdGVzIHRoYXQgdGhlIHN0cnVjdHVyZSBvYmplY3QgaXMgaW5pdGlhbGl6ZWRcbiAgICAgKiBmYWxzZTogbm8gcmVzdWx0IG9iamVjdCBpbml0aWFsaXphdGlvblxuICAgICAqIFRoZSBkZWZhdWx0IHZhbHVlIGlzOiB0cnVlXG4gICAgICovXG4gICAgcmVhZG9ubHkgc3RydWN0dXJlSW5pdGlhbGl6YXRpb24/OiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHN5bmNocm9uaXphdGlvbk9iamVjdHM6IE9iamVjdHMgdGhhdCBuZWVkIHRvIGJlIHN5bmNocm9uaXplZFxuICAgICAqL1xuICAgIHJlYWRvbmx5IHN5bmNocm9uaXphdGlvbk9iamVjdHM/OiBBcnJheTxSb3NTeW5jaHJvbml6YXRpb25Kb2IuU3luY2hyb25pemF0aW9uT2JqZWN0c1Byb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSB0b3BvbG9neTogU3luY2hyb25vdXMgdG9wb2xvZ3ksIHRoZSB2YWx1ZSBpbmNsdWRlczogb25ld2F5LCBiaWRpcmVjdGlvbmFsLnRoZSBkZWZhdWx0IHZhbHVlIGlzOiBvbmV3YXksIG9ubHkgTXlTUUwtPiBNeVNRTCBzeW5jaHJvbml6YXRpb24sIHRoaXMgcGFyYW1ldGVyIGNhbiByZWNlaXZlIHRoZSB2YWx1ZSBiaWRpcmVjdGlvbmFsXG4gICAgICovXG4gICAgcmVhZG9ubHkgdG9wb2xvZ3k/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgdXNlZFRpbWU6IGYgdGhlIHBheW1lbnQgdHlwZSBpcyBwcmVwYWlkLCB0aGVuIHRoaXMgcGFyYW1ldGVyIGlzIHRoZSBsZW5ndGggb2YgdGhlIHB1cmNoYXNlLCBhbmQgcGFyYW1ldGVycyBzdWNoIGFzIDEsIDIsIDMgY2FuIGJlIHBhc3NlZCBpbiBhcyBuZWVkZWRcbiAgICAgKi9cbiAgICByZWFkb25seSB1c2VkVGltZT86IG51bWJlcjtcbn1cblxuLyoqXG4gKiBBIFJPUyByZXNvdXJjZSB0eXBlOiAgYEFMSVlVTjo6RFRTOjpTeW5jaHJvbml6YXRpb25Kb2JgXG4gKi9cbmV4cG9ydCBjbGFzcyBTeW5jaHJvbml6YXRpb25Kb2IgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuXG4gICAgLyoqXG4gICAgICogQSBmYWN0b3J5IG1ldGhvZCB0aGF0IGNyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcyBmcm9tIGFuIG9iamVjdFxuICAgICAqIGNvbnRhaW5pbmcgdGhlIHByb3BlcnRpZXMgb2YgdGhpcyBST1MgcmVzb3VyY2UsIHdoaWNoIHdpbGwgYmUgYXNzaWduZWQgdG8gUk9TIHJlc291cmNlLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQEF0dHJpYnV0ZSBTeW5jaHJvbml6YXRpb25Kb2JJZDogU3luY2hyb25pemF0aW9uIGluc3RhbmNlIElEXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJTeW5jaHJvbml6YXRpb25Kb2JJZDogYW55O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGBBTElZVU46OkRUUzo6U3luY2hyb25pemF0aW9uSm9iYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIEBwYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBAcGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBTeW5jaHJvbml6YXRpb25Kb2JQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NTeW5jaHJvbml6YXRpb25Kb2IgPSBuZXcgUm9zU3luY2hyb25pemF0aW9uSm9iKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgc3luY2hyb25pemF0aW9uT2JqZWN0czogcHJvcHMuc3luY2hyb25pemF0aW9uT2JqZWN0cyxcbiAgICAgICAgICAgIHBlcmlvZDogcHJvcHMucGVyaW9kLFxuICAgICAgICAgICAgcGF5VHlwZTogcHJvcHMucGF5VHlwZSA/IHByb3BzLnBheVR5cGUgOiAnUG9zdHBhaWQnLFxuICAgICAgICAgICAgdG9wb2xvZ3k6IHByb3BzLnRvcG9sb2d5LFxuICAgICAgICAgICAgc291cmNlUmVnaW9uOiBwcm9wcy5zb3VyY2VSZWdpb24sXG4gICAgICAgICAgICBkYXRhSW5pdGlhbGl6YXRpb246IHByb3BzLmRhdGFJbml0aWFsaXphdGlvbiA/IHByb3BzLmRhdGFJbml0aWFsaXphdGlvbiA6IHRydWUsXG4gICAgICAgICAgICBkZXN0aW5hdGlvbkVuZHBvaW50OiBwcm9wcy5kZXN0aW5hdGlvbkVuZHBvaW50LFxuICAgICAgICAgICAgbmV0d29ya1R5cGU6IHByb3BzLm5ldHdvcmtUeXBlLFxuICAgICAgICAgICAgc291cmNlRW5kcG9pbnQ6IHByb3BzLnNvdXJjZUVuZHBvaW50LFxuICAgICAgICAgICAgdXNlZFRpbWU6IHByb3BzLnVzZWRUaW1lLFxuICAgICAgICAgICAgc3RydWN0dXJlSW5pdGlhbGl6YXRpb246IHByb3BzLnN0cnVjdHVyZUluaXRpYWxpemF0aW9uID8gcHJvcHMuc3RydWN0dXJlSW5pdGlhbGl6YXRpb24gOiB0cnVlLFxuICAgICAgICAgICAgc3luY2hyb25pemF0aW9uSm9iQ2xhc3M6IHByb3BzLnN5bmNocm9uaXphdGlvbkpvYkNsYXNzLFxuICAgICAgICAgICAgZGVzdFJlZ2lvbjogcHJvcHMuZGVzdFJlZ2lvbixcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NTeW5jaHJvbml6YXRpb25Kb2I7XG4gICAgICAgIHRoaXMuYXR0clN5bmNocm9uaXphdGlvbkpvYklkID0gcm9zU3luY2hyb25pemF0aW9uSm9iLmF0dHJTeW5jaHJvbml6YXRpb25Kb2JJZDtcbiAgICB9XG59XG4iXX0=