"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosCluster = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosClusterProps`
 *
 * @param properties - the TypeScript properties of a `RosClusterProps`
 *
 * @returns the result of the validation.
 */
function RosClusterPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('diskType', ros.validateString)(properties.diskType));
    errors.collect(ros.propertyValidator('instanceCount', ros.requiredValidator)(properties.instanceCount));
    errors.collect(ros.propertyValidator('instanceCount', ros.validateNumber)(properties.instanceCount));
    errors.collect(ros.propertyValidator('privateSlbSpecification', ros.validateString)(properties.privateSlbSpecification));
    errors.collect(ros.propertyValidator('vpcId', ros.validateString)(properties.vpcId));
    errors.collect(ros.propertyValidator('clusterVersion', ros.requiredValidator)(properties.clusterVersion));
    errors.collect(ros.propertyValidator('clusterVersion', ros.validateString)(properties.clusterVersion));
    errors.collect(ros.propertyValidator('pubNetworkFlow', ros.validateString)(properties.pubNetworkFlow));
    errors.collect(ros.propertyValidator('clusterSpecification', ros.requiredValidator)(properties.clusterSpecification));
    errors.collect(ros.propertyValidator('clusterSpecification', ros.validateString)(properties.clusterSpecification));
    errors.collect(ros.propertyValidator('vSwitchId', ros.validateString)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('pubSlbSpecification', ros.validateString)(properties.pubSlbSpecification));
    errors.collect(ros.propertyValidator('clusterType', ros.requiredValidator)(properties.clusterType));
    errors.collect(ros.propertyValidator('clusterType', ros.validateString)(properties.clusterType));
    errors.collect(ros.propertyValidator('netType', ros.requiredValidator)(properties.netType));
    errors.collect(ros.propertyValidator('netType', ros.validateString)(properties.netType));
    return errors.wrap('supplied properties not correct for "RosClusterProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::MSE::Cluster` resource
 *
 * @param properties - the TypeScript properties of a `RosClusterProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::MSE::Cluster` resource.
 */
// @ts-ignore TS6133
function rosClusterPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosClusterPropsValidator(properties).assertSuccess();
    }
    return {
        ClusterSpecification: ros.stringToRosTemplate(properties.clusterSpecification),
        ClusterType: ros.stringToRosTemplate(properties.clusterType),
        ClusterVersion: ros.stringToRosTemplate(properties.clusterVersion),
        InstanceCount: ros.numberToRosTemplate(properties.instanceCount),
        NetType: ros.stringToRosTemplate(properties.netType),
        DiskType: ros.stringToRosTemplate(properties.diskType),
        PrivateSlbSpecification: ros.stringToRosTemplate(properties.privateSlbSpecification),
        PubNetworkFlow: ros.stringToRosTemplate(properties.pubNetworkFlow),
        PubSlbSpecification: ros.stringToRosTemplate(properties.pubSlbSpecification),
        VpcId: ros.stringToRosTemplate(properties.vpcId),
        VSwitchId: ros.stringToRosTemplate(properties.vSwitchId),
    };
}
/**
 * A ROS template type:  `ALIYUN::MSE::Cluster`
 */
class RosCluster extends ros.RosResource {
    /**
     * Create a new `ALIYUN::MSE::Cluster`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosCluster.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAclEntryList = ros.Token.asString(this.getAtt('AclEntryList'));
        this.attrAclId = ros.Token.asString(this.getAtt('AclId'));
        this.attrAppVersion = ros.Token.asString(this.getAtt('AppVersion'));
        this.attrClusterAliasName = ros.Token.asString(this.getAtt('ClusterAliasName'));
        this.attrClusterId = ros.Token.asString(this.getAtt('ClusterId'));
        this.attrClusterName = ros.Token.asString(this.getAtt('ClusterName'));
        this.attrClusterSpecification = ros.Token.asString(this.getAtt('ClusterSpecification'));
        this.attrClusterType = ros.Token.asString(this.getAtt('ClusterType'));
        this.attrClusterVersion = ros.Token.asString(this.getAtt('ClusterVersion'));
        this.attrCpu = ros.Token.asString(this.getAtt('Cpu'));
        this.attrDiskCapacity = ros.Token.asString(this.getAtt('DiskCapacity'));
        this.attrDiskType = ros.Token.asString(this.getAtt('DiskType'));
        this.attrHealthStatus = ros.Token.asString(this.getAtt('HealthStatus'));
        this.attrInitStatus = ros.Token.asString(this.getAtt('InitStatus'));
        this.attrInstanceCount = ros.Token.asString(this.getAtt('InstanceCount'));
        this.attrInstanceId = ros.Token.asString(this.getAtt('InstanceId'));
        this.attrInternetAddress = ros.Token.asString(this.getAtt('InternetAddress'));
        this.attrInternetDomain = ros.Token.asString(this.getAtt('InternetDomain'));
        this.attrInternetPort = ros.Token.asString(this.getAtt('InternetPort'));
        this.attrIntranetAddress = ros.Token.asString(this.getAtt('IntranetAddress'));
        this.attrIntranetDomain = ros.Token.asString(this.getAtt('IntranetDomain'));
        this.attrIntranetPort = ros.Token.asString(this.getAtt('IntranetPort'));
        this.attrMemoryCapacity = ros.Token.asString(this.getAtt('MemoryCapacity'));
        this.attrNetType = ros.Token.asString(this.getAtt('NetType'));
        this.attrOrderId = ros.Token.asString(this.getAtt('OrderId'));
        this.attrPayInfo = ros.Token.asString(this.getAtt('PayInfo'));
        this.attrPubNetworkFlow = ros.Token.asString(this.getAtt('PubNetworkFlow'));
        this.attrRegionId = ros.Token.asString(this.getAtt('RegionId'));
        this.attrVSwitchId = ros.Token.asString(this.getAtt('VSwitchId'));
        this.attrVpcId = ros.Token.asString(this.getAtt('VpcId'));
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.clusterSpecification = props.clusterSpecification;
        this.clusterType = props.clusterType;
        this.clusterVersion = props.clusterVersion;
        this.instanceCount = props.instanceCount;
        this.netType = props.netType;
        this.diskType = props.diskType;
        this.privateSlbSpecification = props.privateSlbSpecification;
        this.pubNetworkFlow = props.pubNetworkFlow;
        this.pubSlbSpecification = props.pubSlbSpecification;
        this.vpcId = props.vpcId;
        this.vSwitchId = props.vSwitchId;
    }
    get rosProperties() {
        return {
            clusterSpecification: this.clusterSpecification,
            clusterType: this.clusterType,
            clusterVersion: this.clusterVersion,
            instanceCount: this.instanceCount,
            netType: this.netType,
            diskType: this.diskType,
            privateSlbSpecification: this.privateSlbSpecification,
            pubNetworkFlow: this.pubNetworkFlow,
            pubSlbSpecification: this.pubSlbSpecification,
            vpcId: this.vpcId,
            vSwitchId: this.vSwitchId,
        };
    }
    renderProperties(props) {
        return rosClusterPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosCluster = RosCluster;
/**
 * The resource type name for this resource class.
 */
RosCluster.ROS_RESOURCE_TYPE_NAME = "ALIYUN::MSE::Cluster";
//# sourceMappingURL=data:application/json;base64,