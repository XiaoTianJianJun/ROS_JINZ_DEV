"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Instance = exports.InstanceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const gws_generated_1 = require("./gws.generated");
Object.defineProperty(exports, "InstanceProperty", { enumerable: true, get: function () { return gws_generated_1.RosInstance; } });
/**
 * A ROS resource type:  `ALIYUN::GWS::Instance`
 */
class Instance extends ros.Resource {
    /**
     * Create a new `ALIYUN::GWS::Instance`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosInstance = new gws_generated_1.RosInstance(this, id, {
            clusterId: props.clusterId,
            systemDiskSize: props.systemDiskSize,
            instanceChargeType: props.instanceChargeType,
            autoRenew: props.autoRenew,
            vSwitchId: props.vSwitchId,
            period: props.period,
            allocatePublicAddress: props.allocatePublicAddress,
            systemDiskCategory: props.systemDiskCategory,
            name: props.name,
            internetChargeType: props.internetChargeType,
            internetMaxBandwidthOut: props.internetMaxBandwidthOut,
            internetMaxBandwidthIn: props.internetMaxBandwidthIn,
            imageId: props.imageId,
            instanceType: props.instanceType,
            appList: props.appList,
            workMode: props.workMode,
            periodUnit: props.periodUnit,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosInstance;
        this.attrClusterId = rosInstance.attrClusterId;
        this.attrInstanceChargeType = rosInstance.attrInstanceChargeType;
        this.attrInstanceId = rosInstance.attrInstanceId;
        this.attrMaxBandwidthIn = rosInstance.attrMaxBandwidthIn;
        this.attrMaxBandwidthOut = rosInstance.attrMaxBandwidthOut;
        this.attrName = rosInstance.attrName;
    }
}
exports.Instance = Instance;
//# sourceMappingURL=data:application/json;base64,