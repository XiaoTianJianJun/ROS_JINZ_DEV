"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cluster = exports.ClusterProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ehpc_generated_1 = require("./ehpc.generated");
Object.defineProperty(exports, "ClusterProperty", { enumerable: true, get: function () { return ehpc_generated_1.RosCluster; } });
/**
 * A ROS resource type:  `ALIYUN::EHPC::Cluster`
 */
class Cluster extends ros.Resource {
    /**
     * Create a new `ALIYUN::EHPC::Cluster`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosCluster = new ehpc_generated_1.RosCluster(this, id, {
            imageOwnerAlias: props.imageOwnerAlias,
            volumeProtocol: props.volumeProtocol,
            ecsOrderComputeCount: props.ecsOrderComputeCount,
            description: props.description,
            securityGroupName: props.securityGroupName,
            autoRenew: props.autoRenew,
            computeSpotPriceLimit: props.computeSpotPriceLimit,
            name: props.name,
            volumeId: props.volumeId,
            volumeType: props.volumeType,
            deployMode: props.deployMode,
            postInstallScript: props.postInstallScript,
            imageId: props.imageId,
            password: props.password,
            autoRenewPeriod: props.autoRenewPeriod,
            keyPairName: props.keyPairName,
            remoteDirectory: props.remoteDirectory,
            sccClusterId: props.sccClusterId,
            ecsOrderLoginInstanceType: props.ecsOrderLoginInstanceType,
            zoneId: props.zoneId,
            jobQueue: props.jobQueue,
            ecsOrderLoginCount: props.ecsOrderLoginCount,
            vSwitchId: props.vSwitchId,
            securityGroupId: props.securityGroupId,
            period: props.period,
            schedulerType: props.schedulerType,
            computeSpotStrategy: props.computeSpotStrategy,
            accountType: props.accountType,
            ecsOrderManagerInstanceType: props.ecsOrderManagerInstanceType,
            ehpcVersion: props.ehpcVersion,
            volumeMountpoint: props.volumeMountpoint,
            ecsOrderManagerCount: props.ecsOrderManagerCount,
            ecsOrderComputeInstanceType: props.ecsOrderComputeInstanceType,
            haEnable: props.haEnable,
            osTag: props.osTag,
            ecsChargeType: props.ecsChargeType,
            application: props.application,
            periodUnit: props.periodUnit,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosCluster;
        this.attrClusterId = rosCluster.attrClusterId;
        this.attrEcsInfo = rosCluster.attrEcsInfo;
        this.attrName = rosCluster.attrName;
        this.attrSecurityGroupId = rosCluster.attrSecurityGroupId;
    }
}
exports.Cluster = Cluster;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2x1c3Rlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNsdXN0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLHFEQUE4QztBQUV2QixnR0FGZCwyQkFBVSxPQUVtQjtBQTJNdEM7O0dBRUc7QUFDSCxNQUFhLE9BQVEsU0FBUSxHQUFHLENBQUMsUUFBUTtJQTRCckM7Ozs7OztPQU1HO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUFtQixFQUFFLG1DQUEyQyxJQUFJO1FBQzlHLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxVQUFVLEdBQUcsSUFBSSwyQkFBVSxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDekMsZUFBZSxFQUFFLEtBQUssQ0FBQyxlQUFlO1lBQ3RDLGNBQWMsRUFBRSxLQUFLLENBQUMsY0FBYztZQUNwQyxvQkFBb0IsRUFBRSxLQUFLLENBQUMsb0JBQW9CO1lBQ2hELFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixpQkFBaUIsRUFBRSxLQUFLLENBQUMsaUJBQWlCO1lBQzFDLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztZQUMxQixxQkFBcUIsRUFBRSxLQUFLLENBQUMscUJBQXFCO1lBQ2xELElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtZQUNoQixRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7WUFDeEIsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQzVCLFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVTtZQUM1QixpQkFBaUIsRUFBRSxLQUFLLENBQUMsaUJBQWlCO1lBQzFDLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztZQUN0QixRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7WUFDeEIsZUFBZSxFQUFFLEtBQUssQ0FBQyxlQUFlO1lBQ3RDLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMsWUFBWSxFQUFFLEtBQUssQ0FBQyxZQUFZO1lBQ2hDLHlCQUF5QixFQUFFLEtBQUssQ0FBQyx5QkFBeUI7WUFDMUQsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNO1lBQ3BCLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtZQUN4QixrQkFBa0IsRUFBRSxLQUFLLENBQUMsa0JBQWtCO1lBQzVDLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztZQUMxQixlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNO1lBQ3BCLGFBQWEsRUFBRSxLQUFLLENBQUMsYUFBYTtZQUNsQyxtQkFBbUIsRUFBRSxLQUFLLENBQUMsbUJBQW1CO1lBQzlDLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QiwyQkFBMkIsRUFBRSxLQUFLLENBQUMsMkJBQTJCO1lBQzlELFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixnQkFBZ0IsRUFBRSxLQUFLLENBQUMsZ0JBQWdCO1lBQ3hDLG9CQUFvQixFQUFFLEtBQUssQ0FBQyxvQkFBb0I7WUFDaEQsMkJBQTJCLEVBQUUsS0FBSyxDQUFDLDJCQUEyQjtZQUM5RCxRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7WUFDeEIsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLO1lBQ2xCLGFBQWEsRUFBRSxLQUFLLENBQUMsYUFBYTtZQUNsQyxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1NBQy9CLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDO1FBQzNCLElBQUksQ0FBQyxhQUFhLEdBQUcsVUFBVSxDQUFDLGFBQWEsQ0FBQztRQUM5QyxJQUFJLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUM7UUFDMUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDO1FBQ3BDLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxVQUFVLENBQUMsbUJBQW1CLENBQUM7SUFDOUQsQ0FBQztDQUNKO0FBcEZELDBCQW9GQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc0NsdXN0ZXIgfSBmcm9tICcuL2VocGMuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zQ2x1c3RlciBhcyBDbHVzdGVyUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBBTElZVU46OkVIUEM6OkNsdXN0ZXJgXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ2x1c3RlclByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBlY3NPcmRlckNvbXB1dGVDb3VudDogQ29tcHV0aW5nIG5vZGUgbnVtYmVyLCB3aGljaCByYW5nZXMgZnJvbTogMS05OS5cbiAgICAgKi9cbiAgICByZWFkb25seSBlY3NPcmRlckNvbXB1dGVDb3VudDogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGVjc09yZGVyQ29tcHV0ZUluc3RhbmNlVHlwZTogQ2x1c3RlciBjb21wdXRpbmcgbm9kZSBpbnN0YW5jZSBzcGVjaWZpY2F0aW9ucy5cbiAgICAgKi9cbiAgICByZWFkb25seSBlY3NPcmRlckNvbXB1dGVJbnN0YW5jZVR5cGU6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBlY3NPcmRlckxvZ2luQ291bnQ6IExvZ2luIG5vZGUgbnVtYmVyIGNhbiBvbmx5IGJlIDEuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZWNzT3JkZXJMb2dpbkNvdW50OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgZWNzT3JkZXJMb2dpbkluc3RhbmNlVHlwZTogTG9nIGNsdXN0ZXIgbm9kZSBpbnN0YW5jZSBzcGVjaWZpY2F0aW9ucy5cbiAgICAgKi9cbiAgICByZWFkb25seSBlY3NPcmRlckxvZ2luSW5zdGFuY2VUeXBlOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgZWNzT3JkZXJNYW5hZ2VySW5zdGFuY2VUeXBlOiBDbHVzdGVyIGNvbnRyb2wgbm9kZSBpbnN0YW5jZSBzcGVjaWZpY2F0aW9ucy5cbiAgICAgKi9cbiAgICByZWFkb25seSBlY3NPcmRlck1hbmFnZXJJbnN0YW5jZVR5cGU6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBlaHBjVmVyc2lvbjogRS1IUEMgcHJvZHVjdCB2ZXJzaW9uIG51bWJlcnMsIGN1cnJlbnRseSBzdXBwb3J0cyAxLjAuMFxuICAgICAqL1xuICAgIHJlYWRvbmx5IGVocGNWZXJzaW9uOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgbmFtZTogQ2x1c3RlciBuYW1lLiAyLTY0IGNoYXJhY3RlcnMgaW4gbGVuZ3RoLCBhbGxvd2luZyBvbmx5IGluY2x1ZGUgQ2hpbmVzZSwgbGV0dGVycywgbnVtYmVycywgZGFzaGVzICgtKSBhbmQgdW5kZXJzY29yZSAoXyksIG11c3QgYmVnaW4gd2l0aCBhIGxldHRlciBvciBDaGluZXNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBvc1RhZzogT3BlcmF0aW5nIHN5c3RlbSBpbWFnZSB0YWcuIFlvdSBjYW4gY2FsbCBMaXN0SW1hZ2VzIEFQSSB0byBxdWVyeS5cbiAgICAgKi9cbiAgICByZWFkb25seSBvc1RhZzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHZvbHVtZUlkOiBBbGkgY2xvdWQgTkFTIGluc3RhbmNlIElkLiBDdXJyZW50bHkgaXQgZG9lcyBub3Qgc3VwcG9ydCBhdXRvbWF0aWMgY3JlYXRpb24gQWxpIGNsb3VkIE5BUyBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICByZWFkb25seSB2b2x1bWVJZDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHZvbHVtZU1vdW50cG9pbnQ6IE5BUyB2cGMgbW91bnQgcG9pbnQuIEN1cnJlbnRseSBpdCBkb2VzIG5vdCBzdXBwb3J0IGF1dG9tYXRpYyBjcmVhdGlvbiBBbGkgY2xvdWQgTkFTIG1vdW50IHBvaW50LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHZvbHVtZU1vdW50cG9pbnQ6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSB2U3dpdGNoSWQ6IFZQQyBpbiBzd2l0Y2ggSUQuIFByb2R1Y3RzIGN1cnJlbnRseSBvbmx5IHN1cHBvcnRzIFZQQyBuZXR3b3JrLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHZTd2l0Y2hJZDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGFjY291bnRUeXBlOiBEb21haW4gc2VydmljZSBhY2NvdW50IHR5cGVzLCBjdXJyZW50bHkgc3VwcG9ydHMgbmlzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGFjY291bnRUeXBlPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGFwcGxpY2F0aW9uOiBBcHBsaWNhdGlvbiBzb2Z0d2FyZSB0YWcgKFNvZnR3YXJlVGFnKSBsaXN0LCBZb3UgY2FuIGNhbGwgTGlzdFNvZnR3YXJlcyBBUEkgdG8gcXVlcnkuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXBwbGljYXRpb24/OiBBcnJheTxSb3NDbHVzdGVyLkFwcGxpY2F0aW9uUHJvcGVydHkgfCByb3MuSVJlc29sdmFibGU+IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGF1dG9SZW5ldzogdHJ1ZTogYXV0b21hdGljIHJlbmV3YWxzOyBmYWxzZTogbm8gYXV0b21hdGljIHJlbmV3YWxzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF1dG9SZW5ldz86IGJvb2xlYW4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgYXV0b1JlbmV3UGVyaW9kOiBEdXJhdGlvbiBvZiBlYWNoIGF1dG9tYXRpYyByZW5ld2FscywgQXV0b1JlbmV3IHRha2UgZWZmZWN0IHdoZW4gQXV0b1JlbmV3IGlzIFRydWUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXV0b1JlbmV3UGVyaW9kPzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGNvbXB1dGVTcG90UHJpY2VMaW1pdDogU2V0IGFuIGV4YW1wbGUgb2YgdGhlIGhpZ2hlc3QgcHJpY2UgcGVyIGhvdXIsIGFyZSBmbG9hdGluZy1wb2ludCB2YWx1ZXMsIGluIHRoZSByYW5nZSBvZiB0aGUgY3VycmVudCBwcmljZSByYW5nZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBjb21wdXRlU3BvdFByaWNlTGltaXQ/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgY29tcHV0ZVNwb3RTdHJhdGVneTogQ29tcHV0ZSBub2RlcyBiaWRkaW5nIHN0cmF0ZWd5LCB2YWx1ZSBOb1Nwb3QsIFNwb3RXaXRoUHJpY2VMaW1pdCBvciBTcG90QXNQcmljZUdvXG4gICAgICovXG4gICAgcmVhZG9ubHkgY29tcHV0ZVNwb3RTdHJhdGVneT86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBkZXBsb3lNb2RlOiBEZXBsb3ltZW50IG1vZGU6XG4gICAgICogU3RhbmRhcmQ6IGFjY291bnQgbm9kZSArIHNjaGVkdWxpbmcgbm9kZSArIGxvZ2luIG5vZGUgKyBjb21wdXRpbmcgbm9kZS5cbiAgICAgKiBBZHZhbmNlZDogSEEgbW9kZS5cbiAgICAgKiBTaW1wbGU6IChhY2NvdW50ICsgc2NoZWR1bGUpIG5vZGUgKyBsb2dpbiBub2RlICsgY29tcHV0ZSBub2RlLlxuICAgICAqIFRpbnk6IChhY2NvdW50ICsgc2NoZWR1bGluZyArIGxvZ2luKSBub2RlICsgY29tcHV0ZSBub2RlLlxuICAgICAqIE9uZUJveDogKGFjY291bnQgKyBzY2hlZHVsaW5nICsgbG9naW4gKyBjb21wdXRlKSBub2RlICsgbW9yZSBjb21wdXRlIG5vZGVzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRlcGxveU1vZGU/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgZGVzY3JpcHRpb246IENsdXN0ZXIgZGVzY3JpcHRpb24sIDIgdG8gMTI4IGNoYXJhY3RlcnMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgZWNzQ2hhcmdlVHlwZTogRUNTIGluc3RhbmNlIHBheW1lbnQgdHlwZSwgUG9zdFBhaWQ6IFBheS1Bcy1Zb3UtR28uUHJlUGFpZDogU3Vic2NyaXB0aW9uLklmIHlvdSBjaG9vc2UgUHJlUGFpZCwgYXV0b21hdGljIHJlbmV3YWwgd2lsbCBiZSBlbmFibGVkIGJ5IGRlZmF1bHQsIGFuZCBjbG9zZWQgd2hlbiBub2RlIGlzIHJlbGVhc2VkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGVjc0NoYXJnZVR5cGU/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgZWNzT3JkZXJNYW5hZ2VyQ291bnQ6IENvbnRyb2wgbm9kZSBudW1iZXIgY2FuIGJlIDEsIDIsIDQoSEEpXG4gICAgICovXG4gICAgcmVhZG9ubHkgZWNzT3JkZXJNYW5hZ2VyQ291bnQ/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgaGFFbmFibGU6IEF2YWlsYWJpbGl0eSBpcyB0dXJuZWQgb24sIHdoZW4gdHVybmVkIG9uLCB0aGUgcm9sZSBvZiBlYWNoIGNvbnRyb2wgY2x1c3RlciB3aWxsIHVzZSB0d28gc3RhbmRieSBpbnN0YW5jZXMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaGFFbmFibGU/OiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGltYWdlSWQ6IE1pcnJvciBJZCwgaWYgSW1hZ2VUeXBlIGEgc3lzdGVtLCBiYXNlZCBvbiB0aGUgaW1hZ2UgSUQgaXMgZGV0ZXJtaW5lZCBvbmx5IGFjY29yZGluZyBPc1RhZzsgaWYgc2VsZiwgb3RoZXJzLCBvciBtYXJrZXRwbGFjZSwgSW1hZ2VJZCBpcyBtYW5kYXRvcnkuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaW1hZ2VJZD86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBpbWFnZU93bmVyQWxpYXM6IE1pcnJvciB0eXBlOiBzeXN0ZW0sIHNlbGYsIG90aGVycyBvciBtYXJrZXRwbGFjZVxuICAgICAqL1xuICAgIHJlYWRvbmx5IGltYWdlT3duZXJBbGlhcz86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBqb2JRdWV1ZTogQ29tcHV0aW5nIG5vZGUgYWRkZWQgcXVldWVcbiAgICAgKi9cbiAgICByZWFkb25seSBqb2JRdWV1ZT86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBrZXlQYWlyTmFtZTogS2V5IHBhaXIgbmFtZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBrZXlQYWlyTmFtZT86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBwYXNzd29yZDogUm9vdCBwYXNzd29yZCBvZiBqdW1wIHNlcnZlciAobG9naW4gbm9kZSkuIDggdG8gMzAgY2hhcmFjdGVycywgbXVzdCBjb250YWluIHRocmVlICh1cHBlciBhbmQgbG93ZXIgY2FzZSBsZXR0ZXJzLCBudW1iZXJzIGFuZCBzcGVjaWFsIHN5bWJvbHMpLiAhIFN1cHBvcnRzIHRoZSBmb2xsb3dpbmcgc3BlY2lhbCBjaGFyYWN0ZXJzIDooKSBgfiBAICMgJCUgXiAmICogLSArID0gfCB7fSBbXTo7ICc8PiwgLyBCZSBzdXJlIHRvIHVzZSB0aGUgSFRUUFMgcHJvdG9jb2wgQVBJIGNhbGwgdG8gYXZvaWQgcGFzc3dvcmQgbGVha3MgdGhhdCBtYXkgb2NjdXIuPy5cbiAgICAgKi9cbiAgICByZWFkb25seSBwYXNzd29yZD86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBwZXJpb2Q6IFRoZSBwdXJjaGFzZSBvZiBsb25nIHJlc291cmNlcywgdW5pdHM6IHdlZWsgLyBtb250aCAvIHllYXIuIFdoZW4gdGhlIHZhbHVlIG9mIHRoZSBwYXJhbWV0ZXIgRWNzQ2hhcmdlVHlwZSB3aGVuIFByZVBhaWQgdGFrZSBlZmZlY3QgYW5kIGZvciB0aGUgc2VsZWN0ZWQgdmFsdWUgd2lsbCBiZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBwZXJpb2Q/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgcGVyaW9kVW5pdDogVGhlIHB1cmNoYXNlIG9mIGxvbmctcmVzb3VyY2VzIHVuaXQuIEFsdGVybmF0aXZlbHkgdmFsdWUgV2VlayAvIE1vbnRoIC8geWVhci5cbiAgICAgKi9cbiAgICByZWFkb25seSBwZXJpb2RVbml0Pzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHBvc3RJbnN0YWxsU2NyaXB0OlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHBvc3RJbnN0YWxsU2NyaXB0PzogQXJyYXk8Um9zQ2x1c3Rlci5Qb3N0SW5zdGFsbFNjcmlwdFByb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSByZW1vdGVEaXJlY3Rvcnk6IE1vdW50IHNoYXJlZCBzdG9yYWdlIHJlbW90ZSBkaXJlY3RvcnkuIFRoZSBmaW5hbCBwYXRoIHRvIHRoZSBtb3VudCBwb2ludCBhbmQgbW91bnQgdGhlIHJlbW90ZSBkaXJlY3RvcnkgY29tcG9zaXRpb246IE5hc01vdW50cG9pbnQ6IC8gUmVtb3RlRGlyZWN0b3J5XG4gICAgICovXG4gICAgcmVhZG9ubHkgcmVtb3RlRGlyZWN0b3J5Pzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHNjY0NsdXN0ZXJJZDogV2hlbiBTQ0MgbW9kZWxzLCBpZiB5b3UgcGFzcyB0aGlzIGZpZWxkLCB0aGVuIHRoZSBzcGVjaWZpZWQgU2NjQ2x1c3RlciBjcmVhdGUgU2NjIGluc3RhbmNlLCBvdGhlcndpc2UgaXQgd2lsbCBjcmVhdGUgYW4gaW5zdGFuY2UgZm9yIHRoZSB1c2VyLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNjY0NsdXN0ZXJJZD86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBzY2hlZHVsZXJUeXBlOiBUaGUgc2NoZWR1bGVyIHR5cGUsIGN1cnJlbnRseSBzdXBwb3J0IHBicy5cbiAgICAgKi9cbiAgICByZWFkb25seSBzY2hlZHVsZXJUeXBlPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHNlY3VyaXR5R3JvdXBJZDogU2VjdXJpdHkgZ3JvdXAgSUQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc2VjdXJpdHlHcm91cElkPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IHNlY3VyaXR5R3JvdXBOYW1lOiBJZiB5b3UgZG8gbm90IHVzZSBhbiBleGlzdGluZyBzZWN1cml0eSBncm91cCAoU2VjdXJpdHlHcm91cElkIGlzIGVtcHR5KSwgdGhlbiB1c2UgdGhpcyBuYW1lIHRvIGNyZWF0ZSBhIG5ldyBzZWN1cml0eSBncm91cCwgdGhlIGRlZmF1bHQgcG9saWN5LiBGb3JtYXQgUmVxdWlyZW1lbnRzIFJlZmVyZW5jZSBFQ1Mgc2VjdXJpdHkgZ3JvdXAgbmFtZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBzZWN1cml0eUdyb3VwTmFtZT86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSB2b2x1bWVQcm90b2NvbDogU2hhcmVkIHN0b3JhZ2UgbmV0d29yayBwcm90b2NvbHMsIGN1cnJlbnRseSBvbmx5IHN1cHBvcnRzIG5mcy5cbiAgICAgKi9cbiAgICByZWFkb25seSB2b2x1bWVQcm90b2NvbD86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSB2b2x1bWVUeXBlOiBOZXR3b3JrIHNoYXJlZCBzdG9yYWdlIHR5cGVzLCBjdXJyZW50bHkgc3VwcG9ydHMgb25seSBBbGkgY2xvdWQgTkFTLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHZvbHVtZVR5cGU/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgem9uZUlkOiBBdmFpbGFibGUgYXJlYSBJRC5cbiAgICAgKi9cbiAgICByZWFkb25seSB6b25lSWQ/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogQSBST1MgcmVzb3VyY2UgdHlwZTogIGBBTElZVU46OkVIUEM6OkNsdXN0ZXJgXG4gKi9cbmV4cG9ydCBjbGFzcyBDbHVzdGVyIGV4dGVuZHMgcm9zLlJlc291cmNlIHtcblxuICAgIC8qKlxuICAgICAqIEEgZmFjdG9yeSBtZXRob2QgdGhhdCBjcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIHRoaXMgY2xhc3MgZnJvbSBhbiBvYmplY3RcbiAgICAgKiBjb250YWluaW5nIHRoZSBwcm9wZXJ0aWVzIG9mIHRoaXMgUk9TIHJlc291cmNlLCB3aGljaCB3aWxsIGJlIGFzc2lnbmVkIHRvIFJPUyByZXNvdXJjZS5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBBdHRyaWJ1dGUgQ2x1c3RlcklkOiBDbHVzdGVyIElkLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQ2x1c3RlcklkOiBhbnk7XG5cbiAgICAvKipcbiAgICAgKiBAQXR0cmlidXRlIEVjc0luZm86IEEgZGF0YSBzdHJ1Y3R1cmUgZGVzY3JpYmluZyB0aGUgbnVtYmVyIGFuZCBzcGVjaWZpY2F0aW9ucyBvZiBFQ1MgZm9yIHZhcmlvdXMgY29tcG9uZW50cyBvZiB0aGUgY2x1c3Rlci5cbllvdSB3aWxsIGdldCByZXN1bHRzIHNpbWlsYXIgdG8gdGhlIGZvbGxvd2luZzogRWNzSW5mbzoge1wiTWFuYWdlclwiOiB7XCJDb3VudFwiOiAyLCBcIkluc3RhbmNlVHlwZVwiOiBcImVjcy5uMS5sYXJnZVwifSwgXCJDb21wdXRlXCI6IHtcIkNvdW50XCI6IDgsIFwiSW5zdGFuY2VUeXBlXCI6IFwiZWNzLm4xLmxhcmdlXCJ9LCBcIkxvZ2luXCI6IHtcIkNvdW50XCI6IDEsIFwiSW5zdGFuY2VUeXBlXCI6IFwiZWNzLm4xLmxhcmdlXCJ9fVxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyRWNzSW5mbzogYW55O1xuXG4gICAgLyoqXG4gICAgICogQEF0dHJpYnV0ZSBOYW1lOiBDbHVzdGVyIG5hbWUuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJOYW1lOiBhbnk7XG5cbiAgICAvKipcbiAgICAgKiBAQXR0cmlidXRlIFNlY3VyaXR5R3JvdXBJZDogU2VjdXJpdHkgZ3JvdXAgSUQuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJTZWN1cml0eUdyb3VwSWQ6IGFueTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBgQUxJWVVOOjpFSFBDOjpDbHVzdGVyYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIEBwYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBAcGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBDbHVzdGVyUHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAgICAgY29uc3Qgcm9zQ2x1c3RlciA9IG5ldyBSb3NDbHVzdGVyKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgaW1hZ2VPd25lckFsaWFzOiBwcm9wcy5pbWFnZU93bmVyQWxpYXMsXG4gICAgICAgICAgICB2b2x1bWVQcm90b2NvbDogcHJvcHMudm9sdW1lUHJvdG9jb2wsXG4gICAgICAgICAgICBlY3NPcmRlckNvbXB1dGVDb3VudDogcHJvcHMuZWNzT3JkZXJDb21wdXRlQ291bnQsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogcHJvcHMuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICBzZWN1cml0eUdyb3VwTmFtZTogcHJvcHMuc2VjdXJpdHlHcm91cE5hbWUsXG4gICAgICAgICAgICBhdXRvUmVuZXc6IHByb3BzLmF1dG9SZW5ldyxcbiAgICAgICAgICAgIGNvbXB1dGVTcG90UHJpY2VMaW1pdDogcHJvcHMuY29tcHV0ZVNwb3RQcmljZUxpbWl0LFxuICAgICAgICAgICAgbmFtZTogcHJvcHMubmFtZSxcbiAgICAgICAgICAgIHZvbHVtZUlkOiBwcm9wcy52b2x1bWVJZCxcbiAgICAgICAgICAgIHZvbHVtZVR5cGU6IHByb3BzLnZvbHVtZVR5cGUsXG4gICAgICAgICAgICBkZXBsb3lNb2RlOiBwcm9wcy5kZXBsb3lNb2RlLFxuICAgICAgICAgICAgcG9zdEluc3RhbGxTY3JpcHQ6IHByb3BzLnBvc3RJbnN0YWxsU2NyaXB0LFxuICAgICAgICAgICAgaW1hZ2VJZDogcHJvcHMuaW1hZ2VJZCxcbiAgICAgICAgICAgIHBhc3N3b3JkOiBwcm9wcy5wYXNzd29yZCxcbiAgICAgICAgICAgIGF1dG9SZW5ld1BlcmlvZDogcHJvcHMuYXV0b1JlbmV3UGVyaW9kLFxuICAgICAgICAgICAga2V5UGFpck5hbWU6IHByb3BzLmtleVBhaXJOYW1lLFxuICAgICAgICAgICAgcmVtb3RlRGlyZWN0b3J5OiBwcm9wcy5yZW1vdGVEaXJlY3RvcnksXG4gICAgICAgICAgICBzY2NDbHVzdGVySWQ6IHByb3BzLnNjY0NsdXN0ZXJJZCxcbiAgICAgICAgICAgIGVjc09yZGVyTG9naW5JbnN0YW5jZVR5cGU6IHByb3BzLmVjc09yZGVyTG9naW5JbnN0YW5jZVR5cGUsXG4gICAgICAgICAgICB6b25lSWQ6IHByb3BzLnpvbmVJZCxcbiAgICAgICAgICAgIGpvYlF1ZXVlOiBwcm9wcy5qb2JRdWV1ZSxcbiAgICAgICAgICAgIGVjc09yZGVyTG9naW5Db3VudDogcHJvcHMuZWNzT3JkZXJMb2dpbkNvdW50LFxuICAgICAgICAgICAgdlN3aXRjaElkOiBwcm9wcy52U3dpdGNoSWQsXG4gICAgICAgICAgICBzZWN1cml0eUdyb3VwSWQ6IHByb3BzLnNlY3VyaXR5R3JvdXBJZCxcbiAgICAgICAgICAgIHBlcmlvZDogcHJvcHMucGVyaW9kLFxuICAgICAgICAgICAgc2NoZWR1bGVyVHlwZTogcHJvcHMuc2NoZWR1bGVyVHlwZSxcbiAgICAgICAgICAgIGNvbXB1dGVTcG90U3RyYXRlZ3k6IHByb3BzLmNvbXB1dGVTcG90U3RyYXRlZ3ksXG4gICAgICAgICAgICBhY2NvdW50VHlwZTogcHJvcHMuYWNjb3VudFR5cGUsXG4gICAgICAgICAgICBlY3NPcmRlck1hbmFnZXJJbnN0YW5jZVR5cGU6IHByb3BzLmVjc09yZGVyTWFuYWdlckluc3RhbmNlVHlwZSxcbiAgICAgICAgICAgIGVocGNWZXJzaW9uOiBwcm9wcy5laHBjVmVyc2lvbixcbiAgICAgICAgICAgIHZvbHVtZU1vdW50cG9pbnQ6IHByb3BzLnZvbHVtZU1vdW50cG9pbnQsXG4gICAgICAgICAgICBlY3NPcmRlck1hbmFnZXJDb3VudDogcHJvcHMuZWNzT3JkZXJNYW5hZ2VyQ291bnQsXG4gICAgICAgICAgICBlY3NPcmRlckNvbXB1dGVJbnN0YW5jZVR5cGU6IHByb3BzLmVjc09yZGVyQ29tcHV0ZUluc3RhbmNlVHlwZSxcbiAgICAgICAgICAgIGhhRW5hYmxlOiBwcm9wcy5oYUVuYWJsZSxcbiAgICAgICAgICAgIG9zVGFnOiBwcm9wcy5vc1RhZyxcbiAgICAgICAgICAgIGVjc0NoYXJnZVR5cGU6IHByb3BzLmVjc0NoYXJnZVR5cGUsXG4gICAgICAgICAgICBhcHBsaWNhdGlvbjogcHJvcHMuYXBwbGljYXRpb24sXG4gICAgICAgICAgICBwZXJpb2RVbml0OiBwcm9wcy5wZXJpb2RVbml0LFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0NsdXN0ZXI7XG4gICAgICAgIHRoaXMuYXR0ckNsdXN0ZXJJZCA9IHJvc0NsdXN0ZXIuYXR0ckNsdXN0ZXJJZDtcbiAgICAgICAgdGhpcy5hdHRyRWNzSW5mbyA9IHJvc0NsdXN0ZXIuYXR0ckVjc0luZm87XG4gICAgICAgIHRoaXMuYXR0ck5hbWUgPSByb3NDbHVzdGVyLmF0dHJOYW1lO1xuICAgICAgICB0aGlzLmF0dHJTZWN1cml0eUdyb3VwSWQgPSByb3NDbHVzdGVyLmF0dHJTZWN1cml0eUdyb3VwSWQ7XG4gICAgfVxufVxuIl19