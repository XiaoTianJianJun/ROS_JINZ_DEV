"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlertContact = exports.AlertContactProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const arms_generated_1 = require("./arms.generated");
Object.defineProperty(exports, "AlertContactProperty", { enumerable: true, get: function () { return arms_generated_1.RosAlertContact; } });
/**
 * A ROS resource type:  `ALIYUN::ARMS::AlertContact`
 */
class AlertContact extends ros.Resource {
    /**
     * Create a new `ALIYUN::ARMS::AlertContact`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosAlertContact = new arms_generated_1.RosAlertContact(this, id, {
            proxyUserId: props.proxyUserId,
            email: props.email,
            dingRobotWebhookUrl: props.dingRobotWebhookUrl,
            phoneNum: props.phoneNum,
            regionId: props.regionId,
            systemNoc: props.systemNoc,
            contactName: props.contactName,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosAlertContact;
        this.attrContactId = rosAlertContact.attrContactId;
    }
}
exports.AlertContact = AlertContact;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnRjb250YWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYWxlcnRjb250YWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxxREFBbUQ7QUFFdkIscUdBRm5CLGdDQUFlLE9BRXdCO0FBMkNoRDs7R0FFRztBQUNILE1BQWEsWUFBYSxTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBWTFDOzs7Ozs7T0FNRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBd0IsRUFBRSxtQ0FBMkMsSUFBSTtRQUNuSCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sZUFBZSxHQUFHLElBQUksZ0NBQWUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ25ELFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUs7WUFDbEIsbUJBQW1CLEVBQUUsS0FBSyxDQUFDLG1CQUFtQjtZQUM5QyxRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7WUFDeEIsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1lBQ3hCLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztZQUMxQixXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7U0FDakMsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxlQUFlLENBQUM7UUFDaEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxlQUFlLENBQUMsYUFBYSxDQUFDO0lBQ3ZELENBQUM7Q0FDSjtBQWxDRCxvQ0FrQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NBbGVydENvbnRhY3QgfSBmcm9tICcuL2FybXMuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zQWxlcnRDb250YWN0IGFzIEFsZXJ0Q29udGFjdFByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgQUxJWVVOOjpBUk1TOjpBbGVydENvbnRhY3RgXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQWxlcnRDb250YWN0UHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGNvbnRhY3ROYW1lOiBUaGUgbmFtZSBvZiB0aGUgYWxlcnQgY29udGFjdCB0aGF0IHlvdSB3YW50IHRvIGNyZWF0ZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBjb250YWN0TmFtZTogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQFByb3BlcnR5IGRpbmdSb2JvdFdlYmhvb2tVcmw6IFRoZSBEaW5nVGFsayBDaGF0Ym90IGFkZHJlc3Mgb2YgdGhlIGNvbnRhY3QuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGluZ1JvYm90V2ViaG9va1VybD86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBlbWFpbDogVGhlIGVtYWlsIGFkZHJlc3Mgb2YgdGhlIGNvbnRhY3QuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZW1haWw/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgcGhvbmVOdW06IFRoZSBwaG9uZSBudW1iZXIgb2YgdGhlIGNvbnRhY3QuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcGhvbmVOdW0/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBAUHJvcGVydHkgcHJveHlVc2VySWQ6IEludGVybmFsIHBhcmFtZXRlcnNcbiAgICAgKi9cbiAgICByZWFkb25seSBwcm94eVVzZXJJZD86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSByZWdpb25JZDogUmVnaW9uIElELiBEZWZhdWx0IHRvIHJlZ2lvbiBvZiBzdGFjay5cbiAgICAgKi9cbiAgICByZWFkb25seSByZWdpb25JZD86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBQcm9wZXJ0eSBzeXN0ZW1Ob2M6IFNwZWNpZmllcyB3aGV0aGVyIHRvIHJlY2VpdmUgc3lzdGVtIGFsZXJ0cy5cbiAgICAgKi9cbiAgICByZWFkb25seSBzeXN0ZW1Ob2M/OiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIEEgUk9TIHJlc291cmNlIHR5cGU6ICBgQUxJWVVOOjpBUk1TOjpBbGVydENvbnRhY3RgXG4gKi9cbmV4cG9ydCBjbGFzcyBBbGVydENvbnRhY3QgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuXG4gICAgLyoqXG4gICAgICogQSBmYWN0b3J5IG1ldGhvZCB0aGF0IGNyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcyBmcm9tIGFuIG9iamVjdFxuICAgICAqIGNvbnRhaW5pbmcgdGhlIHByb3BlcnRpZXMgb2YgdGhpcyBST1MgcmVzb3VyY2UsIHdoaWNoIHdpbGwgYmUgYXNzaWduZWQgdG8gUk9TIHJlc291cmNlLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQEF0dHJpYnV0ZSBDb250YWN0SWQ6IFRoZSBJRCBvZiB0aGUgYWxlcnQgY29udGFjdCB0aGF0IHlvdSBjcmVhdGVkLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyQ29udGFjdElkOiBhbnk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgYEFMSVlVTjo6QVJNUzo6QWxlcnRDb250YWN0YC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIEBwYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBAcGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBBbGVydENvbnRhY3RQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NBbGVydENvbnRhY3QgPSBuZXcgUm9zQWxlcnRDb250YWN0KHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgcHJveHlVc2VySWQ6IHByb3BzLnByb3h5VXNlcklkLFxuICAgICAgICAgICAgZW1haWw6IHByb3BzLmVtYWlsLFxuICAgICAgICAgICAgZGluZ1JvYm90V2ViaG9va1VybDogcHJvcHMuZGluZ1JvYm90V2ViaG9va1VybCxcbiAgICAgICAgICAgIHBob25lTnVtOiBwcm9wcy5waG9uZU51bSxcbiAgICAgICAgICAgIHJlZ2lvbklkOiBwcm9wcy5yZWdpb25JZCxcbiAgICAgICAgICAgIHN5c3RlbU5vYzogcHJvcHMuc3lzdGVtTm9jLFxuICAgICAgICAgICAgY29udGFjdE5hbWU6IHByb3BzLmNvbnRhY3ROYW1lLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0FsZXJ0Q29udGFjdDtcbiAgICAgICAgdGhpcy5hdHRyQ29udGFjdElkID0gcm9zQWxlcnRDb250YWN0LmF0dHJDb250YWN0SWQ7XG4gICAgfVxufVxuIl19