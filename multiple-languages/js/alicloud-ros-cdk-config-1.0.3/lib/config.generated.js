"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosRule = exports.RosDeliveryChannel = exports.RosCompliancePack = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosCompliancePackProps`
 *
 * @param properties - the TypeScript properties of a `RosCompliancePackProps`
 *
 * @returns the result of the validation.
 */
function RosCompliancePackPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('compliancePackName', ros.requiredValidator)(properties.compliancePackName));
    errors.collect(ros.propertyValidator('compliancePackName', ros.validateString)(properties.compliancePackName));
    errors.collect(ros.propertyValidator('description', ros.requiredValidator)(properties.description));
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('configRules', ros.listValidator(RosCompliancePack_ConfigRulesPropertyValidator))(properties.configRules));
    errors.collect(ros.propertyValidator('compliancePackTemplateId', ros.validateString)(properties.compliancePackTemplateId));
    errors.collect(ros.propertyValidator('riskLevel', ros.requiredValidator)(properties.riskLevel));
    errors.collect(ros.propertyValidator('riskLevel', ros.validateNumber)(properties.riskLevel));
    return errors.wrap('supplied properties not correct for "RosCompliancePackProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::Config::CompliancePack` resource
 *
 * @param properties - the TypeScript properties of a `RosCompliancePackProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::Config::CompliancePack` resource.
 */
// @ts-ignore TS6133
function rosCompliancePackPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosCompliancePackPropsValidator(properties).assertSuccess();
    }
    return {
        CompliancePackName: ros.stringToRosTemplate(properties.compliancePackName),
        Description: ros.stringToRosTemplate(properties.description),
        RiskLevel: ros.numberToRosTemplate(properties.riskLevel),
        CompliancePackTemplateId: ros.stringToRosTemplate(properties.compliancePackTemplateId),
        ConfigRules: ros.listMapper(rosCompliancePackConfigRulesPropertyToRosTemplate)(properties.configRules),
    };
}
/**
 * A ROS template type:  `ALIYUN::Config::CompliancePack`
 */
class RosCompliancePack extends ros.RosResource {
    /**
     * Create a new `ALIYUN::Config::CompliancePack`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosCompliancePack.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAccountId = this.getAtt('AccountId');
        this.attrCompliancePackId = this.getAtt('CompliancePackId');
        this.attrCompliancePackName = this.getAtt('CompliancePackName');
        this.attrCompliancePackTemplateId = this.getAtt('CompliancePackTemplateId');
        this.attrDescription = this.getAtt('Description');
        this.attrRiskLevel = this.getAtt('RiskLevel');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.compliancePackName = props.compliancePackName;
        this.description = props.description;
        this.riskLevel = props.riskLevel;
        this.compliancePackTemplateId = props.compliancePackTemplateId;
        this.configRules = props.configRules;
    }
    get rosProperties() {
        return {
            compliancePackName: this.compliancePackName,
            description: this.description,
            riskLevel: this.riskLevel,
            compliancePackTemplateId: this.compliancePackTemplateId,
            configRules: this.configRules,
        };
    }
    renderProperties(props) {
        return rosCompliancePackPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosCompliancePack = RosCompliancePack;
/**
 * The resource type name for this resource class.
 */
RosCompliancePack.ROS_RESOURCE_TYPE_NAME = "ALIYUN::Config::CompliancePack";
/**
 * Determine whether the given properties match those of a `ConfigRuleParametersProperty`
 *
 * @param properties - the TypeScript properties of a `ConfigRuleParametersProperty`
 *
 * @returns the result of the validation.
 */
function RosCompliancePack_ConfigRuleParametersPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('parameterValue', ros.validateString)(properties.parameterValue));
    errors.collect(ros.propertyValidator('required', ros.validateBoolean)(properties.required));
    errors.collect(ros.propertyValidator('parameterName', ros.validateString)(properties.parameterName));
    return errors.wrap('supplied properties not correct for "ConfigRuleParametersProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::Config::CompliancePack.ConfigRuleParameters` resource
 *
 * @param properties - the TypeScript properties of a `ConfigRuleParametersProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::Config::CompliancePack.ConfigRuleParameters` resource.
 */
// @ts-ignore TS6133
function rosCompliancePackConfigRuleParametersPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosCompliancePack_ConfigRuleParametersPropertyValidator(properties).assertSuccess();
    return {
        ParameterValue: ros.stringToRosTemplate(properties.parameterValue),
        Required: ros.booleanToRosTemplate(properties.required),
        ParameterName: ros.stringToRosTemplate(properties.parameterName),
    };
}
/**
 * Determine whether the given properties match those of a `ConfigRulesProperty`
 *
 * @param properties - the TypeScript properties of a `ConfigRulesProperty`
 *
 * @returns the result of the validation.
 */
function RosCompliancePack_ConfigRulesPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('configRuleId', ros.validateString)(properties.configRuleId));
    errors.collect(ros.propertyValidator('configRuleName', ros.validateString)(properties.configRuleName));
    errors.collect(ros.propertyValidator('managedRuleIdentifier', ros.validateString)(properties.managedRuleIdentifier));
    errors.collect(ros.propertyValidator('configRuleParameters', ros.listValidator(RosCompliancePack_ConfigRuleParametersPropertyValidator))(properties.configRuleParameters));
    return errors.wrap('supplied properties not correct for "ConfigRulesProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::Config::CompliancePack.ConfigRules` resource
 *
 * @param properties - the TypeScript properties of a `ConfigRulesProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::Config::CompliancePack.ConfigRules` resource.
 */
// @ts-ignore TS6133
function rosCompliancePackConfigRulesPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosCompliancePack_ConfigRulesPropertyValidator(properties).assertSuccess();
    return {
        ConfigRuleId: ros.stringToRosTemplate(properties.configRuleId),
        ConfigRuleName: ros.stringToRosTemplate(properties.configRuleName),
        ManagedRuleIdentifier: ros.stringToRosTemplate(properties.managedRuleIdentifier),
        ConfigRuleParameters: ros.listMapper(rosCompliancePackConfigRuleParametersPropertyToRosTemplate)(properties.configRuleParameters),
    };
}
/**
 * Determine whether the given properties match those of a `RosDeliveryChannelProps`
 *
 * @param properties - the TypeScript properties of a `RosDeliveryChannelProps`
 *
 * @returns the result of the validation.
 */
function RosDeliveryChannelPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('deliveryChannelName', ros.validateString)(properties.deliveryChannelName));
    errors.collect(ros.propertyValidator('deliveryChannelTargetArn', ros.requiredValidator)(properties.deliveryChannelTargetArn));
    errors.collect(ros.propertyValidator('deliveryChannelTargetArn', ros.validateString)(properties.deliveryChannelTargetArn));
    errors.collect(ros.propertyValidator('deliveryChannelAssumeRoleArn', ros.requiredValidator)(properties.deliveryChannelAssumeRoleArn));
    errors.collect(ros.propertyValidator('deliveryChannelAssumeRoleArn', ros.validateString)(properties.deliveryChannelAssumeRoleArn));
    errors.collect(ros.propertyValidator('deliveryChannelType', ros.requiredValidator)(properties.deliveryChannelType));
    if (properties.deliveryChannelType && (typeof properties.deliveryChannelType) !== 'object') {
        errors.collect(ros.propertyValidator('deliveryChannelType', ros.validateAllowedValues)({
            data: properties.deliveryChannelType,
            allowedValues: ["MNS", "OSS", "SLS"],
        }));
    }
    errors.collect(ros.propertyValidator('deliveryChannelType', ros.validateString)(properties.deliveryChannelType));
    errors.collect(ros.propertyValidator('deliveryChannelCondition', ros.validateString)(properties.deliveryChannelCondition));
    return errors.wrap('supplied properties not correct for "RosDeliveryChannelProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::Config::DeliveryChannel` resource
 *
 * @param properties - the TypeScript properties of a `RosDeliveryChannelProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::Config::DeliveryChannel` resource.
 */
// @ts-ignore TS6133
function rosDeliveryChannelPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosDeliveryChannelPropsValidator(properties).assertSuccess();
    }
    return {
        DeliveryChannelAssumeRoleArn: ros.stringToRosTemplate(properties.deliveryChannelAssumeRoleArn),
        DeliveryChannelTargetArn: ros.stringToRosTemplate(properties.deliveryChannelTargetArn),
        DeliveryChannelType: ros.stringToRosTemplate(properties.deliveryChannelType),
        DeliveryChannelCondition: ros.stringToRosTemplate(properties.deliveryChannelCondition),
        DeliveryChannelName: ros.stringToRosTemplate(properties.deliveryChannelName),
        Description: ros.stringToRosTemplate(properties.description),
    };
}
/**
 * A ROS template type:  `ALIYUN::Config::DeliveryChannel`
 */
class RosDeliveryChannel extends ros.RosResource {
    /**
     * Create a new `ALIYUN::Config::DeliveryChannel`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosDeliveryChannel.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrDeliveryChannelId = this.getAtt('DeliveryChannelId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.deliveryChannelAssumeRoleArn = props.deliveryChannelAssumeRoleArn;
        this.deliveryChannelTargetArn = props.deliveryChannelTargetArn;
        this.deliveryChannelType = props.deliveryChannelType;
        this.deliveryChannelCondition = props.deliveryChannelCondition;
        this.deliveryChannelName = props.deliveryChannelName;
        this.description = props.description;
    }
    get rosProperties() {
        return {
            deliveryChannelAssumeRoleArn: this.deliveryChannelAssumeRoleArn,
            deliveryChannelTargetArn: this.deliveryChannelTargetArn,
            deliveryChannelType: this.deliveryChannelType,
            deliveryChannelCondition: this.deliveryChannelCondition,
            deliveryChannelName: this.deliveryChannelName,
            description: this.description,
        };
    }
    renderProperties(props) {
        return rosDeliveryChannelPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosDeliveryChannel = RosDeliveryChannel;
/**
 * The resource type name for this resource class.
 */
RosDeliveryChannel.ROS_RESOURCE_TYPE_NAME = "ALIYUN::Config::DeliveryChannel";
/**
 * Determine whether the given properties match those of a `RosRuleProps`
 *
 * @param properties - the TypeScript properties of a `RosRuleProps`
 *
 * @returns the result of the validation.
 */
function RosRulePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('tagKeyScope', ros.validateString)(properties.tagKeyScope));
    errors.collect(ros.propertyValidator('tagValueScope', ros.validateString)(properties.tagValueScope));
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('excludeResourceIdsScope', ros.validateString)(properties.excludeResourceIdsScope));
    errors.collect(ros.propertyValidator('sourceOwner', ros.requiredValidator)(properties.sourceOwner));
    errors.collect(ros.propertyValidator('sourceOwner', ros.validateString)(properties.sourceOwner));
    errors.collect(ros.propertyValidator('sourceIdentifier', ros.requiredValidator)(properties.sourceIdentifier));
    errors.collect(ros.propertyValidator('sourceIdentifier', ros.validateString)(properties.sourceIdentifier));
    errors.collect(ros.propertyValidator('maximumExecutionFrequency', ros.validateString)(properties.maximumExecutionFrequency));
    errors.collect(ros.propertyValidator('regionIdsScope', ros.validateString)(properties.regionIdsScope));
    errors.collect(ros.propertyValidator('configRuleTriggerTypes', ros.requiredValidator)(properties.configRuleTriggerTypes));
    errors.collect(ros.propertyValidator('configRuleTriggerTypes', ros.validateString)(properties.configRuleTriggerTypes));
    errors.collect(ros.propertyValidator('resourceGroupIdsScope', ros.validateString)(properties.resourceGroupIdsScope));
    errors.collect(ros.propertyValidator('riskLevel', ros.requiredValidator)(properties.riskLevel));
    errors.collect(ros.propertyValidator('riskLevel', ros.validateNumber)(properties.riskLevel));
    errors.collect(ros.propertyValidator('resourceTypesScope', ros.requiredValidator)(properties.resourceTypesScope));
    errors.collect(ros.propertyValidator('resourceTypesScope', ros.listValidator(ros.validateString))(properties.resourceTypesScope));
    errors.collect(ros.propertyValidator('ruleName', ros.requiredValidator)(properties.ruleName));
    errors.collect(ros.propertyValidator('ruleName', ros.validateString)(properties.ruleName));
    errors.collect(ros.propertyValidator('inputParameters', ros.hashValidator(ros.validateAny))(properties.inputParameters));
    return errors.wrap('supplied properties not correct for "RosRuleProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::Config::Rule` resource
 *
 * @param properties - the TypeScript properties of a `RosRuleProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::Config::Rule` resource.
 */
// @ts-ignore TS6133
function rosRulePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosRulePropsValidator(properties).assertSuccess();
    }
    return {
        ConfigRuleTriggerTypes: ros.stringToRosTemplate(properties.configRuleTriggerTypes),
        ResourceTypesScope: ros.listMapper(ros.stringToRosTemplate)(properties.resourceTypesScope),
        RiskLevel: ros.numberToRosTemplate(properties.riskLevel),
        RuleName: ros.stringToRosTemplate(properties.ruleName),
        SourceIdentifier: ros.stringToRosTemplate(properties.sourceIdentifier),
        SourceOwner: ros.stringToRosTemplate(properties.sourceOwner),
        Description: ros.stringToRosTemplate(properties.description),
        ExcludeResourceIdsScope: ros.stringToRosTemplate(properties.excludeResourceIdsScope),
        InputParameters: ros.hashMapper(ros.objectToRosTemplate)(properties.inputParameters),
        MaximumExecutionFrequency: ros.stringToRosTemplate(properties.maximumExecutionFrequency),
        RegionIdsScope: ros.stringToRosTemplate(properties.regionIdsScope),
        ResourceGroupIdsScope: ros.stringToRosTemplate(properties.resourceGroupIdsScope),
        TagKeyScope: ros.stringToRosTemplate(properties.tagKeyScope),
        TagValueScope: ros.stringToRosTemplate(properties.tagValueScope),
    };
}
/**
 * A ROS template type:  `ALIYUN::Config::Rule`
 */
class RosRule extends ros.RosResource {
    /**
     * Create a new `ALIYUN::Config::Rule`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosRule.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrCompliancePackId = this.getAtt('CompliancePackId');
        this.attrConfigRuleArn = this.getAtt('ConfigRuleArn');
        this.attrConfigRuleId = this.getAtt('ConfigRuleId');
        this.attrConfigRuleTriggerTypes = this.getAtt('ConfigRuleTriggerTypes');
        this.attrDescription = this.getAtt('Description');
        this.attrEventSource = this.getAtt('EventSource');
        this.attrExcludeResourceIdsScope = this.getAtt('ExcludeResourceIdsScope');
        this.attrInputParameters = this.getAtt('InputParameters');
        this.attrMaximumExecutionFrequency = this.getAtt('MaximumExecutionFrequency');
        this.attrRegionIdsScope = this.getAtt('RegionIdsScope');
        this.attrResourceGroupIdsScope = this.getAtt('ResourceGroupIdsScope');
        this.attrResourceTypesScope = this.getAtt('ResourceTypesScope');
        this.attrRiskLevel = this.getAtt('RiskLevel');
        this.attrRuleName = this.getAtt('RuleName');
        this.attrSourceIdentifier = this.getAtt('SourceIdentifier');
        this.attrSourceOwner = this.getAtt('SourceOwner');
        this.attrTagKeyScope = this.getAtt('TagKeyScope');
        this.attrTagValueScope = this.getAtt('TagValueScope');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.configRuleTriggerTypes = props.configRuleTriggerTypes;
        this.resourceTypesScope = props.resourceTypesScope;
        this.riskLevel = props.riskLevel;
        this.ruleName = props.ruleName;
        this.sourceIdentifier = props.sourceIdentifier;
        this.sourceOwner = props.sourceOwner;
        this.description = props.description;
        this.excludeResourceIdsScope = props.excludeResourceIdsScope;
        this.inputParameters = props.inputParameters;
        this.maximumExecutionFrequency = props.maximumExecutionFrequency;
        this.regionIdsScope = props.regionIdsScope;
        this.resourceGroupIdsScope = props.resourceGroupIdsScope;
        this.tagKeyScope = props.tagKeyScope;
        this.tagValueScope = props.tagValueScope;
    }
    get rosProperties() {
        return {
            configRuleTriggerTypes: this.configRuleTriggerTypes,
            resourceTypesScope: this.resourceTypesScope,
            riskLevel: this.riskLevel,
            ruleName: this.ruleName,
            sourceIdentifier: this.sourceIdentifier,
            sourceOwner: this.sourceOwner,
            description: this.description,
            excludeResourceIdsScope: this.excludeResourceIdsScope,
            inputParameters: this.inputParameters,
            maximumExecutionFrequency: this.maximumExecutionFrequency,
            regionIdsScope: this.regionIdsScope,
            resourceGroupIdsScope: this.resourceGroupIdsScope,
            tagKeyScope: this.tagKeyScope,
            tagValueScope: this.tagValueScope,
        };
    }
    renderProperties(props) {
        return rosRulePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosRule = RosRule;
/**
 * The resource type name for this resource class.
 */
RosRule.ROS_RESOURCE_TYPE_NAME = "ALIYUN::Config::Rule";
//# sourceMappingURL=data:application/json;base64,