"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScalingConfiguration = exports.ScalingConfigurationProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ess_generated_1 = require("./ess.generated");
Object.defineProperty(exports, "ScalingConfigurationProperty", { enumerable: true, get: function () { return ess_generated_1.RosScalingConfiguration; } });
/**
 * A ROS resource type:  `ALIYUN::ESS::ScalingConfiguration`
 */
class ScalingConfiguration extends ros.Resource {
    /**
     * Create a new `ALIYUN::ESS::ScalingConfiguration`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosScalingConfiguration = new ess_generated_1.RosScalingConfiguration(this, id, {
            scalingConfigurationName: props.scalingConfigurationName,
            diskMappings: props.diskMappings,
            resourceGroupId: props.resourceGroupId,
            systemDiskSize: props.systemDiskSize,
            userData: props.userData,
            systemDiskAutoSnapshotPolicyId: props.systemDiskAutoSnapshotPolicyId,
            ramRoleName: props.ramRoleName,
            systemDiskPerformanceLevel: props.systemDiskPerformanceLevel,
            spotPriceLimitForInstanceType: props.spotPriceLimitForInstanceType,
            imageId: props.imageId,
            spotPriceLimit: props.spotPriceLimit,
            tagList: props.tagList,
            instanceTypes: props.instanceTypes,
            instanceType: props.instanceType,
            spotStrategy: props.spotStrategy,
            passwordInherit: props.passwordInherit,
            keyPairName: props.keyPairName,
            ioOptimized: props.ioOptimized,
            instanceId: props.instanceId,
            hpcClusterId: props.hpcClusterId,
            scalingGroupId: props.scalingGroupId,
            securityGroupId: props.securityGroupId,
            internetChargeType: props.internetChargeType,
            systemDiskCategory: props.systemDiskCategory,
            instanceName: props.instanceName,
            deploymentSetId: props.deploymentSetId,
            internetMaxBandwidthOut: props.internetMaxBandwidthOut,
            internetMaxBandwidthIn: props.internetMaxBandwidthIn,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosScalingConfiguration;
        this.attrScalingConfigurationId = rosScalingConfiguration.attrScalingConfigurationId;
    }
}
exports.ScalingConfiguration = ScalingConfiguration;
//# sourceMappingURL=data:application/json;base64,