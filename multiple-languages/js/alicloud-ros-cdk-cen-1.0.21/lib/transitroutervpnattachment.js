"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransitRouterVpnAttachment = exports.TransitRouterVpnAttachmentProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cen_generated_1 = require("./cen.generated");
Object.defineProperty(exports, "TransitRouterVpnAttachmentProperty", { enumerable: true, get: function () { return cen_generated_1.RosTransitRouterVpnAttachment; } });
/**
 * A ROS resource type:  `ALIYUN::CEN::TransitRouterVpnAttachment`
 */
class TransitRouterVpnAttachment extends ros.Resource {
    /**
     * Create a new `ALIYUN::CEN::TransitRouterVpnAttachment`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosTransitRouterVpnAttachment = new cen_generated_1.RosTransitRouterVpnAttachment(this, id, {
            autoPublishRouteEnabled: props.autoPublishRouteEnabled,
            routeTableAssociationEnabled: props.routeTableAssociationEnabled,
            vpnOwnerId: props.vpnOwnerId,
            deletionForce: props.deletionForce,
            zoneId: props.zoneId,
            routeTablePropagationEnabled: props.routeTablePropagationEnabled,
            cenId: props.cenId,
            transitRouterAttachmentName: props.transitRouterAttachmentName,
            tags: props.tags,
            transitRouterAttachmentDescription: props.transitRouterAttachmentDescription,
            transitRouterId: props.transitRouterId,
            vpnId: props.vpnId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosTransitRouterVpnAttachment;
        this.attrTransitRouterAttachmentId = rosTransitRouterVpnAttachment.attrTransitRouterAttachmentId;
    }
}
exports.TransitRouterVpnAttachment = TransitRouterVpnAttachment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNpdHJvdXRlcnZwbmF0dGFjaG1lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0cmFuc2l0cm91dGVydnBuYXR0YWNobWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQWdFO0FBRXRCLG1IQUZqQyw2Q0FBNkIsT0FFc0M7QUFvRTVFOztHQUVHO0FBQ0gsTUFBYSwwQkFBMkIsU0FBUSxHQUFHLENBQUMsUUFBUTtJQVl4RDs7Ozs7O09BTUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQXNDLEVBQUUsbUNBQTJDLElBQUk7UUFDakksS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLDZCQUE2QixHQUFHLElBQUksNkNBQTZCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUMvRSx1QkFBdUIsRUFBRSxLQUFLLENBQUMsdUJBQXVCO1lBQ3RELDRCQUE0QixFQUFFLEtBQUssQ0FBQyw0QkFBNEI7WUFDaEUsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQzVCLGFBQWEsRUFBRSxLQUFLLENBQUMsYUFBYTtZQUNsQyxNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU07WUFDcEIsNEJBQTRCLEVBQUUsS0FBSyxDQUFDLDRCQUE0QjtZQUNoRSxLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUs7WUFDbEIsMkJBQTJCLEVBQUUsS0FBSyxDQUFDLDJCQUEyQjtZQUM5RCxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7WUFDaEIsa0NBQWtDLEVBQUUsS0FBSyxDQUFDLGtDQUFrQztZQUM1RSxlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLO1NBQ3JCLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsNkJBQTZCLENBQUM7UUFDOUMsSUFBSSxDQUFDLDZCQUE2QixHQUFHLDZCQUE2QixDQUFDLDZCQUE2QixDQUFDO0lBQ3JHLENBQUM7Q0FDSjtBQXZDRCxnRUF1Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NUcmFuc2l0Um91dGVyVnBuQXR0YWNobWVudCB9IGZyb20gJy4vY2VuLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc1RyYW5zaXRSb3V0ZXJWcG5BdHRhY2htZW50IGFzIFRyYW5zaXRSb3V0ZXJWcG5BdHRhY2htZW50UHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBBTElZVU46OkNFTjo6VHJhbnNpdFJvdXRlclZwbkF0dGFjaG1lbnRgXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVHJhbnNpdFJvdXRlclZwbkF0dGFjaG1lbnRQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB2cG5JZDogSVBzZWMgY29ubmVjdGlvbiBJRFxuICAgICAqL1xuICAgIHJlYWRvbmx5IHZwbklkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB6b25lSWQ6IEF2YWlsYWJpbGl0eSB6b25lIElEIGluIHRoZSBjdXJyZW50IHJlZ2lvbi5cbiAgICAgKi9cbiAgICByZWFkb25seSB6b25lSWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGF1dG9QdWJsaXNoUm91dGVFbmFibGVkOiBXaGV0aGVyIHRvIGFsbG93IGZvcndhcmRpbmcgcm91dGVyIGluc3RhbmNlcyB0byBhdXRvbWF0aWNhbGx5IHB1Ymxpc2ggcm91dGUgZW50cmllcyB0byBJUHNlYyBjb25uZWN0aW9ucy4gRGVmYXVsdCBpcyB0cnVlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF1dG9QdWJsaXNoUm91dGVFbmFibGVkPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGNlbklkOiBUaGUgSUQgb2YgdGhlIENFTiBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBjZW5JZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRlbGV0aW9uRm9yY2U6IFdoZXRoZXIgdG8gZm9yY2VmdWxseSBkZWxldGUgdGhlIFZQTiBjb25uZWN0aW9uLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRlbGV0aW9uRm9yY2U/OiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcm91dGVUYWJsZUFzc29jaWF0aW9uRW5hYmxlZDogV2hldGhlciB0byBlbmFibGUgcm91dGUgYXNzb2NpYXRpb24gYW5kIGZvcndhcmRpbmcgcmVsYXRpb25zaGlwLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJvdXRlVGFibGVBc3NvY2lhdGlvbkVuYWJsZWQ/OiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcm91dGVUYWJsZVByb3BhZ2F0aW9uRW5hYmxlZDogV2hldGhlciB0byBlbmFibGUgcm91dGUgbGVhcm5pbmcgcmVsYXRpb25zaGlwcy5cbiAgICAgKi9cbiAgICByZWFkb25seSByb3V0ZVRhYmxlUHJvcGFnYXRpb25FbmFibGVkPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHRhZ3M6IFRhZ3MgdG8gYXR0YWNoIHRvIFRyYW5zaXRSb3V0ZXJWcG5BdHRhY2htZW50LiBNYXggc3VwcG9ydCAyMCB0YWdzIHRvIGFkZCBkdXJpbmcgY3JlYXRlIFRyYW5zaXRSb3V0ZXJWcG5BdHRhY2htZW50LiBFYWNoIHRhZyB3aXRoIHR3byBwcm9wZXJ0aWVzIEtleSBhbmQgVmFsdWUsIGFuZCBLZXkgaXMgcmVxdWlyZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdGFncz86IFJvc1RyYW5zaXRSb3V0ZXJWcG5BdHRhY2htZW50LlRhZ3NQcm9wZXJ0eVtdO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdHJhbnNpdFJvdXRlckF0dGFjaG1lbnREZXNjcmlwdGlvbjogRGVzY3JpcHRpb24gb2YgdGhlIFZQTiBjb25uZWN0aW9uLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHRyYW5zaXRSb3V0ZXJBdHRhY2htZW50RGVzY3JpcHRpb24/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB0cmFuc2l0Um91dGVyQXR0YWNobWVudE5hbWU6IFRoZSBuYW1lIG9mIHRoZSBWUE4gY29ubmVjdGlvbi5cbiAgICAgKi9cbiAgICByZWFkb25seSB0cmFuc2l0Um91dGVyQXR0YWNobWVudE5hbWU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB0cmFuc2l0Um91dGVySWQ6IEZvcndhcmRpbmcgcm91dGVyIGluc3RhbmNlIElEXG4gICAgICovXG4gICAgcmVhZG9ubHkgdHJhbnNpdFJvdXRlcklkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgdnBuT3duZXJJZDogQWxpYmFiYSBDbG91ZCBhY2NvdW50IChtYWluIGFjY291bnQpIElEIHRvIHdoaWNoIHRoZSBJUHNlYyBjb25uZWN0aW9uIGJlbG9uZ3MuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdnBuT3duZXJJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBBIFJPUyByZXNvdXJjZSB0eXBlOiAgYEFMSVlVTjo6Q0VOOjpUcmFuc2l0Um91dGVyVnBuQXR0YWNobWVudGBcbiAqL1xuZXhwb3J0IGNsYXNzIFRyYW5zaXRSb3V0ZXJWcG5BdHRhY2htZW50IGV4dGVuZHMgcm9zLlJlc291cmNlIHtcblxuICAgIC8qKlxuICAgICAqIEEgZmFjdG9yeSBtZXRob2QgdGhhdCBjcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIHRoaXMgY2xhc3MgZnJvbSBhbiBvYmplY3RcbiAgICAgKiBjb250YWluaW5nIHRoZSBwcm9wZXJ0aWVzIG9mIHRoaXMgUk9TIHJlc291cmNlLCB3aGljaCB3aWxsIGJlIGFzc2lnbmVkIHRvIFJPUyByZXNvdXJjZS5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBUcmFuc2l0Um91dGVyQXR0YWNobWVudElkOiBUaGUgSUQgb2YgdGhlIFZQTiBjb25uZWN0aW9uLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyVHJhbnNpdFJvdXRlckF0dGFjaG1lbnRJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGBBTElZVU46OkNFTjo6VHJhbnNpdFJvdXRlclZwbkF0dGFjaG1lbnRgLlxuICAgICAqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFRyYW5zaXRSb3V0ZXJWcG5BdHRhY2htZW50UHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAgICAgY29uc3Qgcm9zVHJhbnNpdFJvdXRlclZwbkF0dGFjaG1lbnQgPSBuZXcgUm9zVHJhbnNpdFJvdXRlclZwbkF0dGFjaG1lbnQodGhpcywgaWQsICB7XG4gICAgICAgICAgICBhdXRvUHVibGlzaFJvdXRlRW5hYmxlZDogcHJvcHMuYXV0b1B1Ymxpc2hSb3V0ZUVuYWJsZWQsXG4gICAgICAgICAgICByb3V0ZVRhYmxlQXNzb2NpYXRpb25FbmFibGVkOiBwcm9wcy5yb3V0ZVRhYmxlQXNzb2NpYXRpb25FbmFibGVkLFxuICAgICAgICAgICAgdnBuT3duZXJJZDogcHJvcHMudnBuT3duZXJJZCxcbiAgICAgICAgICAgIGRlbGV0aW9uRm9yY2U6IHByb3BzLmRlbGV0aW9uRm9yY2UsXG4gICAgICAgICAgICB6b25lSWQ6IHByb3BzLnpvbmVJZCxcbiAgICAgICAgICAgIHJvdXRlVGFibGVQcm9wYWdhdGlvbkVuYWJsZWQ6IHByb3BzLnJvdXRlVGFibGVQcm9wYWdhdGlvbkVuYWJsZWQsXG4gICAgICAgICAgICBjZW5JZDogcHJvcHMuY2VuSWQsXG4gICAgICAgICAgICB0cmFuc2l0Um91dGVyQXR0YWNobWVudE5hbWU6IHByb3BzLnRyYW5zaXRSb3V0ZXJBdHRhY2htZW50TmFtZSxcbiAgICAgICAgICAgIHRhZ3M6IHByb3BzLnRhZ3MsXG4gICAgICAgICAgICB0cmFuc2l0Um91dGVyQXR0YWNobWVudERlc2NyaXB0aW9uOiBwcm9wcy50cmFuc2l0Um91dGVyQXR0YWNobWVudERlc2NyaXB0aW9uLFxuICAgICAgICAgICAgdHJhbnNpdFJvdXRlcklkOiBwcm9wcy50cmFuc2l0Um91dGVySWQsXG4gICAgICAgICAgICB2cG5JZDogcHJvcHMudnBuSWQsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zVHJhbnNpdFJvdXRlclZwbkF0dGFjaG1lbnQ7XG4gICAgICAgIHRoaXMuYXR0clRyYW5zaXRSb3V0ZXJBdHRhY2htZW50SWQgPSByb3NUcmFuc2l0Um91dGVyVnBuQXR0YWNobWVudC5hdHRyVHJhbnNpdFJvdXRlckF0dGFjaG1lbnRJZDtcbiAgICB9XG59XG4iXX0=