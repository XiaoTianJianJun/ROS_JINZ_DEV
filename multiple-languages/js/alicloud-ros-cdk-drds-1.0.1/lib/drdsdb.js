"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DrdsDB = exports.DrdsDBProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const drds_generated_1 = require("./drds.generated");
Object.defineProperty(exports, "DrdsDBProperty", { enumerable: true, get: function () { return drds_generated_1.RosDrdsDB; } });
/**
 * A ROS resource type:  `ALIYUN::DRDS::DrdsDB`
 */
class DrdsDB extends ros.Resource {
    /**
     * A factory method that creates a new instance of this class from an object
     * containing the properties of this ROS resource, which will be assigned to ROS resource.
     */
    /**
     * Create a new `ALIYUN::DRDS::DrdsDB`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosDrdsDB = new drds_generated_1.RosDrdsDB(this, id, {
            dbInstType: props.dbInstType,
            type: props.type ? props.type : 'HORIZONTAL',
            drdsInstanceId: props.drdsInstanceId,
            rdsInstance: props.rdsInstance,
            dbInstanceIsCreating: props.dbInstanceIsCreating,
            instDbName: props.instDbName,
            dbName: props.dbName,
            encode: props.encode,
            accountName: props.accountName,
            password: props.password,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDrdsDB;
    }
}
exports.DrdsDB = DrdsDB;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJkc2RiLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZHJkc2RiLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxxREFBNkM7QUFFdkIsK0ZBRmIsMEJBQVMsT0FFa0I7QUE4RHBDOztHQUVHO0FBQ0gsTUFBYSxNQUFPLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUFFcEM7OztPQUdHO0lBRUg7Ozs7OztPQU1HO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxLQUFrQixFQUFFLG1DQUEyQyxJQUFJO1FBQzdHLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxTQUFTLEdBQUcsSUFBSSwwQkFBUyxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUc7WUFDdkMsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQzVCLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxZQUFZO1lBQzVDLGNBQWMsRUFBRSxLQUFLLENBQUMsY0FBYztZQUNwQyxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsb0JBQW9CLEVBQUUsS0FBSyxDQUFDLG9CQUFvQjtZQUNoRCxVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVU7WUFDNUIsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNO1lBQ3BCLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtZQUNwQixXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1NBQzNCLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDO0lBQzlCLENBQUM7Q0FDSjtBQS9CRCx3QkErQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NEcmRzREIgfSBmcm9tICcuL2RyZHMuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zRHJkc0RCIGFzIERyZHNEQlByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgQUxJWVVOOjpEUkRTOjpEcmRzREJgXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRHJkc0RCUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZHJkc0luc3RhbmNlSWQ6IERSRFMgaW5zdGFuY2UgSURcbiAgICAgKi9cbiAgICByZWFkb25seSBkcmRzSW5zdGFuY2VJZDogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYWNjb3VudE5hbWU6IEluIHRoZSB2ZXJ0aWNhbCBzcGxpdCBzY2VuYXJpbywgYW4gYWNjb3VudCBuYW1lIHdpdGggYWNjZXNzIHJpZ2h0cyB0byB0aGUgY29ycmVzcG9uZGluZyBkYXRhYmFzZSBvbiBhbGwgUkRTcy5cbiAgICAgKi9cbiAgICByZWFkb25seSBhY2NvdW50TmFtZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRiSW5zdGFuY2VJc0NyZWF0aW5nOiBDaGVjayB3aGV0aGVyIHRoZSBSRFMgaW5zdGFuY2UgaXMgYmVpbmcgY3JlYXRlZC5cbiAgICAgKi9cbiAgICByZWFkb25seSBkYkluc3RhbmNlSXNDcmVhdGluZz86IGJvb2xlYW4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkYkluc3RUeXBlOiBUaGUgdHlwZSBvZiB0aGUgYXR0YWNoZWQgc3RvcmFnZS4gVmFsaWQgdmFsdWVzOlxuICAgICAqIFJEUyBvciBQT0xBUkRCXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGJJbnN0VHlwZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRiTmFtZTogRGF0YWJhc2UgTmFtZVxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRiTmFtZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGVuY29kZTogRW5jb2RpbmcgdXNlZCBieSB0aGUgZGF0YWJhc2VcbiAgICAgKi9cbiAgICByZWFkb25seSBlbmNvZGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBpbnN0RGJOYW1lOlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGluc3REYk5hbWU/OiBBcnJheTxSb3NEcmRzREIuSW5zdERiTmFtZVByb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHBhc3N3b3JkOiBUaGUgbG9nb24gcGFzc3dvcmQgb2YgdGhlIGRhdGFiYXNlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHBhc3N3b3JkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcmRzSW5zdGFuY2U6IFRoaXMgcHJvcGVydHkgaXMgcmVxdWlyZWQgb25seSBmb3IgdmVydGljYWwgcGFydGl0aW9uaW5nLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHJkc0luc3RhbmNlPzogQXJyYXk8c3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHR5cGU6IERhdGFiYXNlIFNoYXJkaW5nIG1ldGhvZC4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSBzY2FsYWJpbGl0eSBwcmluY2lwbGUuIFZhbGlkIHZhbHVlczpcbiAgICAgKiBIT1JJWk9OVEFMOiBpbmRpY2F0ZXMgSE9SSVpPTlRBTCBwYXJ0aXRpb25pbmcsIHdoaWNoIGlzIGNvbW1vbmx5IGtub3duIGFzIGRhdGFiYXNlXG4gICAgICogYW5kIHRhYmxlIHNoYXJkaW5nLlxuICAgICAqIFZFUlRJQ0FMOiBpbmRpY2F0ZXMgVkVSVElDQUwgcGFydGl0aW9uaW5nLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHR5cGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogQSBST1MgcmVzb3VyY2UgdHlwZTogIGBBTElZVU46OkRSRFM6OkRyZHNEQmBcbiAqL1xuZXhwb3J0IGNsYXNzIERyZHNEQiBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBIGZhY3RvcnkgbWV0aG9kIHRoYXQgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGZyb20gYW4gb2JqZWN0XG4gICAgICogY29udGFpbmluZyB0aGUgcHJvcGVydGllcyBvZiB0aGlzIFJPUyByZXNvdXJjZSwgd2hpY2ggd2lsbCBiZSBhc3NpZ25lZCB0byBST1MgcmVzb3VyY2UuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgYEFMSVlVTjo6RFJEUzo6RHJkc0RCYC5cbiAgICAgKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBEcmRzREJQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NEcmRzREIgPSBuZXcgUm9zRHJkc0RCKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgZGJJbnN0VHlwZTogcHJvcHMuZGJJbnN0VHlwZSxcbiAgICAgICAgICAgIHR5cGU6IHByb3BzLnR5cGUgPyBwcm9wcy50eXBlIDogJ0hPUklaT05UQUwnLFxuICAgICAgICAgICAgZHJkc0luc3RhbmNlSWQ6IHByb3BzLmRyZHNJbnN0YW5jZUlkLFxuICAgICAgICAgICAgcmRzSW5zdGFuY2U6IHByb3BzLnJkc0luc3RhbmNlLFxuICAgICAgICAgICAgZGJJbnN0YW5jZUlzQ3JlYXRpbmc6IHByb3BzLmRiSW5zdGFuY2VJc0NyZWF0aW5nLFxuICAgICAgICAgICAgaW5zdERiTmFtZTogcHJvcHMuaW5zdERiTmFtZSxcbiAgICAgICAgICAgIGRiTmFtZTogcHJvcHMuZGJOYW1lLFxuICAgICAgICAgICAgZW5jb2RlOiBwcm9wcy5lbmNvZGUsXG4gICAgICAgICAgICBhY2NvdW50TmFtZTogcHJvcHMuYWNjb3VudE5hbWUsXG4gICAgICAgICAgICBwYXNzd29yZDogcHJvcHMucGFzc3dvcmQsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zRHJkc0RCO1xuICAgIH1cbn1cbiJdfQ==