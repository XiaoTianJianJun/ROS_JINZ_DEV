"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DedicatedHost = exports.DedicatedHostProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "DedicatedHostProperty", { enumerable: true, get: function () { return ecs_generated_1.RosDedicatedHost; } });
/**
 * A ROS resource type:  `ALIYUN::ECS::DedicatedHost`
 */
class DedicatedHost extends ros.Resource {
    /**
     * Create a new `ALIYUN::ECS::DedicatedHost`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosDedicatedHost = new ecs_generated_1.RosDedicatedHost(this, id, {
            autoRenewPeriod: props.autoRenewPeriod ? props.autoRenewPeriod : 1,
            description: props.description,
            networkAttributesSlbUdpTimeout: props.networkAttributesSlbUdpTimeout,
            resourceGroupId: props.resourceGroupId,
            zoneId: props.zoneId,
            networkAttributesUdpTimeout: props.networkAttributesUdpTimeout,
            autoRenew: props.autoRenew ? props.autoRenew : 'False',
            autoPlacement: props.autoPlacement,
            quantity: props.quantity ? props.quantity : 1,
            period: props.period ? props.period : 1,
            dedicatedHostType: props.dedicatedHostType,
            dedicatedHostName: props.dedicatedHostName,
            chargeType: props.chargeType ? props.chargeType : 'PostPaid',
            actionOnMaintenance: props.actionOnMaintenance,
            tags: props.tags,
            periodUnit: props.periodUnit ? props.periodUnit : 'Month',
            autoReleaseTime: props.autoReleaseTime,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDedicatedHost;
        this.attrDedicatedHostIds = rosDedicatedHost.attrDedicatedHostIds;
        this.attrOrderId = rosDedicatedHost.attrOrderId;
    }
}
exports.DedicatedHost = DedicatedHost;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVkaWNhdGVkaG9zdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRlZGljYXRlZGhvc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUFtRDtBQUV0QixzR0FGcEIsZ0NBQWdCLE9BRXlCO0FBNkZsRDs7R0FFRztBQUNILE1BQWEsYUFBYyxTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBaUIzQzs7Ozs7O09BTUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQXlCLEVBQUUsbUNBQTJDLElBQUk7UUFDcEgsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLGdCQUFnQixHQUFHLElBQUksZ0NBQWdCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNyRCxlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNsRSxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsOEJBQThCLEVBQUUsS0FBSyxDQUFDLDhCQUE4QjtZQUNwRSxlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNO1lBQ3BCLDJCQUEyQixFQUFFLEtBQUssQ0FBQywyQkFBMkI7WUFDOUQsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU87WUFDdEQsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhO1lBQ2xDLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzdDLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZDLGlCQUFpQixFQUFFLEtBQUssQ0FBQyxpQkFBaUI7WUFDMUMsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLGlCQUFpQjtZQUMxQyxVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsVUFBVTtZQUM1RCxtQkFBbUIsRUFBRSxLQUFLLENBQUMsbUJBQW1CO1lBQzlDLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtZQUNoQixVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsT0FBTztZQUN6RCxlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7U0FDekMsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxnQkFBZ0IsQ0FBQztRQUNqQyxJQUFJLENBQUMsb0JBQW9CLEdBQUcsZ0JBQWdCLENBQUMsb0JBQW9CLENBQUM7UUFDbEUsSUFBSSxDQUFDLFdBQVcsR0FBRyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUM7SUFDcEQsQ0FBQztDQUNKO0FBbERELHNDQWtEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc0RlZGljYXRlZEhvc3QgfSBmcm9tICcuL2Vjcy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NEZWRpY2F0ZWRIb3N0IGFzIERlZGljYXRlZEhvc3RQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYEFMSVlVTjo6RUNTOjpEZWRpY2F0ZWRIb3N0YFxuICovXG5leHBvcnQgaW50ZXJmYWNlIERlZGljYXRlZEhvc3RQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkZWRpY2F0ZWRIb3N0VHlwZTogVGhlIGluc3RhbmNlIHR5cGUgb2YgaG9zdC5cbiAgICAgKi9cbiAgICByZWFkb25seSBkZWRpY2F0ZWRIb3N0VHlwZTogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYWN0aW9uT25NYWludGVuYW5jZTogVGhlIHBvbGljeSB1c2VkIHRvIG1pZ3JhdGUgdGhlIGluc3RhbmNlcyBmcm9tIHRoZSBkZWRpY2F0ZWQgaG9zdHdoZW4gdGhlIGRlZGljYXRlZCBob3N0IGZhaWxzIG9yIG5lZWRzIHRvIGJlIHJlcGFpcmVkIG9ubGluZS5WYWxpZCB2YWx1ZXM6IE1pZ3JhdGU6IEluc3RhbmNlcyBhcmUgbWlncmF0ZWQgdG8gYW5vdGhlciBwaHlzaWNhbCBzZXJ2ZXIgYW5kIHJlc3RhcnRlZC5JZiB0aGUgZGVkaWNhdGVkIGhvc3QgaXMgYXR0YWNoZWQgd2l0aCBkaXNrcyB0aGF0IGFyZSBub3QgbG9jYWwgZGlza3MsIHRoZSBkZWZhdWx0IHZhbHVlIGlzIE1pZ3JhdGUuU3RvcDogSW5zdGFuY2VzIG9uIHRoZSBkZWRpY2F0ZWQgaG9zdCBhcmUgc3RvcHBlZC4gSWYgdGhlIGRlZGljYXRlZCBob3N0IGNhbm5vdCBiZSByZXBhaXJlZCx0aGUgaW5zdGFuY2VzIGFyZSBtaWdyYXRlZCB0byBhbm90aGVyIHBoeXNpY2FsIHNlcnZlciBhbmQgcmVzdGFydGVkLklmIHRoZSBkZWRpY2F0ZWQgaG9zdCBpcyBhdHRhY2hlZCB3aXRoIGxvY2FsIGRpc2tzLCB0aGUgZGVmYXVsdCB2YWx1ZSBpcyBTdG9wLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGFjdGlvbk9uTWFpbnRlbmFuY2U/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBhdXRvUGxhY2VtZW50OiBTcGVjaWZpZXMgd2hldGhlciB0aGUgZGVkaWNhdGVkIGhvc3QgaXMgYWRkZWQgdG8gdGhlIHJlc291cmNlIHBvb2wgZm9yIGF1dG9tYXRpYyBkZXBsb3ltZW50LiBJZiB5b3UgZG8gbm90IHNwZWNpZnkgdGhlIERlZGljYXRlZEhvc3RJZCBwYXJhbWV0ZXIgd2hlbiB5b3UgY3JlYXRlIGFuIGluc3RhbmNlIG9uIGEgZGVkaWNhdGVkIGhvc3QsIEFsaWJhYmEgQ2xvdWQgYXV0b21hdGljYWxseSBzZWxlY3RzIGEgZGVkaWNhdGVkIGhvc3QgZnJvbSB0aGUgcmVzb3VyY2UgcG9vbCB0byBob3N0IHRoZSBpbnN0YW5jZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSBBdXRvbWF0aWMgZGVwbG95bWVudC4gVmFsaWQgdmFsdWVzOm9uOiBUaGUgZGVkaWNhdGVkIGhvc3QgaXMgYWRkZWQgdG8gdGhlIHJlc291cmNlIHBvb2wgZm9yIGF1dG9tYXRpYyBkZXBsb3ltZW50Lm9mZjogVGhlIGRlZGljYXRlZCBob3N0IGlzIG5vdCBhZGRlZCB0byB0aGUgcmVzb3VyY2UgcG9vbCBmb3IgYXV0b21hdGljIGRlcGxveW1lbnQuRGVmYXVsdCB2YWx1ZTogb24uTm90ZSBXaGVuIHlvdSBjcmVhdGUgYSBkZWRpY2F0ZWQgaG9zdDogSWYgeW91IGRvIG5vdCBzcGVjaWZ5IHRoaXMgcGFyYW1ldGVyLCB0aGUgZGVkaWNhdGVkIGhvc3QgaXMgYWRkZWQgdG8gdGhlIGF1dG9tYXRpYyBkZXBsb3ltZW50IHJlc291cmNlIHBvb2wuSWYgeW91IGRvIG5vdCB3YW50IHRvIGFkZCB0aGUgZGVkaWNhdGVkIGhvc3QgdG8gdGhlIGF1dG9tYXRpYyBkZXBsb3ltZW50IHJlc291cmNlIHBvb2wsIHNldCB0aGUgdmFsdWUgdG8gb2ZmLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF1dG9QbGFjZW1lbnQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBhdXRvUmVsZWFzZVRpbWU6IEF1dG8gcmVsZWFzZSB0aW1lIGZvciBjcmVhdGVkIGhvc3QsIEZvbGxvdyBJU084NjAxIHN0YW5kYXJkIHVzaW5nIFVUQyB0aW1lLiBmb3JtYXQgaXMgJ3l5eXktTU0tZGRUSEg6bW06c3NaJy4gTm90IGJpZ2dlciB0aGFuIDMgeWVhcnMgZnJvbSB0aGlzIGRheSBvbndhcmRzXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXV0b1JlbGVhc2VUaW1lPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYXV0b1JlbmV3OiBXaGV0aGVyIHJlbmV3IHRoZSBmZWUgYXV0b21hdGljYWxseT8gV2hlbiB0aGUgcGFyYW1ldGVyIEluc3RhbmNlQ2hhcmdlVHlwZSBpcyBQcmVQYWlkLCBpdCB3aWxsIHRha2UgZWZmZWN0LiBSYW5nZSBvZiB2YWx1ZTpUcnVlOiBhdXRvbWF0aWMgcmVuZXdhbC5GYWxzZTogbm8gYXV0b21hdGljIHJlbmV3YWwuIERlZmF1bHQgdmFsdWUgaXMgRmFsc2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXV0b1JlbmV3Pzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYXV0b1JlbmV3UGVyaW9kOiBUaGUgdGltZSBwZXJpb2Qgb2YgYXV0byByZW5ldy4gV2hlbiB0aGUgcGFyYW1ldGVyIEluc3RhbmNlQ2hhcmdlVHlwZSBpcyBQcmVQYWlkLCBpdCB3aWxsIHRha2UgZWZmZWN0Lkl0IGNvdWxkIGJlIDEsIDIsIDMsIDYsIDEyLiBEZWZhdWx0IHZhbHVlIGlzIDEuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXV0b1JlbmV3UGVyaW9kPzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgY2hhcmdlVHlwZTogSW5zdGFuY2UgQ2hhcmdlIHR5cGUsIGFsbG93ZWQgdmFsdWU6IFByZXBhaWQgYW5kIFBvc3RwYWlkLiBJZiBzcGVjaWZpZWQgUHJlcGFpZCwgcGxlYXNlIGVuc3VyZSB5b3UgaGF2ZSBzdWZmaWNpZW50IGJhbGFuY2UgaW4geW91ciBhY2NvdW50LiBPciBpbnN0YW5jZSBjcmVhdGlvbiB3aWxsIGJlIGZhaWx1cmUuIERlZmF1bHQgdmFsdWUgaXMgUG9zdHBhaWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgY2hhcmdlVHlwZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRlZGljYXRlZEhvc3ROYW1lOiBUaGUgbmFtZSBvZiB0aGUgZGVkaWNhdGVkIGhvc3QsIFsyLCAxMjhdIEVuZ2xpc2ggb3IgQ2hpbmVzZSBjaGFyYWN0ZXJzLiBJdCBtdXN0IGJlZ2luIHdpdGggYW4gdXBwZXJjYXNlL2xvd2VyY2FzZSBsZXR0ZXIgb3IgYSBDaGluZXNlIGNoYXJhY3RlciwgYW5kIG1heSBjb250YWluIG51bWJlcnMsICdfJyBvciAnLScuIEl0IGNhbm5vdCBiZWdpbiB3aXRoIGh0dHA6Ly8gb3IgaHR0cHM6Ly8uXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVkaWNhdGVkSG9zdE5hbWU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkZXNjcmlwdGlvbjogVGhlIGRlc2NyaXB0aW9uIG9mIGhvc3QuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVzY3JpcHRpb24/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBuZXR3b3JrQXR0cmlidXRlc1NsYlVkcFRpbWVvdXQ6IFRoZSBkdXJhdGlvbiBvZiBVRFAgdGltZW91dCBmb3Igc2Vzc2lvbnMgYmV0d2VlbiBTZXJ2ZXIgTG9hZCBCYWxhbmNlciAoU0xCKSBhbmQgdGhlIGRlZGljYXRlZCBob3N0LiBVbml0OiBzZWNvbmRzLiBWYWxpZCB2YWx1ZXM6IDE1IHRvIDMxMC5cbiAgICAgKi9cbiAgICByZWFkb25seSBuZXR3b3JrQXR0cmlidXRlc1NsYlVkcFRpbWVvdXQ/OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBuZXR3b3JrQXR0cmlidXRlc1VkcFRpbWVvdXQ6IFRoZSBkdXJhdGlvbiBvZiBVRFAgdGltZW91dCBmb3Igc2Vzc2lvbnMgYmV0d2VlbiB1c2VycyBhbmQgaW5zdGFuY2VzIG9uIHRoZSBkZWRpY2F0ZWQgaG9zdC4gVW5pdDogc2Vjb25kcy4gVmFsaWQgdmFsdWVzOiAxNSB0byAzMTAuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbmV0d29ya0F0dHJpYnV0ZXNVZHBUaW1lb3V0PzogbnVtYmVyIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcGVyaW9kOiBQcmVwYWlkIHRpbWUgcGVyaW9kLiBVbml0IGlzIG1vbnRoLCBpdCBjb3VsZCBiZSBmcm9tIDEgdG8gOSBvciAxMiwgMjQsIDM2LCA0OCwgNjAuIERlZmF1bHQgdmFsdWUgaXMgMS5cbiAgICAgKi9cbiAgICByZWFkb25seSBwZXJpb2Q/OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBwZXJpb2RVbml0OiBVbml0IG9mIHByZXBhaWQgdGltZSBwZXJpb2QsIGl0IGNvdWxkIGJlIFdlZWsvTW9udGgvWWVhci4gRGVmYXVsdCB2YWx1ZSBpcyBNb250aC5cbiAgICAgKi9cbiAgICByZWFkb25seSBwZXJpb2RVbml0Pzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcXVhbnRpdHk6IFRoZSBudW1iZXIgb2YgZGVkaWNhdGVkIGhvc3RzIHRoYXQgeW91IHdhbnQgdG8gY3JlYXRlLiBWYWxpZCB2YWx1ZXM6IDEgdG8gMTAwLkRlZmF1bHQgdmFsdWU6IDEuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcXVhbnRpdHk/OiBudW1iZXIgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSByZXNvdXJjZUdyb3VwSWQ6IFRoZSBJRCBvZiB0aGUgcmVzb3VyY2UgZ3JvdXAuIElmIHRoaXMgaXMgbGVmdCBibGFuaywgdGhlIHN5c3RlbSBhdXRvbWF0aWNhbGx5IGZpbGxzIGluIHRoZSBJRCBvZiB0aGUgZGVmYXVsdCByZXNvdXJjZSBncm91cC5cbiAgICAgKi9cbiAgICByZWFkb25seSByZXNvdXJjZUdyb3VwSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB0YWdzOiBUYWdzIHRvIGF0dGFjaCB0byBpbnN0YW5jZS4gTWF4IHN1cHBvcnQgMjAgdGFncyB0byBhZGQgZHVyaW5nIGNyZWF0ZSBpbnN0YW5jZS4gRWFjaCB0YWcgd2l0aCB0d28gcHJvcGVydGllcyBLZXkgYW5kIFZhbHVlLCBhbmQgS2V5IGlzIHJlcXVpcmVkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHRhZ3M/OiBSb3NEZWRpY2F0ZWRIb3N0LlRhZ3NQcm9wZXJ0eVtdO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgem9uZUlkOiBUaGUgem9uZSB0byBjcmVhdGUgdGhlIGhvc3QuXG4gICAgICovXG4gICAgcmVhZG9ubHkgem9uZUlkPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIEEgUk9TIHJlc291cmNlIHR5cGU6ICBgQUxJWVVOOjpFQ1M6OkRlZGljYXRlZEhvc3RgXG4gKi9cbmV4cG9ydCBjbGFzcyBEZWRpY2F0ZWRIb3N0IGV4dGVuZHMgcm9zLlJlc291cmNlIHtcblxuICAgIC8qKlxuICAgICAqIEEgZmFjdG9yeSBtZXRob2QgdGhhdCBjcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIHRoaXMgY2xhc3MgZnJvbSBhbiBvYmplY3RcbiAgICAgKiBjb250YWluaW5nIHRoZSBwcm9wZXJ0aWVzIG9mIHRoaXMgUk9TIHJlc291cmNlLCB3aGljaCB3aWxsIGJlIGFzc2lnbmVkIHRvIFJPUyByZXNvdXJjZS5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBEZWRpY2F0ZWRIb3N0SWRzOiBUaGUgaG9zdCBpZCBsaXN0IG9mIGNyZWF0ZWQgaG9zdHNcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckRlZGljYXRlZEhvc3RJZHM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBPcmRlcklkOiBUaGUgb3JkZXIgaWQgbGlzdCBvZiBjcmVhdGVkIGluc3RhbmNlLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyT3JkZXJJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGBBTElZVU46OkVDUzo6RGVkaWNhdGVkSG9zdGAuXG4gICAgICpcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogRGVkaWNhdGVkSG9zdFByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIGNvbnN0IHJvc0RlZGljYXRlZEhvc3QgPSBuZXcgUm9zRGVkaWNhdGVkSG9zdCh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIGF1dG9SZW5ld1BlcmlvZDogcHJvcHMuYXV0b1JlbmV3UGVyaW9kID8gcHJvcHMuYXV0b1JlbmV3UGVyaW9kIDogMSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBwcm9wcy5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgIG5ldHdvcmtBdHRyaWJ1dGVzU2xiVWRwVGltZW91dDogcHJvcHMubmV0d29ya0F0dHJpYnV0ZXNTbGJVZHBUaW1lb3V0LFxuICAgICAgICAgICAgcmVzb3VyY2VHcm91cElkOiBwcm9wcy5yZXNvdXJjZUdyb3VwSWQsXG4gICAgICAgICAgICB6b25lSWQ6IHByb3BzLnpvbmVJZCxcbiAgICAgICAgICAgIG5ldHdvcmtBdHRyaWJ1dGVzVWRwVGltZW91dDogcHJvcHMubmV0d29ya0F0dHJpYnV0ZXNVZHBUaW1lb3V0LFxuICAgICAgICAgICAgYXV0b1JlbmV3OiBwcm9wcy5hdXRvUmVuZXcgPyBwcm9wcy5hdXRvUmVuZXcgOiAnRmFsc2UnLFxuICAgICAgICAgICAgYXV0b1BsYWNlbWVudDogcHJvcHMuYXV0b1BsYWNlbWVudCxcbiAgICAgICAgICAgIHF1YW50aXR5OiBwcm9wcy5xdWFudGl0eSA/IHByb3BzLnF1YW50aXR5IDogMSxcbiAgICAgICAgICAgIHBlcmlvZDogcHJvcHMucGVyaW9kID8gcHJvcHMucGVyaW9kIDogMSxcbiAgICAgICAgICAgIGRlZGljYXRlZEhvc3RUeXBlOiBwcm9wcy5kZWRpY2F0ZWRIb3N0VHlwZSxcbiAgICAgICAgICAgIGRlZGljYXRlZEhvc3ROYW1lOiBwcm9wcy5kZWRpY2F0ZWRIb3N0TmFtZSxcbiAgICAgICAgICAgIGNoYXJnZVR5cGU6IHByb3BzLmNoYXJnZVR5cGUgPyBwcm9wcy5jaGFyZ2VUeXBlIDogJ1Bvc3RQYWlkJyxcbiAgICAgICAgICAgIGFjdGlvbk9uTWFpbnRlbmFuY2U6IHByb3BzLmFjdGlvbk9uTWFpbnRlbmFuY2UsXG4gICAgICAgICAgICB0YWdzOiBwcm9wcy50YWdzLFxuICAgICAgICAgICAgcGVyaW9kVW5pdDogcHJvcHMucGVyaW9kVW5pdCA/IHByb3BzLnBlcmlvZFVuaXQgOiAnTW9udGgnLFxuICAgICAgICAgICAgYXV0b1JlbGVhc2VUaW1lOiBwcm9wcy5hdXRvUmVsZWFzZVRpbWUsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zRGVkaWNhdGVkSG9zdDtcbiAgICAgICAgdGhpcy5hdHRyRGVkaWNhdGVkSG9zdElkcyA9IHJvc0RlZGljYXRlZEhvc3QuYXR0ckRlZGljYXRlZEhvc3RJZHM7XG4gICAgICAgIHRoaXMuYXR0ck9yZGVySWQgPSByb3NEZWRpY2F0ZWRIb3N0LmF0dHJPcmRlcklkO1xuICAgIH1cbn1cbiJdfQ==