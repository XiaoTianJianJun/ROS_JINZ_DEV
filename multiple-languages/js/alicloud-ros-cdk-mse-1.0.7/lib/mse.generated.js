"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosGateway = exports.RosCluster = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosClusterProps`
 *
 * @param properties - the TypeScript properties of a `RosClusterProps`
 *
 * @returns the result of the validation.
 */
function RosClusterPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.mseVersion && (typeof properties.mseVersion) !== 'object') {
        errors.collect(ros.propertyValidator('mseVersion', ros.validateAllowedValues)({
            data: properties.mseVersion,
            allowedValues: ["mse_pro", "mse_basic"],
        }));
    }
    errors.collect(ros.propertyValidator('mseVersion', ros.validateString)(properties.mseVersion));
    errors.collect(ros.propertyValidator('privateSlbSpecification', ros.validateString)(properties.privateSlbSpecification));
    errors.collect(ros.propertyValidator('clusterVersion', ros.requiredValidator)(properties.clusterVersion));
    if (properties.clusterVersion && (typeof properties.clusterVersion) !== 'object') {
        errors.collect(ros.propertyValidator('clusterVersion', ros.validateAllowedValues)({
            data: properties.clusterVersion,
            allowedValues: ["ZooKeeper_3_5_5", "ZooKeeper_3_4_14", "NACOS_2_0_0", "NACOS_ANS_1_2_1"],
        }));
    }
    if (properties.clusterVersion && (typeof properties.clusterVersion) !== 'object') {
        errors.collect(ros.propertyValidator('clusterVersion', ros.validateAllowedPattern)({
            data: properties.clusterVersion,
            reg: /^[A-Za-z0-9_-]+$/
        }));
    }
    errors.collect(ros.propertyValidator('clusterVersion', ros.validateString)(properties.clusterVersion));
    if (properties.connectionType && (typeof properties.connectionType) !== 'object') {
        errors.collect(ros.propertyValidator('connectionType', ros.validateAllowedValues)({
            data: properties.connectionType,
            allowedValues: ["eni", "slb"],
        }));
    }
    if (properties.connectionType && (typeof properties.connectionType) !== 'object') {
        errors.collect(ros.propertyValidator('connectionType', ros.validateAllowedPattern)({
            data: properties.connectionType,
            reg: /^[A-Za-z0-9_-]+$/
        }));
    }
    errors.collect(ros.propertyValidator('connectionType', ros.validateString)(properties.connectionType));
    errors.collect(ros.propertyValidator('aclEntryList', ros.listValidator(ros.validateString))(properties.aclEntryList));
    errors.collect(ros.propertyValidator('clusterSpecification', ros.requiredValidator)(properties.clusterSpecification));
    if (properties.clusterSpecification && (typeof properties.clusterSpecification) !== 'object') {
        errors.collect(ros.propertyValidator('clusterSpecification', ros.validateAllowedValues)({
            data: properties.clusterSpecification,
            allowedValues: ["MSE_SC_1_2_200_c", "MSE_SC_2_4_200_c", "MSE_SC_4_8_200_c", "MSE_SC_8_16_200_c", "MSE_SC_16_32_200_c"],
        }));
    }
    if (properties.clusterSpecification && (typeof properties.clusterSpecification) !== 'object') {
        errors.collect(ros.propertyValidator('clusterSpecification', ros.validateAllowedPattern)({
            data: properties.clusterSpecification,
            reg: /^[A-Za-z0-9_-]+$/
        }));
    }
    errors.collect(ros.propertyValidator('clusterSpecification', ros.validateString)(properties.clusterSpecification));
    if (properties.vSwitchId && (typeof properties.vSwitchId) !== 'object') {
        errors.collect(ros.propertyValidator('vSwitchId', ros.validateAllowedPattern)({
            data: properties.vSwitchId,
            reg: /(.*)/
        }));
    }
    errors.collect(ros.propertyValidator('vSwitchId', ros.validateString)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('pubSlbSpecification', ros.validateString)(properties.pubSlbSpecification));
    errors.collect(ros.propertyValidator('clusterType', ros.requiredValidator)(properties.clusterType));
    if (properties.clusterType && (typeof properties.clusterType) !== 'object') {
        errors.collect(ros.propertyValidator('clusterType', ros.validateAllowedValues)({
            data: properties.clusterType,
            allowedValues: ["Nacos-Ans", "ZooKeeper"],
        }));
    }
    if (properties.clusterType && (typeof properties.clusterType) !== 'object') {
        errors.collect(ros.propertyValidator('clusterType', ros.validateAllowedPattern)({
            data: properties.clusterType,
            reg: /^[A-Za-z0-9_-]+$/
        }));
    }
    errors.collect(ros.propertyValidator('clusterType', ros.validateString)(properties.clusterType));
    if (properties.diskType && (typeof properties.diskType) !== 'object') {
        errors.collect(ros.propertyValidator('diskType', ros.validateAllowedPattern)({
            data: properties.diskType,
            reg: /^[A-Za-z0-9_-]+$/
        }));
    }
    errors.collect(ros.propertyValidator('diskType', ros.validateString)(properties.diskType));
    if (properties.clusterAliasName && (typeof properties.clusterAliasName) !== 'object') {
        errors.collect(ros.propertyValidator('clusterAliasName', ros.validateAllowedPattern)({
            data: properties.clusterAliasName,
            reg: /(.*)/
        }));
    }
    errors.collect(ros.propertyValidator('clusterAliasName', ros.validateString)(properties.clusterAliasName));
    errors.collect(ros.propertyValidator('instanceCount', ros.requiredValidator)(properties.instanceCount));
    if (properties.instanceCount && (typeof properties.instanceCount) !== 'object') {
        errors.collect(ros.propertyValidator('instanceCount', ros.validateAllowedValues)({
            data: properties.instanceCount,
            allowedValues: [1, 3, 5, 7, 9],
        }));
    }
    errors.collect(ros.propertyValidator('instanceCount', ros.validateNumber)(properties.instanceCount));
    if (properties.vpcId && (typeof properties.vpcId) !== 'object') {
        errors.collect(ros.propertyValidator('vpcId', ros.validateAllowedPattern)({
            data: properties.vpcId,
            reg: /(.*)/
        }));
    }
    errors.collect(ros.propertyValidator('vpcId', ros.validateString)(properties.vpcId));
    errors.collect(ros.propertyValidator('requestPars', ros.validateString)(properties.requestPars));
    if (properties.pubNetworkFlow && (typeof properties.pubNetworkFlow) !== 'object') {
        errors.collect(ros.propertyValidator('pubNetworkFlow', ros.validateAllowedPattern)({
            data: properties.pubNetworkFlow,
            reg: /^[0-9]*$/
        }));
    }
    errors.collect(ros.propertyValidator('pubNetworkFlow', ros.validateString)(properties.pubNetworkFlow));
    errors.collect(ros.propertyValidator('acceptLanguage', ros.validateString)(properties.acceptLanguage));
    errors.collect(ros.propertyValidator('netType', ros.requiredValidator)(properties.netType));
    if (properties.netType && (typeof properties.netType) !== 'object') {
        errors.collect(ros.propertyValidator('netType', ros.validateAllowedValues)({
            data: properties.netType,
            allowedValues: ["pubnet", "both", "privatenet"],
        }));
    }
    if (properties.netType && (typeof properties.netType) !== 'object') {
        errors.collect(ros.propertyValidator('netType', ros.validateAllowedPattern)({
            data: properties.netType,
            reg: /^[\u4E00-\u9FA5A-Za-z0-9_]+$/
        }));
    }
    errors.collect(ros.propertyValidator('netType', ros.validateString)(properties.netType));
    return errors.wrap('supplied properties not correct for "RosClusterProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::MSE::Cluster` resource
 *
 * @param properties - the TypeScript properties of a `RosClusterProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::MSE::Cluster` resource.
 */
// @ts-ignore TS6133
function rosClusterPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosClusterPropsValidator(properties).assertSuccess();
    }
    return {
        ClusterSpecification: ros.stringToRosTemplate(properties.clusterSpecification),
        ClusterType: ros.stringToRosTemplate(properties.clusterType),
        ClusterVersion: ros.stringToRosTemplate(properties.clusterVersion),
        InstanceCount: ros.numberToRosTemplate(properties.instanceCount),
        NetType: ros.stringToRosTemplate(properties.netType),
        AcceptLanguage: ros.stringToRosTemplate(properties.acceptLanguage),
        AclEntryList: ros.listMapper(ros.stringToRosTemplate)(properties.aclEntryList),
        ClusterAliasName: ros.stringToRosTemplate(properties.clusterAliasName),
        ConnectionType: ros.stringToRosTemplate(properties.connectionType),
        DiskType: ros.stringToRosTemplate(properties.diskType),
        MseVersion: ros.stringToRosTemplate(properties.mseVersion),
        PrivateSlbSpecification: ros.stringToRosTemplate(properties.privateSlbSpecification),
        PubNetworkFlow: ros.stringToRosTemplate(properties.pubNetworkFlow),
        PubSlbSpecification: ros.stringToRosTemplate(properties.pubSlbSpecification),
        RequestPars: ros.stringToRosTemplate(properties.requestPars),
        VpcId: ros.stringToRosTemplate(properties.vpcId),
        VSwitchId: ros.stringToRosTemplate(properties.vSwitchId),
    };
}
/**
 * A ROS template type:  `ALIYUN::MSE::Cluster`
 */
class RosCluster extends ros.RosResource {
    /**
     * Create a new `ALIYUN::MSE::Cluster`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosCluster.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAclEntryList = this.getAtt('AclEntryList');
        this.attrAclId = this.getAtt('AclId');
        this.attrAppVersion = this.getAtt('AppVersion');
        this.attrClusterAliasName = this.getAtt('ClusterAliasName');
        this.attrClusterId = this.getAtt('ClusterId');
        this.attrClusterName = this.getAtt('ClusterName');
        this.attrClusterSpecification = this.getAtt('ClusterSpecification');
        this.attrClusterType = this.getAtt('ClusterType');
        this.attrClusterVersion = this.getAtt('ClusterVersion');
        this.attrConnectionType = this.getAtt('ConnectionType');
        this.attrCpu = this.getAtt('Cpu');
        this.attrDiskCapacity = this.getAtt('DiskCapacity');
        this.attrDiskType = this.getAtt('DiskType');
        this.attrHealthStatus = this.getAtt('HealthStatus');
        this.attrInstanceCount = this.getAtt('InstanceCount');
        this.attrInstanceId = this.getAtt('InstanceId');
        this.attrInternetAddress = this.getAtt('InternetAddress');
        this.attrInternetDomain = this.getAtt('InternetDomain');
        this.attrInternetPort = this.getAtt('InternetPort');
        this.attrIntranetAddress = this.getAtt('IntranetAddress');
        this.attrIntranetDomain = this.getAtt('IntranetDomain');
        this.attrIntranetPort = this.getAtt('IntranetPort');
        this.attrMemoryCapacity = this.getAtt('MemoryCapacity');
        this.attrMseVersion = this.getAtt('MseVersion');
        this.attrNetType = this.getAtt('NetType');
        this.attrPayInfo = this.getAtt('PayInfo');
        this.attrPubNetworkFlow = this.getAtt('PubNetworkFlow');
        this.attrVSwitchId = this.getAtt('VSwitchId');
        this.attrVpcId = this.getAtt('VpcId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.clusterSpecification = props.clusterSpecification;
        this.clusterType = props.clusterType;
        this.clusterVersion = props.clusterVersion;
        this.instanceCount = props.instanceCount;
        this.netType = props.netType;
        this.acceptLanguage = props.acceptLanguage;
        this.aclEntryList = props.aclEntryList;
        this.clusterAliasName = props.clusterAliasName;
        this.connectionType = props.connectionType;
        this.diskType = props.diskType;
        this.mseVersion = props.mseVersion;
        this.privateSlbSpecification = props.privateSlbSpecification;
        this.pubNetworkFlow = props.pubNetworkFlow;
        this.pubSlbSpecification = props.pubSlbSpecification;
        this.requestPars = props.requestPars;
        this.vpcId = props.vpcId;
        this.vSwitchId = props.vSwitchId;
    }
    get rosProperties() {
        return {
            clusterSpecification: this.clusterSpecification,
            clusterType: this.clusterType,
            clusterVersion: this.clusterVersion,
            instanceCount: this.instanceCount,
            netType: this.netType,
            acceptLanguage: this.acceptLanguage,
            aclEntryList: this.aclEntryList,
            clusterAliasName: this.clusterAliasName,
            connectionType: this.connectionType,
            diskType: this.diskType,
            mseVersion: this.mseVersion,
            privateSlbSpecification: this.privateSlbSpecification,
            pubNetworkFlow: this.pubNetworkFlow,
            pubSlbSpecification: this.pubSlbSpecification,
            requestPars: this.requestPars,
            vpcId: this.vpcId,
            vSwitchId: this.vSwitchId,
        };
    }
    renderProperties(props) {
        return rosClusterPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosCluster = RosCluster;
/**
 * The resource type name for this resource class.
 */
RosCluster.ROS_RESOURCE_TYPE_NAME = "ALIYUN::MSE::Cluster";
/**
 * Determine whether the given properties match those of a `RosGatewayProps`
 *
 * @param properties - the TypeScript properties of a `RosGatewayProps`
 *
 * @returns the result of the validation.
 */
function RosGatewayPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('backupVSwitchId', ros.validateString)(properties.backupVSwitchId));
    errors.collect(ros.propertyValidator('enterpriseSecurityGroup', ros.validateString)(properties.enterpriseSecurityGroup));
    errors.collect(ros.propertyValidator('vpcId', ros.requiredValidator)(properties.vpcId));
    errors.collect(ros.propertyValidator('vpcId', ros.validateString)(properties.vpcId));
    errors.collect(ros.propertyValidator('vSwitchId', ros.requiredValidator)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('vSwitchId', ros.validateString)(properties.vSwitchId));
    errors.collect(ros.propertyValidator('slbSpec', ros.validateString)(properties.slbSpec));
    errors.collect(ros.propertyValidator('spec', ros.requiredValidator)(properties.spec));
    if (properties.spec && (typeof properties.spec) !== 'object') {
        errors.collect(ros.propertyValidator('spec', ros.validateAllowedValues)({
            data: properties.spec,
            allowedValues: ["MSE_GTW_2_4_200_c", "MSE_GTW_4_8_200_c", "MSE_GTW_8_16_200_c", "MSE_GTW_16_32_200_c"],
        }));
    }
    errors.collect(ros.propertyValidator('spec', ros.validateString)(properties.spec));
    errors.collect(ros.propertyValidator('internetSlbSpec', ros.validateString)(properties.internetSlbSpec));
    errors.collect(ros.propertyValidator('replica', ros.requiredValidator)(properties.replica));
    errors.collect(ros.propertyValidator('replica', ros.validateNumber)(properties.replica));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    return errors.wrap('supplied properties not correct for "RosGatewayProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::MSE::Gateway` resource
 *
 * @param properties - the TypeScript properties of a `RosGatewayProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::MSE::Gateway` resource.
 */
// @ts-ignore TS6133
function rosGatewayPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosGatewayPropsValidator(properties).assertSuccess();
    }
    return {
        Replica: ros.numberToRosTemplate(properties.replica),
        Spec: ros.stringToRosTemplate(properties.spec),
        VpcId: ros.stringToRosTemplate(properties.vpcId),
        VSwitchId: ros.stringToRosTemplate(properties.vSwitchId),
        BackupVSwitchId: ros.stringToRosTemplate(properties.backupVSwitchId),
        EnterpriseSecurityGroup: ros.stringToRosTemplate(properties.enterpriseSecurityGroup),
        InternetSlbSpec: ros.stringToRosTemplate(properties.internetSlbSpec),
        Name: ros.stringToRosTemplate(properties.name),
        SlbSpec: ros.stringToRosTemplate(properties.slbSpec),
    };
}
/**
 * A ROS template type:  `ALIYUN::MSE::Gateway`
 */
class RosGateway extends ros.RosResource {
    /**
     * Create a new `ALIYUN::MSE::Gateway`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosGateway.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrBackupVSwitchId = this.getAtt('BackupVSwitchId');
        this.attrGatewayUniqueId = this.getAtt('GatewayUniqueId');
        this.attrPaymentType = this.getAtt('PaymentType');
        this.attrReplica = this.getAtt('Replica');
        this.attrSpec = this.getAtt('Spec');
        this.attrVSwitchId = this.getAtt('VSwitchId');
        this.attrVpcId = this.getAtt('VpcId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.replica = props.replica;
        this.spec = props.spec;
        this.vpcId = props.vpcId;
        this.vSwitchId = props.vSwitchId;
        this.backupVSwitchId = props.backupVSwitchId;
        this.enterpriseSecurityGroup = props.enterpriseSecurityGroup;
        this.internetSlbSpec = props.internetSlbSpec;
        this.name = props.name;
        this.slbSpec = props.slbSpec;
    }
    get rosProperties() {
        return {
            replica: this.replica,
            spec: this.spec,
            vpcId: this.vpcId,
            vSwitchId: this.vSwitchId,
            backupVSwitchId: this.backupVSwitchId,
            enterpriseSecurityGroup: this.enterpriseSecurityGroup,
            internetSlbSpec: this.internetSlbSpec,
            name: this.name,
            slbSpec: this.slbSpec,
        };
    }
    renderProperties(props) {
        return rosGatewayPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosGateway = RosGateway;
/**
 * The resource type name for this resource class.
 */
RosGateway.ROS_RESOURCE_TYPE_NAME = "ALIYUN::MSE::Gateway";
//# sourceMappingURL=data:application/json;base64,