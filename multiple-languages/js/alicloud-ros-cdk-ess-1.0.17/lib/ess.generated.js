"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosScheduledTask = exports.RosScalingRule = exports.RosScalingGroupEnable = exports.RosScalingGroup = exports.RosScalingConfiguration = exports.RosLifecycleHook = exports.RosAlarmTaskEnable = exports.RosAlarmTask = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosAlarmTaskProps`
 *
 * @param properties - the TypeScript properties of a `RosAlarmTaskProps`
 *
 * @returns the result of the validation.
 */
function RosAlarmTaskPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.comparisonOperator && (typeof properties.comparisonOperator) !== 'object') {
        errors.collect(ros.propertyValidator('comparisonOperator', ros.validateAllowedValues)({
            data: properties.comparisonOperator,
            allowedValues: [">=", "<=", ">", "<"],
        }));
    }
    errors.collect(ros.propertyValidator('comparisonOperator', ros.validateString)(properties.comparisonOperator));
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('scalingGroupId', ros.requiredValidator)(properties.scalingGroupId));
    errors.collect(ros.propertyValidator('scalingGroupId', ros.validateString)(properties.scalingGroupId));
    if (properties.metricType && (typeof properties.metricType) !== 'object') {
        errors.collect(ros.propertyValidator('metricType', ros.validateAllowedValues)({
            data: properties.metricType,
            allowedValues: ["system", "custom"],
        }));
    }
    errors.collect(ros.propertyValidator('metricType', ros.validateString)(properties.metricType));
    if (properties.evaluationCount && (typeof properties.evaluationCount) !== 'object') {
        errors.collect(ros.propertyValidator('evaluationCount', ros.validateRange)({
            data: properties.evaluationCount,
            min: 1,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('evaluationCount', ros.validateNumber)(properties.evaluationCount));
    if (properties.period && (typeof properties.period) !== 'object') {
        errors.collect(ros.propertyValidator('period', ros.validateAllowedValues)({
            data: properties.period,
            allowedValues: [60, 120, 300, 900],
        }));
    }
    errors.collect(ros.propertyValidator('period', ros.validateNumber)(properties.period));
    if (properties.dimensions && (Array.isArray(properties.dimensions) || (typeof properties.dimensions) === 'string')) {
        errors.collect(ros.propertyValidator('dimensions', ros.validateLength)({
            data: properties.dimensions.length,
            min: 1,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('dimensions', ros.listValidator(RosAlarmTask_DimensionsPropertyValidator))(properties.dimensions));
    if (properties.statistics && (typeof properties.statistics) !== 'object') {
        errors.collect(ros.propertyValidator('statistics', ros.validateAllowedValues)({
            data: properties.statistics,
            allowedValues: ["Average", "Minimum", "Maximum"],
        }));
    }
    errors.collect(ros.propertyValidator('statistics', ros.validateString)(properties.statistics));
    errors.collect(ros.propertyValidator('name', ros.validateString)(properties.name));
    errors.collect(ros.propertyValidator('groupId', ros.validateNumber)(properties.groupId));
    errors.collect(ros.propertyValidator('metricName', ros.requiredValidator)(properties.metricName));
    errors.collect(ros.propertyValidator('metricName', ros.validateString)(properties.metricName));
    errors.collect(ros.propertyValidator('alarmAction', ros.requiredValidator)(properties.alarmAction));
    if (properties.alarmAction && (Array.isArray(properties.alarmAction) || (typeof properties.alarmAction) === 'string')) {
        errors.collect(ros.propertyValidator('alarmAction', ros.validateLength)({
            data: properties.alarmAction.length,
            min: 1,
            max: 5,
        }));
    }
    errors.collect(ros.propertyValidator('alarmAction', ros.listValidator(ros.validateString))(properties.alarmAction));
    errors.collect(ros.propertyValidator('threshold', ros.requiredValidator)(properties.threshold));
    errors.collect(ros.propertyValidator('threshold', ros.validateNumber)(properties.threshold));
    return errors.wrap('supplied properties not correct for "RosAlarmTaskProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::AlarmTask` resource
 *
 * @param properties - the TypeScript properties of a `RosAlarmTaskProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::AlarmTask` resource.
 */
// @ts-ignore TS6133
function rosAlarmTaskPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosAlarmTaskPropsValidator(properties).assertSuccess();
    }
    return {
        AlarmAction: ros.listMapper(ros.stringToRosTemplate)(properties.alarmAction),
        MetricName: ros.stringToRosTemplate(properties.metricName),
        ScalingGroupId: ros.stringToRosTemplate(properties.scalingGroupId),
        Threshold: ros.numberToRosTemplate(properties.threshold),
        ComparisonOperator: ros.stringToRosTemplate(properties.comparisonOperator),
        Description: ros.stringToRosTemplate(properties.description),
        Dimensions: ros.listMapper(rosAlarmTaskDimensionsPropertyToRosTemplate)(properties.dimensions),
        EvaluationCount: ros.numberToRosTemplate(properties.evaluationCount),
        GroupId: ros.numberToRosTemplate(properties.groupId),
        MetricType: ros.stringToRosTemplate(properties.metricType),
        Name: ros.stringToRosTemplate(properties.name),
        Period: ros.numberToRosTemplate(properties.period),
        Statistics: ros.stringToRosTemplate(properties.statistics),
    };
}
/**
 * A ROS template type:  `ALIYUN::ESS::AlarmTask`
 */
class RosAlarmTask extends ros.RosResource {
    /**
     * Create a new `ALIYUN::ESS::AlarmTask`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosAlarmTask.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrAlarmTaskId = this.getAtt('AlarmTaskId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.alarmAction = props.alarmAction;
        this.metricName = props.metricName;
        this.scalingGroupId = props.scalingGroupId;
        this.threshold = props.threshold;
        this.comparisonOperator = props.comparisonOperator;
        this.description = props.description;
        this.dimensions = props.dimensions;
        this.evaluationCount = props.evaluationCount;
        this.groupId = props.groupId;
        this.metricType = props.metricType;
        this.name = props.name;
        this.period = props.period;
        this.statistics = props.statistics;
    }
    get rosProperties() {
        return {
            alarmAction: this.alarmAction,
            metricName: this.metricName,
            scalingGroupId: this.scalingGroupId,
            threshold: this.threshold,
            comparisonOperator: this.comparisonOperator,
            description: this.description,
            dimensions: this.dimensions,
            evaluationCount: this.evaluationCount,
            groupId: this.groupId,
            metricType: this.metricType,
            name: this.name,
            period: this.period,
            statistics: this.statistics,
        };
    }
    renderProperties(props) {
        return rosAlarmTaskPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosAlarmTask = RosAlarmTask;
/**
 * The resource type name for this resource class.
 */
RosAlarmTask.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ESS::AlarmTask";
/**
 * Determine whether the given properties match those of a `DimensionsProperty`
 *
 * @param properties - the TypeScript properties of a `DimensionsProperty`
 *
 * @returns the result of the validation.
 */
function RosAlarmTask_DimensionsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('dimensionValue', ros.requiredValidator)(properties.dimensionValue));
    errors.collect(ros.propertyValidator('dimensionValue', ros.validateString)(properties.dimensionValue));
    errors.collect(ros.propertyValidator('dimensionKey', ros.requiredValidator)(properties.dimensionKey));
    errors.collect(ros.propertyValidator('dimensionKey', ros.validateString)(properties.dimensionKey));
    return errors.wrap('supplied properties not correct for "DimensionsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::AlarmTask.Dimensions` resource
 *
 * @param properties - the TypeScript properties of a `DimensionsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::AlarmTask.Dimensions` resource.
 */
// @ts-ignore TS6133
function rosAlarmTaskDimensionsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosAlarmTask_DimensionsPropertyValidator(properties).assertSuccess();
    return {
        DimensionValue: ros.stringToRosTemplate(properties.dimensionValue),
        DimensionKey: ros.stringToRosTemplate(properties.dimensionKey),
    };
}
/**
 * Determine whether the given properties match those of a `RosAlarmTaskEnableProps`
 *
 * @param properties - the TypeScript properties of a `RosAlarmTaskEnableProps`
 *
 * @returns the result of the validation.
 */
function RosAlarmTaskEnablePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('enable', ros.requiredValidator)(properties.enable));
    errors.collect(ros.propertyValidator('enable', ros.validateBoolean)(properties.enable));
    errors.collect(ros.propertyValidator('alarmTaskId', ros.requiredValidator)(properties.alarmTaskId));
    errors.collect(ros.propertyValidator('alarmTaskId', ros.validateString)(properties.alarmTaskId));
    return errors.wrap('supplied properties not correct for "RosAlarmTaskEnableProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::AlarmTaskEnable` resource
 *
 * @param properties - the TypeScript properties of a `RosAlarmTaskEnableProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::AlarmTaskEnable` resource.
 */
// @ts-ignore TS6133
function rosAlarmTaskEnablePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosAlarmTaskEnablePropsValidator(properties).assertSuccess();
    }
    return {
        AlarmTaskId: ros.stringToRosTemplate(properties.alarmTaskId),
        Enable: ros.booleanToRosTemplate(properties.enable),
    };
}
/**
 * A ROS template type:  `ALIYUN::ESS::AlarmTaskEnable`
 */
class RosAlarmTaskEnable extends ros.RosResource {
    /**
     * Create a new `ALIYUN::ESS::AlarmTaskEnable`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosAlarmTaskEnable.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.alarmTaskId = props.alarmTaskId;
        this.enable = props.enable;
    }
    get rosProperties() {
        return {
            alarmTaskId: this.alarmTaskId,
            enable: this.enable,
        };
    }
    renderProperties(props) {
        return rosAlarmTaskEnablePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosAlarmTaskEnable = RosAlarmTaskEnable;
/**
 * The resource type name for this resource class.
 */
RosAlarmTaskEnable.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ESS::AlarmTaskEnable";
/**
 * Determine whether the given properties match those of a `RosLifecycleHookProps`
 *
 * @param properties - the TypeScript properties of a `RosLifecycleHookProps`
 *
 * @returns the result of the validation.
 */
function RosLifecycleHookPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.lifecycleHookName && (typeof properties.lifecycleHookName) !== 'object') {
        errors.collect(ros.propertyValidator('lifecycleHookName', ros.validateAllowedPattern)({
            data: properties.lifecycleHookName,
            reg: /^[a-zA-Z0-9\u4e00-\u9fa5][-_.a-zA-Z0-9\u4e00-\u9fa5]{1,63}$/
        }));
    }
    errors.collect(ros.propertyValidator('lifecycleHookName', ros.validateString)(properties.lifecycleHookName));
    if (properties.notificationArn && (Array.isArray(properties.notificationArn) || (typeof properties.notificationArn) === 'string')) {
        errors.collect(ros.propertyValidator('notificationArn', ros.validateLength)({
            data: properties.notificationArn.length,
            min: undefined,
            max: 300,
        }));
    }
    if (properties.notificationArn && (typeof properties.notificationArn) !== 'object') {
        errors.collect(ros.propertyValidator('notificationArn', ros.validateAllowedPattern)({
            data: properties.notificationArn,
            reg: /^acs:ess:([a-zA-Z0-9-]+):(\d+):(queue|topic|oos)\/([a-zA-Z0-9][-_a-zA-Z0-9]{0,255})$/
        }));
    }
    errors.collect(ros.propertyValidator('notificationArn', ros.validateString)(properties.notificationArn));
    errors.collect(ros.propertyValidator('scalingGroupId', ros.requiredValidator)(properties.scalingGroupId));
    errors.collect(ros.propertyValidator('scalingGroupId', ros.validateString)(properties.scalingGroupId));
    errors.collect(ros.propertyValidator('lifecycleTransition', ros.requiredValidator)(properties.lifecycleTransition));
    if (properties.lifecycleTransition && (typeof properties.lifecycleTransition) !== 'object') {
        errors.collect(ros.propertyValidator('lifecycleTransition', ros.validateAllowedValues)({
            data: properties.lifecycleTransition,
            allowedValues: ["SCALE_OUT", "SCALE_IN"],
        }));
    }
    errors.collect(ros.propertyValidator('lifecycleTransition', ros.validateString)(properties.lifecycleTransition));
    if (properties.heartbeatTimeout && (typeof properties.heartbeatTimeout) !== 'object') {
        errors.collect(ros.propertyValidator('heartbeatTimeout', ros.validateRange)({
            data: properties.heartbeatTimeout,
            min: 30,
            max: 86400,
        }));
    }
    errors.collect(ros.propertyValidator('heartbeatTimeout', ros.validateNumber)(properties.heartbeatTimeout));
    if (properties.notificationMetadata && (Array.isArray(properties.notificationMetadata) || (typeof properties.notificationMetadata) === 'string')) {
        errors.collect(ros.propertyValidator('notificationMetadata', ros.validateLength)({
            data: properties.notificationMetadata.length,
            min: undefined,
            max: 4096,
        }));
    }
    errors.collect(ros.propertyValidator('notificationMetadata', ros.validateString)(properties.notificationMetadata));
    if (properties.defaultResult && (typeof properties.defaultResult) !== 'object') {
        errors.collect(ros.propertyValidator('defaultResult', ros.validateAllowedValues)({
            data: properties.defaultResult,
            allowedValues: ["CONTINUE", "ABANDON", "ROLLBACK"],
        }));
    }
    errors.collect(ros.propertyValidator('defaultResult', ros.validateString)(properties.defaultResult));
    return errors.wrap('supplied properties not correct for "RosLifecycleHookProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::LifecycleHook` resource
 *
 * @param properties - the TypeScript properties of a `RosLifecycleHookProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::LifecycleHook` resource.
 */
// @ts-ignore TS6133
function rosLifecycleHookPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosLifecycleHookPropsValidator(properties).assertSuccess();
    }
    return {
        LifecycleTransition: ros.stringToRosTemplate(properties.lifecycleTransition),
        ScalingGroupId: ros.stringToRosTemplate(properties.scalingGroupId),
        DefaultResult: ros.stringToRosTemplate(properties.defaultResult),
        HeartbeatTimeout: ros.numberToRosTemplate(properties.heartbeatTimeout),
        LifecycleHookName: ros.stringToRosTemplate(properties.lifecycleHookName),
        NotificationArn: ros.stringToRosTemplate(properties.notificationArn),
        NotificationMetadata: ros.stringToRosTemplate(properties.notificationMetadata),
    };
}
/**
 * A ROS template type:  `ALIYUN::ESS::LifecycleHook`
 */
class RosLifecycleHook extends ros.RosResource {
    /**
     * Create a new `ALIYUN::ESS::LifecycleHook`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosLifecycleHook.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrLifecycleHookId = this.getAtt('LifecycleHookId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.lifecycleTransition = props.lifecycleTransition;
        this.scalingGroupId = props.scalingGroupId;
        this.defaultResult = props.defaultResult;
        this.heartbeatTimeout = props.heartbeatTimeout;
        this.lifecycleHookName = props.lifecycleHookName;
        this.notificationArn = props.notificationArn;
        this.notificationMetadata = props.notificationMetadata;
    }
    get rosProperties() {
        return {
            lifecycleTransition: this.lifecycleTransition,
            scalingGroupId: this.scalingGroupId,
            defaultResult: this.defaultResult,
            heartbeatTimeout: this.heartbeatTimeout,
            lifecycleHookName: this.lifecycleHookName,
            notificationArn: this.notificationArn,
            notificationMetadata: this.notificationMetadata,
        };
    }
    renderProperties(props) {
        return rosLifecycleHookPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosLifecycleHook = RosLifecycleHook;
/**
 * The resource type name for this resource class.
 */
RosLifecycleHook.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ESS::LifecycleHook";
/**
 * Determine whether the given properties match those of a `RosScalingConfigurationProps`
 *
 * @param properties - the TypeScript properties of a `RosScalingConfigurationProps`
 *
 * @returns the result of the validation.
 */
function RosScalingConfigurationPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('scalingConfigurationName', ros.validateString)(properties.scalingConfigurationName));
    errors.collect(ros.propertyValidator('resourceGroupId', ros.validateString)(properties.resourceGroupId));
    errors.collect(ros.propertyValidator('diskMappings', ros.listValidator(RosScalingConfiguration_DiskMappingsPropertyValidator))(properties.diskMappings));
    if (properties.systemDiskSize && (typeof properties.systemDiskSize) !== 'object') {
        errors.collect(ros.propertyValidator('systemDiskSize', ros.validateRange)({
            data: properties.systemDiskSize,
            min: 20,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('systemDiskSize', ros.validateNumber)(properties.systemDiskSize));
    errors.collect(ros.propertyValidator('userData', ros.validateString)(properties.userData));
    errors.collect(ros.propertyValidator('systemDiskAutoSnapshotPolicyId', ros.validateString)(properties.systemDiskAutoSnapshotPolicyId));
    errors.collect(ros.propertyValidator('ramRoleName', ros.validateString)(properties.ramRoleName));
    errors.collect(ros.propertyValidator('systemDiskPerformanceLevel', ros.validateString)(properties.systemDiskPerformanceLevel));
    errors.collect(ros.propertyValidator('spotPriceLimitForInstanceType', ros.hashValidator(ros.validateAny))(properties.spotPriceLimitForInstanceType));
    if (properties.ipv6AddressCount && (typeof properties.ipv6AddressCount) !== 'object') {
        errors.collect(ros.propertyValidator('ipv6AddressCount', ros.validateRange)({
            data: properties.ipv6AddressCount,
            min: 0,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('ipv6AddressCount', ros.validateNumber)(properties.ipv6AddressCount));
    errors.collect(ros.propertyValidator('imageId', ros.validateString)(properties.imageId));
    errors.collect(ros.propertyValidator('spotPriceLimit', ros.validateNumber)(properties.spotPriceLimit));
    if (properties.tagList && (Array.isArray(properties.tagList) || (typeof properties.tagList) === 'string')) {
        errors.collect(ros.propertyValidator('tagList', ros.validateLength)({
            data: properties.tagList.length,
            min: undefined,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('tagList', ros.listValidator(RosScalingConfiguration_TagListPropertyValidator))(properties.tagList));
    if (properties.instanceTypes && (Array.isArray(properties.instanceTypes) || (typeof properties.instanceTypes) === 'string')) {
        errors.collect(ros.propertyValidator('instanceTypes', ros.validateLength)({
            data: properties.instanceTypes.length,
            min: 1,
            max: 10,
        }));
    }
    errors.collect(ros.propertyValidator('instanceTypes', ros.listValidator(ros.validateAny))(properties.instanceTypes));
    errors.collect(ros.propertyValidator('instanceType', ros.validateString)(properties.instanceType));
    errors.collect(ros.propertyValidator('hostName', ros.validateString)(properties.hostName));
    if (properties.spotStrategy && (typeof properties.spotStrategy) !== 'object') {
        errors.collect(ros.propertyValidator('spotStrategy', ros.validateAllowedValues)({
            data: properties.spotStrategy,
            allowedValues: ["NoSpot", "SpotWithPriceLimit", "SpotAsPriceGo"],
        }));
    }
    errors.collect(ros.propertyValidator('spotStrategy', ros.validateString)(properties.spotStrategy));
    errors.collect(ros.propertyValidator('passwordInherit', ros.validateBoolean)(properties.passwordInherit));
    errors.collect(ros.propertyValidator('password', ros.validateString)(properties.password));
    errors.collect(ros.propertyValidator('keyPairName', ros.validateString)(properties.keyPairName));
    if (properties.loadBalancerWeight && (typeof properties.loadBalancerWeight) !== 'object') {
        errors.collect(ros.propertyValidator('loadBalancerWeight', ros.validateRange)({
            data: properties.loadBalancerWeight,
            min: 1,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('loadBalancerWeight', ros.validateNumber)(properties.loadBalancerWeight));
    if (properties.ioOptimized && (typeof properties.ioOptimized) !== 'object') {
        errors.collect(ros.propertyValidator('ioOptimized', ros.validateAllowedValues)({
            data: properties.ioOptimized,
            allowedValues: ["none", "optimized"],
        }));
    }
    errors.collect(ros.propertyValidator('ioOptimized', ros.validateString)(properties.ioOptimized));
    errors.collect(ros.propertyValidator('instanceId', ros.validateString)(properties.instanceId));
    errors.collect(ros.propertyValidator('hpcClusterId', ros.validateString)(properties.hpcClusterId));
    errors.collect(ros.propertyValidator('scalingGroupId', ros.requiredValidator)(properties.scalingGroupId));
    errors.collect(ros.propertyValidator('scalingGroupId', ros.validateString)(properties.scalingGroupId));
    errors.collect(ros.propertyValidator('securityGroupId', ros.validateString)(properties.securityGroupId));
    errors.collect(ros.propertyValidator('imageFamily', ros.validateString)(properties.imageFamily));
    if (properties.systemDiskCategory && (typeof properties.systemDiskCategory) !== 'object') {
        errors.collect(ros.propertyValidator('systemDiskCategory', ros.validateAllowedValues)({
            data: properties.systemDiskCategory,
            allowedValues: ["cloud", "cloud_efficiency", "cloud_ssd", "cloud_essd", "ephemeral_ssd", "cloud_auto"],
        }));
    }
    errors.collect(ros.propertyValidator('systemDiskCategory', ros.validateString)(properties.systemDiskCategory));
    if (properties.internetChargeType && (typeof properties.internetChargeType) !== 'object') {
        errors.collect(ros.propertyValidator('internetChargeType', ros.validateAllowedValues)({
            data: properties.internetChargeType,
            allowedValues: ["paybytraffic", "PayByTraffic", "paybybandwidth", "PayByBandwidth"],
        }));
    }
    errors.collect(ros.propertyValidator('internetChargeType', ros.validateString)(properties.internetChargeType));
    errors.collect(ros.propertyValidator('instanceName', ros.validateString)(properties.instanceName));
    errors.collect(ros.propertyValidator('deploymentSetId', ros.validateString)(properties.deploymentSetId));
    if (properties.internetMaxBandwidthOut && (typeof properties.internetMaxBandwidthOut) !== 'object') {
        errors.collect(ros.propertyValidator('internetMaxBandwidthOut', ros.validateRange)({
            data: properties.internetMaxBandwidthOut,
            min: 0,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('internetMaxBandwidthOut', ros.validateNumber)(properties.internetMaxBandwidthOut));
    if (properties.internetMaxBandwidthIn && (typeof properties.internetMaxBandwidthIn) !== 'object') {
        errors.collect(ros.propertyValidator('internetMaxBandwidthIn', ros.validateRange)({
            data: properties.internetMaxBandwidthIn,
            min: 1,
            max: 200,
        }));
    }
    errors.collect(ros.propertyValidator('internetMaxBandwidthIn', ros.validateNumber)(properties.internetMaxBandwidthIn));
    if (properties.creditSpecification && (typeof properties.creditSpecification) !== 'object') {
        errors.collect(ros.propertyValidator('creditSpecification', ros.validateAllowedValues)({
            data: properties.creditSpecification,
            allowedValues: ["Standard", "Unlimited"],
        }));
    }
    errors.collect(ros.propertyValidator('creditSpecification', ros.validateString)(properties.creditSpecification));
    return errors.wrap('supplied properties not correct for "RosScalingConfigurationProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingConfiguration` resource
 *
 * @param properties - the TypeScript properties of a `RosScalingConfigurationProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingConfiguration` resource.
 */
// @ts-ignore TS6133
function rosScalingConfigurationPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosScalingConfigurationPropsValidator(properties).assertSuccess();
    }
    return {
        ScalingGroupId: ros.stringToRosTemplate(properties.scalingGroupId),
        CreditSpecification: ros.stringToRosTemplate(properties.creditSpecification),
        DeploymentSetId: ros.stringToRosTemplate(properties.deploymentSetId),
        DiskMappings: ros.listMapper(rosScalingConfigurationDiskMappingsPropertyToRosTemplate)(properties.diskMappings),
        HostName: ros.stringToRosTemplate(properties.hostName),
        HpcClusterId: ros.stringToRosTemplate(properties.hpcClusterId),
        ImageFamily: ros.stringToRosTemplate(properties.imageFamily),
        ImageId: ros.stringToRosTemplate(properties.imageId),
        InstanceId: ros.stringToRosTemplate(properties.instanceId),
        InstanceName: ros.stringToRosTemplate(properties.instanceName),
        InstanceType: ros.stringToRosTemplate(properties.instanceType),
        InstanceTypes: ros.listMapper(ros.objectToRosTemplate)(properties.instanceTypes),
        InternetChargeType: ros.stringToRosTemplate(properties.internetChargeType),
        InternetMaxBandwidthIn: ros.numberToRosTemplate(properties.internetMaxBandwidthIn),
        InternetMaxBandwidthOut: ros.numberToRosTemplate(properties.internetMaxBandwidthOut),
        IoOptimized: ros.stringToRosTemplate(properties.ioOptimized),
        Ipv6AddressCount: ros.numberToRosTemplate(properties.ipv6AddressCount),
        KeyPairName: ros.stringToRosTemplate(properties.keyPairName),
        LoadBalancerWeight: ros.numberToRosTemplate(properties.loadBalancerWeight),
        Password: ros.stringToRosTemplate(properties.password),
        PasswordInherit: ros.booleanToRosTemplate(properties.passwordInherit),
        RamRoleName: ros.stringToRosTemplate(properties.ramRoleName),
        ResourceGroupId: ros.stringToRosTemplate(properties.resourceGroupId),
        ScalingConfigurationName: ros.stringToRosTemplate(properties.scalingConfigurationName),
        SecurityGroupId: ros.stringToRosTemplate(properties.securityGroupId),
        SpotPriceLimit: ros.numberToRosTemplate(properties.spotPriceLimit),
        SpotPriceLimitForInstanceType: ros.hashMapper(ros.objectToRosTemplate)(properties.spotPriceLimitForInstanceType),
        SpotStrategy: ros.stringToRosTemplate(properties.spotStrategy),
        SystemDiskAutoSnapshotPolicyId: ros.stringToRosTemplate(properties.systemDiskAutoSnapshotPolicyId),
        SystemDiskCategory: ros.stringToRosTemplate(properties.systemDiskCategory),
        SystemDiskPerformanceLevel: ros.stringToRosTemplate(properties.systemDiskPerformanceLevel),
        SystemDiskSize: ros.numberToRosTemplate(properties.systemDiskSize),
        TagList: ros.listMapper(rosScalingConfigurationTagListPropertyToRosTemplate)(properties.tagList),
        UserData: ros.stringToRosTemplate(properties.userData),
    };
}
/**
 * A ROS template type:  `ALIYUN::ESS::ScalingConfiguration`
 */
class RosScalingConfiguration extends ros.RosResource {
    /**
     * Create a new `ALIYUN::ESS::ScalingConfiguration`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosScalingConfiguration.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrScalingConfigurationId = this.getAtt('ScalingConfigurationId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.scalingGroupId = props.scalingGroupId;
        this.creditSpecification = props.creditSpecification;
        this.deploymentSetId = props.deploymentSetId;
        this.diskMappings = props.diskMappings;
        this.hostName = props.hostName;
        this.hpcClusterId = props.hpcClusterId;
        this.imageFamily = props.imageFamily;
        this.imageId = props.imageId;
        this.instanceId = props.instanceId;
        this.instanceName = props.instanceName;
        this.instanceType = props.instanceType;
        this.instanceTypes = props.instanceTypes;
        this.internetChargeType = props.internetChargeType;
        this.internetMaxBandwidthIn = props.internetMaxBandwidthIn;
        this.internetMaxBandwidthOut = props.internetMaxBandwidthOut;
        this.ioOptimized = props.ioOptimized;
        this.ipv6AddressCount = props.ipv6AddressCount;
        this.keyPairName = props.keyPairName;
        this.loadBalancerWeight = props.loadBalancerWeight;
        this.password = props.password;
        this.passwordInherit = props.passwordInherit;
        this.ramRoleName = props.ramRoleName;
        this.resourceGroupId = props.resourceGroupId;
        this.scalingConfigurationName = props.scalingConfigurationName;
        this.securityGroupId = props.securityGroupId;
        this.spotPriceLimit = props.spotPriceLimit;
        this.spotPriceLimitForInstanceType = props.spotPriceLimitForInstanceType;
        this.spotStrategy = props.spotStrategy;
        this.systemDiskAutoSnapshotPolicyId = props.systemDiskAutoSnapshotPolicyId;
        this.systemDiskCategory = props.systemDiskCategory;
        this.systemDiskPerformanceLevel = props.systemDiskPerformanceLevel;
        this.systemDiskSize = props.systemDiskSize;
        this.tagList = props.tagList;
        this.userData = props.userData;
    }
    get rosProperties() {
        return {
            scalingGroupId: this.scalingGroupId,
            creditSpecification: this.creditSpecification,
            deploymentSetId: this.deploymentSetId,
            diskMappings: this.diskMappings,
            hostName: this.hostName,
            hpcClusterId: this.hpcClusterId,
            imageFamily: this.imageFamily,
            imageId: this.imageId,
            instanceId: this.instanceId,
            instanceName: this.instanceName,
            instanceType: this.instanceType,
            instanceTypes: this.instanceTypes,
            internetChargeType: this.internetChargeType,
            internetMaxBandwidthIn: this.internetMaxBandwidthIn,
            internetMaxBandwidthOut: this.internetMaxBandwidthOut,
            ioOptimized: this.ioOptimized,
            ipv6AddressCount: this.ipv6AddressCount,
            keyPairName: this.keyPairName,
            loadBalancerWeight: this.loadBalancerWeight,
            password: this.password,
            passwordInherit: this.passwordInherit,
            ramRoleName: this.ramRoleName,
            resourceGroupId: this.resourceGroupId,
            scalingConfigurationName: this.scalingConfigurationName,
            securityGroupId: this.securityGroupId,
            spotPriceLimit: this.spotPriceLimit,
            spotPriceLimitForInstanceType: this.spotPriceLimitForInstanceType,
            spotStrategy: this.spotStrategy,
            systemDiskAutoSnapshotPolicyId: this.systemDiskAutoSnapshotPolicyId,
            systemDiskCategory: this.systemDiskCategory,
            systemDiskPerformanceLevel: this.systemDiskPerformanceLevel,
            systemDiskSize: this.systemDiskSize,
            tagList: this.tagList,
            userData: this.userData,
        };
    }
    renderProperties(props) {
        return rosScalingConfigurationPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosScalingConfiguration = RosScalingConfiguration;
/**
 * The resource type name for this resource class.
 */
RosScalingConfiguration.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ESS::ScalingConfiguration";
/**
 * Determine whether the given properties match those of a `DiskMappingsProperty`
 *
 * @param properties - the TypeScript properties of a `DiskMappingsProperty`
 *
 * @returns the result of the validation.
 */
function RosScalingConfiguration_DiskMappingsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('snapshotId', ros.validateString)(properties.snapshotId));
    errors.collect(ros.propertyValidator('category', ros.validateString)(properties.category));
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('kmsKeyId', ros.validateString)(properties.kmsKeyId));
    if (properties.encrypted && (typeof properties.encrypted) !== 'object') {
        errors.collect(ros.propertyValidator('encrypted', ros.validateAllowedValues)({
            data: properties.encrypted,
            allowedValues: ["true", "false"],
        }));
    }
    errors.collect(ros.propertyValidator('encrypted', ros.validateString)(properties.encrypted));
    errors.collect(ros.propertyValidator('device', ros.validateString)(properties.device));
    errors.collect(ros.propertyValidator('performanceLevel', ros.validateString)(properties.performanceLevel));
    errors.collect(ros.propertyValidator('size', ros.validateString)(properties.size));
    errors.collect(ros.propertyValidator('autoSnapshotPolicyId', ros.validateString)(properties.autoSnapshotPolicyId));
    errors.collect(ros.propertyValidator('diskName', ros.validateString)(properties.diskName));
    return errors.wrap('supplied properties not correct for "DiskMappingsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingConfiguration.DiskMappings` resource
 *
 * @param properties - the TypeScript properties of a `DiskMappingsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingConfiguration.DiskMappings` resource.
 */
// @ts-ignore TS6133
function rosScalingConfigurationDiskMappingsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosScalingConfiguration_DiskMappingsPropertyValidator(properties).assertSuccess();
    return {
        SnapshotId: ros.stringToRosTemplate(properties.snapshotId),
        Category: ros.stringToRosTemplate(properties.category),
        Description: ros.stringToRosTemplate(properties.description),
        KMSKeyId: ros.stringToRosTemplate(properties.kmsKeyId),
        Encrypted: ros.stringToRosTemplate(properties.encrypted),
        Device: ros.stringToRosTemplate(properties.device),
        PerformanceLevel: ros.stringToRosTemplate(properties.performanceLevel),
        Size: ros.stringToRosTemplate(properties.size),
        AutoSnapshotPolicyId: ros.stringToRosTemplate(properties.autoSnapshotPolicyId),
        DiskName: ros.stringToRosTemplate(properties.diskName),
    };
}
/**
 * Determine whether the given properties match those of a `TagListProperty`
 *
 * @param properties - the TypeScript properties of a `TagListProperty`
 *
 * @returns the result of the validation.
 */
function RosScalingConfiguration_TagListPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.requiredValidator)(properties.key));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "TagListProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingConfiguration.TagList` resource
 *
 * @param properties - the TypeScript properties of a `TagListProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingConfiguration.TagList` resource.
 */
// @ts-ignore TS6133
function rosScalingConfigurationTagListPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosScalingConfiguration_TagListPropertyValidator(properties).assertSuccess();
    return {
        Value: ros.stringToRosTemplate(properties.value),
        Key: ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `RosScalingGroupProps`
 *
 * @param properties - the TypeScript properties of a `RosScalingGroupProps`
 *
 * @returns the result of the validation.
 */
function RosScalingGroupPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('spotInstanceRemedy', ros.validateBoolean)(properties.spotInstanceRemedy));
    errors.collect(ros.propertyValidator('compensateWithOnDemand', ros.validateBoolean)(properties.compensateWithOnDemand));
    errors.collect(ros.propertyValidator('notificationConfigurations', ros.listValidator(RosScalingGroup_NotificationConfigurationsPropertyValidator))(properties.notificationConfigurations));
    if (properties.onDemandPercentageAboveBaseCapacity && (typeof properties.onDemandPercentageAboveBaseCapacity) !== 'object') {
        errors.collect(ros.propertyValidator('onDemandPercentageAboveBaseCapacity', ros.validateRange)({
            data: properties.onDemandPercentageAboveBaseCapacity,
            min: 0,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('onDemandPercentageAboveBaseCapacity', ros.validateNumber)(properties.onDemandPercentageAboveBaseCapacity));
    errors.collect(ros.propertyValidator('desiredCapacity', ros.validateNumber)(properties.desiredCapacity));
    if (properties.allocationStrategy && (typeof properties.allocationStrategy) !== 'object') {
        errors.collect(ros.propertyValidator('allocationStrategy', ros.validateAllowedValues)({
            data: properties.allocationStrategy,
            allowedValues: ["priority", "lowestPrice"],
        }));
    }
    errors.collect(ros.propertyValidator('allocationStrategy', ros.validateString)(properties.allocationStrategy));
    if (properties.onDemandBaseCapacity && (typeof properties.onDemandBaseCapacity) !== 'object') {
        errors.collect(ros.propertyValidator('onDemandBaseCapacity', ros.validateRange)({
            data: properties.onDemandBaseCapacity,
            min: 0,
            max: 1000,
        }));
    }
    errors.collect(ros.propertyValidator('onDemandBaseCapacity', ros.validateNumber)(properties.onDemandBaseCapacity));
    if (properties.standbyInstances && (Array.isArray(properties.standbyInstances) || (typeof properties.standbyInstances) === 'string')) {
        errors.collect(ros.propertyValidator('standbyInstances', ros.validateLength)({
            data: properties.standbyInstances.length,
            min: undefined,
            max: 1000,
        }));
    }
    errors.collect(ros.propertyValidator('standbyInstances', ros.listValidator(ros.validateAny))(properties.standbyInstances));
    if (properties.launchTemplateOverrides && (Array.isArray(properties.launchTemplateOverrides) || (typeof properties.launchTemplateOverrides) === 'string')) {
        errors.collect(ros.propertyValidator('launchTemplateOverrides', ros.validateLength)({
            data: properties.launchTemplateOverrides.length,
            min: undefined,
            max: 10,
        }));
    }
    errors.collect(ros.propertyValidator('launchTemplateOverrides', ros.listValidator(RosScalingGroup_LaunchTemplateOverridesPropertyValidator))(properties.launchTemplateOverrides));
    if (properties.removalPolicys && (Array.isArray(properties.removalPolicys) || (typeof properties.removalPolicys) === 'string')) {
        errors.collect(ros.propertyValidator('removalPolicys', ros.validateLength)({
            data: properties.removalPolicys.length,
            min: undefined,
            max: 3,
        }));
    }
    errors.collect(ros.propertyValidator('removalPolicys', ros.listValidator(ros.validateAny))(properties.removalPolicys));
    if (properties.spotAllocationStrategy && (typeof properties.spotAllocationStrategy) !== 'object') {
        errors.collect(ros.propertyValidator('spotAllocationStrategy', ros.validateAllowedValues)({
            data: properties.spotAllocationStrategy,
            allowedValues: ["priority", "lowestPrice"],
        }));
    }
    errors.collect(ros.propertyValidator('spotAllocationStrategy', ros.validateString)(properties.spotAllocationStrategy));
    if (properties.tags && (Array.isArray(properties.tags) || (typeof properties.tags) === 'string')) {
        errors.collect(ros.propertyValidator('tags', ros.validateLength)({
            data: properties.tags.length,
            min: undefined,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('tags', ros.listValidator(RosScalingGroup_TagsPropertyValidator))(properties.tags));
    if (properties.scalingPolicy && (typeof properties.scalingPolicy) !== 'object') {
        errors.collect(ros.propertyValidator('scalingPolicy', ros.validateAllowedValues)({
            data: properties.scalingPolicy,
            allowedValues: ["recycle", "release"],
        }));
    }
    errors.collect(ros.propertyValidator('scalingPolicy', ros.validateString)(properties.scalingPolicy));
    if (properties.vSwitchIds && (Array.isArray(properties.vSwitchIds) || (typeof properties.vSwitchIds) === 'string')) {
        errors.collect(ros.propertyValidator('vSwitchIds', ros.validateLength)({
            data: properties.vSwitchIds.length,
            min: 0,
            max: 8,
        }));
    }
    errors.collect(ros.propertyValidator('vSwitchIds', ros.listValidator(ros.validateAny))(properties.vSwitchIds));
    errors.collect(ros.propertyValidator('instanceId', ros.validateString)(properties.instanceId));
    errors.collect(ros.propertyValidator('vSwitchId', ros.validateString)(properties.vSwitchId));
    if (properties.loadBalancerIds && (Array.isArray(properties.loadBalancerIds) || (typeof properties.loadBalancerIds) === 'string')) {
        errors.collect(ros.propertyValidator('loadBalancerIds', ros.validateLength)({
            data: properties.loadBalancerIds.length,
            min: undefined,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('loadBalancerIds', ros.listValidator(ros.validateAny))(properties.loadBalancerIds));
    if (properties.spotInstancePools && (typeof properties.spotInstancePools) !== 'object') {
        errors.collect(ros.propertyValidator('spotInstancePools', ros.validateRange)({
            data: properties.spotInstancePools,
            min: 1,
            max: 10,
        }));
    }
    errors.collect(ros.propertyValidator('spotInstancePools', ros.validateNumber)(properties.spotInstancePools));
    errors.collect(ros.propertyValidator('groupDeletionProtection', ros.validateBoolean)(properties.groupDeletionProtection));
    errors.collect(ros.propertyValidator('launchTemplateId', ros.validateString)(properties.launchTemplateId));
    errors.collect(ros.propertyValidator('customPolicyArn', ros.validateString)(properties.customPolicyArn));
    errors.collect(ros.propertyValidator('maxSize', ros.requiredValidator)(properties.maxSize));
    if (properties.maxSize && (typeof properties.maxSize) !== 'object') {
        errors.collect(ros.propertyValidator('maxSize', ros.validateRange)({
            data: properties.maxSize,
            min: 0,
            max: 1000,
        }));
    }
    errors.collect(ros.propertyValidator('maxSize', ros.validateNumber)(properties.maxSize));
    if (properties.scalingGroupName && (typeof properties.scalingGroupName) !== 'object') {
        errors.collect(ros.propertyValidator('scalingGroupName', ros.validateAllowedPattern)({
            data: properties.scalingGroupName,
            reg: /^[a-zA-Z0-9\u4e00-\u9fa5][-_.a-zA-Z0-9\u4e00-\u9fa5]{1,63}$/
        }));
    }
    errors.collect(ros.propertyValidator('scalingGroupName', ros.validateString)(properties.scalingGroupName));
    errors.collect(ros.propertyValidator('minSize', ros.requiredValidator)(properties.minSize));
    if (properties.minSize && (typeof properties.minSize) !== 'object') {
        errors.collect(ros.propertyValidator('minSize', ros.validateRange)({
            data: properties.minSize,
            min: 0,
            max: 1000,
        }));
    }
    errors.collect(ros.propertyValidator('minSize', ros.validateNumber)(properties.minSize));
    if (properties.defaultCooldown && (typeof properties.defaultCooldown) !== 'object') {
        errors.collect(ros.propertyValidator('defaultCooldown', ros.validateRange)({
            data: properties.defaultCooldown,
            min: 0,
            max: 86400,
        }));
    }
    errors.collect(ros.propertyValidator('defaultCooldown', ros.validateNumber)(properties.defaultCooldown));
    errors.collect(ros.propertyValidator('azBalance', ros.validateBoolean)(properties.azBalance));
    if (properties.groupType && (typeof properties.groupType) !== 'object') {
        errors.collect(ros.propertyValidator('groupType', ros.validateAllowedValues)({
            data: properties.groupType,
            allowedValues: ["ECS", "ECI"],
        }));
    }
    errors.collect(ros.propertyValidator('groupType', ros.validateString)(properties.groupType));
    errors.collect(ros.propertyValidator('launchTemplateVersion', ros.validateString)(properties.launchTemplateVersion));
    if (properties.multiAzPolicy && (typeof properties.multiAzPolicy) !== 'object') {
        errors.collect(ros.propertyValidator('multiAzPolicy', ros.validateAllowedValues)({
            data: properties.multiAzPolicy,
            allowedValues: ["PRIORITY", "BALANCE", "COST_OPTIMIZED", "COMPOSABLE"],
        }));
    }
    errors.collect(ros.propertyValidator('multiAzPolicy', ros.validateString)(properties.multiAzPolicy));
    if (properties.protectedInstances && (Array.isArray(properties.protectedInstances) || (typeof properties.protectedInstances) === 'string')) {
        errors.collect(ros.propertyValidator('protectedInstances', ros.validateLength)({
            data: properties.protectedInstances.length,
            min: undefined,
            max: 1000,
        }));
    }
    errors.collect(ros.propertyValidator('protectedInstances', ros.listValidator(ros.validateAny))(properties.protectedInstances));
    errors.collect(ros.propertyValidator('containerGroupId', ros.validateString)(properties.containerGroupId));
    if (properties.dbInstanceIds && (Array.isArray(properties.dbInstanceIds) || (typeof properties.dbInstanceIds) === 'string')) {
        errors.collect(ros.propertyValidator('dbInstanceIds', ros.validateLength)({
            data: properties.dbInstanceIds.length,
            min: undefined,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('dbInstanceIds', ros.listValidator(ros.validateAny))(properties.dbInstanceIds));
    if (properties.healthCheckType && (typeof properties.healthCheckType) !== 'object') {
        errors.collect(ros.propertyValidator('healthCheckType', ros.validateAllowedValues)({
            data: properties.healthCheckType,
            allowedValues: ["ECS", "NONE"],
        }));
    }
    errors.collect(ros.propertyValidator('healthCheckType', ros.validateString)(properties.healthCheckType));
    if (properties.maxInstanceLifetime && (typeof properties.maxInstanceLifetime) !== 'object') {
        errors.collect(ros.propertyValidator('maxInstanceLifetime', ros.validateRange)({
            data: properties.maxInstanceLifetime,
            min: 86400,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('maxInstanceLifetime', ros.validateNumber)(properties.maxInstanceLifetime));
    return errors.wrap('supplied properties not correct for "RosScalingGroupProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingGroup` resource
 *
 * @param properties - the TypeScript properties of a `RosScalingGroupProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingGroup` resource.
 */
// @ts-ignore TS6133
function rosScalingGroupPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosScalingGroupPropsValidator(properties).assertSuccess();
    }
    return {
        MaxSize: ros.numberToRosTemplate(properties.maxSize),
        MinSize: ros.numberToRosTemplate(properties.minSize),
        AllocationStrategy: ros.stringToRosTemplate(properties.allocationStrategy),
        AzBalance: ros.booleanToRosTemplate(properties.azBalance),
        CompensateWithOnDemand: ros.booleanToRosTemplate(properties.compensateWithOnDemand),
        ContainerGroupId: ros.stringToRosTemplate(properties.containerGroupId),
        CustomPolicyARN: ros.stringToRosTemplate(properties.customPolicyArn),
        DBInstanceIds: ros.listMapper(ros.objectToRosTemplate)(properties.dbInstanceIds),
        DefaultCooldown: ros.numberToRosTemplate(properties.defaultCooldown),
        DesiredCapacity: ros.numberToRosTemplate(properties.desiredCapacity),
        GroupDeletionProtection: ros.booleanToRosTemplate(properties.groupDeletionProtection),
        GroupType: ros.stringToRosTemplate(properties.groupType),
        HealthCheckType: ros.stringToRosTemplate(properties.healthCheckType),
        InstanceId: ros.stringToRosTemplate(properties.instanceId),
        LaunchTemplateId: ros.stringToRosTemplate(properties.launchTemplateId),
        LaunchTemplateOverrides: ros.listMapper(rosScalingGroupLaunchTemplateOverridesPropertyToRosTemplate)(properties.launchTemplateOverrides),
        LaunchTemplateVersion: ros.stringToRosTemplate(properties.launchTemplateVersion),
        LoadBalancerIds: ros.listMapper(ros.objectToRosTemplate)(properties.loadBalancerIds),
        MaxInstanceLifetime: ros.numberToRosTemplate(properties.maxInstanceLifetime),
        MultiAZPolicy: ros.stringToRosTemplate(properties.multiAzPolicy),
        NotificationConfigurations: ros.listMapper(rosScalingGroupNotificationConfigurationsPropertyToRosTemplate)(properties.notificationConfigurations),
        OnDemandBaseCapacity: ros.numberToRosTemplate(properties.onDemandBaseCapacity),
        OnDemandPercentageAboveBaseCapacity: ros.numberToRosTemplate(properties.onDemandPercentageAboveBaseCapacity),
        ProtectedInstances: ros.listMapper(ros.objectToRosTemplate)(properties.protectedInstances),
        RemovalPolicys: ros.listMapper(ros.objectToRosTemplate)(properties.removalPolicys),
        ScalingGroupName: ros.stringToRosTemplate(properties.scalingGroupName),
        ScalingPolicy: ros.stringToRosTemplate(properties.scalingPolicy),
        SpotAllocationStrategy: ros.stringToRosTemplate(properties.spotAllocationStrategy),
        SpotInstancePools: ros.numberToRosTemplate(properties.spotInstancePools),
        SpotInstanceRemedy: ros.booleanToRosTemplate(properties.spotInstanceRemedy),
        StandbyInstances: ros.listMapper(ros.objectToRosTemplate)(properties.standbyInstances),
        Tags: ros.listMapper(rosScalingGroupTagsPropertyToRosTemplate)(properties.tags),
        VSwitchId: ros.stringToRosTemplate(properties.vSwitchId),
        VSwitchIds: ros.listMapper(ros.objectToRosTemplate)(properties.vSwitchIds),
    };
}
/**
 * A ROS template type:  `ALIYUN::ESS::ScalingGroup`
 */
class RosScalingGroup extends ros.RosResource {
    /**
     * Create a new `ALIYUN::ESS::ScalingGroup`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosScalingGroup.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrScalingGroupId = this.getAtt('ScalingGroupId');
        this.attrScalingGroupName = this.getAtt('ScalingGroupName');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.maxSize = props.maxSize;
        this.minSize = props.minSize;
        this.allocationStrategy = props.allocationStrategy;
        this.azBalance = props.azBalance;
        this.compensateWithOnDemand = props.compensateWithOnDemand;
        this.containerGroupId = props.containerGroupId;
        this.customPolicyArn = props.customPolicyArn;
        this.dbInstanceIds = props.dbInstanceIds;
        this.defaultCooldown = props.defaultCooldown;
        this.desiredCapacity = props.desiredCapacity;
        this.groupDeletionProtection = props.groupDeletionProtection;
        this.groupType = props.groupType;
        this.healthCheckType = props.healthCheckType;
        this.instanceId = props.instanceId;
        this.launchTemplateId = props.launchTemplateId;
        this.launchTemplateOverrides = props.launchTemplateOverrides;
        this.launchTemplateVersion = props.launchTemplateVersion;
        this.loadBalancerIds = props.loadBalancerIds;
        this.maxInstanceLifetime = props.maxInstanceLifetime;
        this.multiAzPolicy = props.multiAzPolicy;
        this.notificationConfigurations = props.notificationConfigurations;
        this.onDemandBaseCapacity = props.onDemandBaseCapacity;
        this.onDemandPercentageAboveBaseCapacity = props.onDemandPercentageAboveBaseCapacity;
        this.protectedInstances = props.protectedInstances;
        this.removalPolicys = props.removalPolicys;
        this.scalingGroupName = props.scalingGroupName;
        this.scalingPolicy = props.scalingPolicy;
        this.spotAllocationStrategy = props.spotAllocationStrategy;
        this.spotInstancePools = props.spotInstancePools;
        this.spotInstanceRemedy = props.spotInstanceRemedy;
        this.standbyInstances = props.standbyInstances;
        this.tags = props.tags;
        this.vSwitchId = props.vSwitchId;
        this.vSwitchIds = props.vSwitchIds;
    }
    get rosProperties() {
        return {
            maxSize: this.maxSize,
            minSize: this.minSize,
            allocationStrategy: this.allocationStrategy,
            azBalance: this.azBalance,
            compensateWithOnDemand: this.compensateWithOnDemand,
            containerGroupId: this.containerGroupId,
            customPolicyArn: this.customPolicyArn,
            dbInstanceIds: this.dbInstanceIds,
            defaultCooldown: this.defaultCooldown,
            desiredCapacity: this.desiredCapacity,
            groupDeletionProtection: this.groupDeletionProtection,
            groupType: this.groupType,
            healthCheckType: this.healthCheckType,
            instanceId: this.instanceId,
            launchTemplateId: this.launchTemplateId,
            launchTemplateOverrides: this.launchTemplateOverrides,
            launchTemplateVersion: this.launchTemplateVersion,
            loadBalancerIds: this.loadBalancerIds,
            maxInstanceLifetime: this.maxInstanceLifetime,
            multiAzPolicy: this.multiAzPolicy,
            notificationConfigurations: this.notificationConfigurations,
            onDemandBaseCapacity: this.onDemandBaseCapacity,
            onDemandPercentageAboveBaseCapacity: this.onDemandPercentageAboveBaseCapacity,
            protectedInstances: this.protectedInstances,
            removalPolicys: this.removalPolicys,
            scalingGroupName: this.scalingGroupName,
            scalingPolicy: this.scalingPolicy,
            spotAllocationStrategy: this.spotAllocationStrategy,
            spotInstancePools: this.spotInstancePools,
            spotInstanceRemedy: this.spotInstanceRemedy,
            standbyInstances: this.standbyInstances,
            tags: this.tags,
            vSwitchId: this.vSwitchId,
            vSwitchIds: this.vSwitchIds,
        };
    }
    renderProperties(props) {
        return rosScalingGroupPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosScalingGroup = RosScalingGroup;
/**
 * The resource type name for this resource class.
 */
RosScalingGroup.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ESS::ScalingGroup";
/**
 * Determine whether the given properties match those of a `LaunchTemplateOverridesProperty`
 *
 * @param properties - the TypeScript properties of a `LaunchTemplateOverridesProperty`
 *
 * @returns the result of the validation.
 */
function RosScalingGroup_LaunchTemplateOverridesPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.weightedCapacity && (typeof properties.weightedCapacity) !== 'object') {
        errors.collect(ros.propertyValidator('weightedCapacity', ros.validateRange)({
            data: properties.weightedCapacity,
            min: 1,
            max: 500,
        }));
    }
    errors.collect(ros.propertyValidator('weightedCapacity', ros.validateNumber)(properties.weightedCapacity));
    errors.collect(ros.propertyValidator('spotPriceLimit', ros.validateNumber)(properties.spotPriceLimit));
    errors.collect(ros.propertyValidator('instanceType', ros.validateString)(properties.instanceType));
    return errors.wrap('supplied properties not correct for "LaunchTemplateOverridesProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingGroup.LaunchTemplateOverrides` resource
 *
 * @param properties - the TypeScript properties of a `LaunchTemplateOverridesProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingGroup.LaunchTemplateOverrides` resource.
 */
// @ts-ignore TS6133
function rosScalingGroupLaunchTemplateOverridesPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosScalingGroup_LaunchTemplateOverridesPropertyValidator(properties).assertSuccess();
    return {
        WeightedCapacity: ros.numberToRosTemplate(properties.weightedCapacity),
        SpotPriceLimit: ros.numberToRosTemplate(properties.spotPriceLimit),
        InstanceType: ros.stringToRosTemplate(properties.instanceType),
    };
}
/**
 * Determine whether the given properties match those of a `NotificationConfigurationsProperty`
 *
 * @param properties - the TypeScript properties of a `NotificationConfigurationsProperty`
 *
 * @returns the result of the validation.
 */
function RosScalingGroup_NotificationConfigurationsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('notificationArn', ros.requiredValidator)(properties.notificationArn));
    if (properties.notificationArn && (Array.isArray(properties.notificationArn) || (typeof properties.notificationArn) === 'string')) {
        errors.collect(ros.propertyValidator('notificationArn', ros.validateLength)({
            data: properties.notificationArn.length,
            min: undefined,
            max: 300,
        }));
    }
    if (properties.notificationArn && (typeof properties.notificationArn) !== 'object') {
        errors.collect(ros.propertyValidator('notificationArn', ros.validateAllowedPattern)({
            data: properties.notificationArn,
            reg: /^acs:ess:([a-zA-Z0-9-]+):(\d+):(((queue|topic)\/([a-zA-Z0-9][a-zA-Z0-9-]{0,255}))|cloudmonitor)$/
        }));
    }
    errors.collect(ros.propertyValidator('notificationArn', ros.validateString)(properties.notificationArn));
    errors.collect(ros.propertyValidator('notificationTypes', ros.requiredValidator)(properties.notificationTypes));
    if (properties.notificationTypes && (Array.isArray(properties.notificationTypes) || (typeof properties.notificationTypes) === 'string')) {
        errors.collect(ros.propertyValidator('notificationTypes', ros.validateLength)({
            data: properties.notificationTypes.length,
            min: 1,
            max: 8,
        }));
    }
    errors.collect(ros.propertyValidator('notificationTypes', ros.listValidator(ros.validateAny))(properties.notificationTypes));
    return errors.wrap('supplied properties not correct for "NotificationConfigurationsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingGroup.NotificationConfigurations` resource
 *
 * @param properties - the TypeScript properties of a `NotificationConfigurationsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingGroup.NotificationConfigurations` resource.
 */
// @ts-ignore TS6133
function rosScalingGroupNotificationConfigurationsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosScalingGroup_NotificationConfigurationsPropertyValidator(properties).assertSuccess();
    return {
        NotificationArn: ros.stringToRosTemplate(properties.notificationArn),
        NotificationTypes: ros.listMapper(ros.objectToRosTemplate)(properties.notificationTypes),
    };
}
/**
 * Determine whether the given properties match those of a `TagsProperty`
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the result of the validation.
 */
function RosScalingGroup_TagsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('value', ros.validateString)(properties.value));
    errors.collect(ros.propertyValidator('key', ros.requiredValidator)(properties.key));
    errors.collect(ros.propertyValidator('key', ros.validateString)(properties.key));
    return errors.wrap('supplied properties not correct for "TagsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingGroup.Tags` resource
 *
 * @param properties - the TypeScript properties of a `TagsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingGroup.Tags` resource.
 */
// @ts-ignore TS6133
function rosScalingGroupTagsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosScalingGroup_TagsPropertyValidator(properties).assertSuccess();
    return {
        Value: ros.stringToRosTemplate(properties.value),
        Key: ros.stringToRosTemplate(properties.key),
    };
}
/**
 * Determine whether the given properties match those of a `RosScalingGroupEnableProps`
 *
 * @param properties - the TypeScript properties of a `RosScalingGroupEnableProps`
 *
 * @returns the result of the validation.
 */
function RosScalingGroupEnablePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('attachOptions', RosScalingGroupEnable_AttachOptionsPropertyValidator)(properties.attachOptions));
    errors.collect(ros.propertyValidator('detachOptions', RosScalingGroupEnable_DetachOptionsPropertyValidator)(properties.detachOptions));
    if (properties.scalingRuleArisExecuteVersion && (typeof properties.scalingRuleArisExecuteVersion) !== 'object') {
        errors.collect(ros.propertyValidator('scalingRuleArisExecuteVersion', ros.validateRange)({
            data: properties.scalingRuleArisExecuteVersion,
            min: 0,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('scalingRuleArisExecuteVersion', ros.validateNumber)(properties.scalingRuleArisExecuteVersion));
    errors.collect(ros.propertyValidator('scalingGroupId', ros.requiredValidator)(properties.scalingGroupId));
    errors.collect(ros.propertyValidator('scalingGroupId', ros.validateString)(properties.scalingGroupId));
    if (properties.scalingRuleAris && (Array.isArray(properties.scalingRuleAris) || (typeof properties.scalingRuleAris) === 'string')) {
        errors.collect(ros.propertyValidator('scalingRuleAris', ros.validateLength)({
            data: properties.scalingRuleAris.length,
            min: undefined,
            max: 10,
        }));
    }
    errors.collect(ros.propertyValidator('scalingRuleAris', ros.listValidator(ros.validateAny))(properties.scalingRuleAris));
    if (properties.removeInstanceIds && (Array.isArray(properties.removeInstanceIds) || (typeof properties.removeInstanceIds) === 'string')) {
        errors.collect(ros.propertyValidator('removeInstanceIds', ros.validateLength)({
            data: properties.removeInstanceIds.length,
            min: undefined,
            max: 1000,
        }));
    }
    errors.collect(ros.propertyValidator('removeInstanceIds', ros.listValidator(ros.validateAny))(properties.removeInstanceIds));
    errors.collect(ros.propertyValidator('scalingConfigurationId', ros.validateString)(properties.scalingConfigurationId));
    if (properties.instanceIds && (Array.isArray(properties.instanceIds) || (typeof properties.instanceIds) === 'string')) {
        errors.collect(ros.propertyValidator('instanceIds', ros.validateLength)({
            data: properties.instanceIds.length,
            min: undefined,
            max: 1000,
        }));
    }
    errors.collect(ros.propertyValidator('instanceIds', ros.listValidator(ros.validateAny))(properties.instanceIds));
    return errors.wrap('supplied properties not correct for "RosScalingGroupEnableProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingGroupEnable` resource
 *
 * @param properties - the TypeScript properties of a `RosScalingGroupEnableProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingGroupEnable` resource.
 */
// @ts-ignore TS6133
function rosScalingGroupEnablePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosScalingGroupEnablePropsValidator(properties).assertSuccess();
    }
    return {
        ScalingGroupId: ros.stringToRosTemplate(properties.scalingGroupId),
        AttachOptions: rosScalingGroupEnableAttachOptionsPropertyToRosTemplate(properties.attachOptions),
        DetachOptions: rosScalingGroupEnableDetachOptionsPropertyToRosTemplate(properties.detachOptions),
        InstanceIds: ros.listMapper(ros.objectToRosTemplate)(properties.instanceIds),
        RemoveInstanceIds: ros.listMapper(ros.objectToRosTemplate)(properties.removeInstanceIds),
        ScalingConfigurationId: ros.stringToRosTemplate(properties.scalingConfigurationId),
        ScalingRuleAris: ros.listMapper(ros.objectToRosTemplate)(properties.scalingRuleAris),
        ScalingRuleArisExecuteVersion: ros.numberToRosTemplate(properties.scalingRuleArisExecuteVersion),
    };
}
/**
 * A ROS template type:  `ALIYUN::ESS::ScalingGroupEnable`
 */
class RosScalingGroupEnable extends ros.RosResource {
    /**
     * Create a new `ALIYUN::ESS::ScalingGroupEnable`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosScalingGroupEnable.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrLifecycleState = this.getAtt('LifecycleState');
        this.attrScalingGroupId = this.getAtt('ScalingGroupId');
        this.attrScalingInstanceDetails = this.getAtt('ScalingInstanceDetails');
        this.attrScalingInstances = this.getAtt('ScalingInstances');
        this.attrScalingRuleArisExecuteErrorInfo = this.getAtt('ScalingRuleArisExecuteErrorInfo');
        this.attrScalingRuleArisExecuteResultInstancesAdded = this.getAtt('ScalingRuleArisExecuteResultInstancesAdded');
        this.attrScalingRuleArisExecuteResultInstancesRemoved = this.getAtt('ScalingRuleArisExecuteResultInstancesRemoved');
        this.attrScalingRuleArisExecuteResultNumberOfAddedInstances = this.getAtt('ScalingRuleArisExecuteResultNumberOfAddedInstances');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.scalingGroupId = props.scalingGroupId;
        this.attachOptions = props.attachOptions;
        this.detachOptions = props.detachOptions;
        this.instanceIds = props.instanceIds;
        this.removeInstanceIds = props.removeInstanceIds;
        this.scalingConfigurationId = props.scalingConfigurationId;
        this.scalingRuleAris = props.scalingRuleAris;
        this.scalingRuleArisExecuteVersion = props.scalingRuleArisExecuteVersion;
    }
    get rosProperties() {
        return {
            scalingGroupId: this.scalingGroupId,
            attachOptions: this.attachOptions,
            detachOptions: this.detachOptions,
            instanceIds: this.instanceIds,
            removeInstanceIds: this.removeInstanceIds,
            scalingConfigurationId: this.scalingConfigurationId,
            scalingRuleAris: this.scalingRuleAris,
            scalingRuleArisExecuteVersion: this.scalingRuleArisExecuteVersion,
        };
    }
    renderProperties(props) {
        return rosScalingGroupEnablePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosScalingGroupEnable = RosScalingGroupEnable;
/**
 * The resource type name for this resource class.
 */
RosScalingGroupEnable.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ESS::ScalingGroupEnable";
/**
 * Determine whether the given properties match those of a `AttachOptionsProperty`
 *
 * @param properties - the TypeScript properties of a `AttachOptionsProperty`
 *
 * @returns the result of the validation.
 */
function RosScalingGroupEnable_AttachOptionsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('entrusted', ros.validateBoolean)(properties.entrusted));
    errors.collect(ros.propertyValidator('lifecycleHook', ros.validateBoolean)(properties.lifecycleHook));
    return errors.wrap('supplied properties not correct for "AttachOptionsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingGroupEnable.AttachOptions` resource
 *
 * @param properties - the TypeScript properties of a `AttachOptionsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingGroupEnable.AttachOptions` resource.
 */
// @ts-ignore TS6133
function rosScalingGroupEnableAttachOptionsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosScalingGroupEnable_AttachOptionsPropertyValidator(properties).assertSuccess();
    return {
        Entrusted: ros.booleanToRosTemplate(properties.entrusted),
        LifecycleHook: ros.booleanToRosTemplate(properties.lifecycleHook),
    };
}
/**
 * Determine whether the given properties match those of a `DetachOptionsProperty`
 *
 * @param properties - the TypeScript properties of a `DetachOptionsProperty`
 *
 * @returns the result of the validation.
 */
function RosScalingGroupEnable_DetachOptionsPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('detachOption', ros.validateString)(properties.detachOption));
    errors.collect(ros.propertyValidator('decreaseDesiredCapacity', ros.validateBoolean)(properties.decreaseDesiredCapacity));
    errors.collect(ros.propertyValidator('lifecycleHook', ros.validateBoolean)(properties.lifecycleHook));
    return errors.wrap('supplied properties not correct for "DetachOptionsProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingGroupEnable.DetachOptions` resource
 *
 * @param properties - the TypeScript properties of a `DetachOptionsProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingGroupEnable.DetachOptions` resource.
 */
// @ts-ignore TS6133
function rosScalingGroupEnableDetachOptionsPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosScalingGroupEnable_DetachOptionsPropertyValidator(properties).assertSuccess();
    return {
        DetachOption: ros.stringToRosTemplate(properties.detachOption),
        DecreaseDesiredCapacity: ros.booleanToRosTemplate(properties.decreaseDesiredCapacity),
        LifecycleHook: ros.booleanToRosTemplate(properties.lifecycleHook),
    };
}
/**
 * Determine whether the given properties match those of a `RosScalingRuleProps`
 *
 * @param properties - the TypeScript properties of a `RosScalingRuleProps`
 *
 * @returns the result of the validation.
 */
function RosScalingRulePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('targetValue', ros.validateNumber)(properties.targetValue));
    if (properties.cooldown && (typeof properties.cooldown) !== 'object') {
        errors.collect(ros.propertyValidator('cooldown', ros.validateRange)({
            data: properties.cooldown,
            min: 0,
            max: 86400,
        }));
    }
    errors.collect(ros.propertyValidator('cooldown', ros.validateNumber)(properties.cooldown));
    errors.collect(ros.propertyValidator('scalingGroupId', ros.requiredValidator)(properties.scalingGroupId));
    errors.collect(ros.propertyValidator('scalingGroupId', ros.validateString)(properties.scalingGroupId));
    if (properties.predictiveValueBehavior && (typeof properties.predictiveValueBehavior) !== 'object') {
        errors.collect(ros.propertyValidator('predictiveValueBehavior', ros.validateAllowedValues)({
            data: properties.predictiveValueBehavior,
            allowedValues: ["MaxOverridePredictiveValue", "PredictiveValueOverrideMax", "PredictiveValueOverrideMaxWithBuffer"],
        }));
    }
    errors.collect(ros.propertyValidator('predictiveValueBehavior', ros.validateString)(properties.predictiveValueBehavior));
    if (properties.minAdjustmentMagnitude && (typeof properties.minAdjustmentMagnitude) !== 'object') {
        errors.collect(ros.propertyValidator('minAdjustmentMagnitude', ros.validateRange)({
            data: properties.minAdjustmentMagnitude,
            min: 0,
            max: 20,
        }));
    }
    errors.collect(ros.propertyValidator('minAdjustmentMagnitude', ros.validateNumber)(properties.minAdjustmentMagnitude));
    errors.collect(ros.propertyValidator('disableScaleIn', ros.validateBoolean)(properties.disableScaleIn));
    errors.collect(ros.propertyValidator('stepAdjustment', ros.listValidator(RosScalingRule_StepAdjustmentPropertyValidator))(properties.stepAdjustment));
    if (properties.adjustmentType && (typeof properties.adjustmentType) !== 'object') {
        errors.collect(ros.propertyValidator('adjustmentType', ros.validateAllowedValues)({
            data: properties.adjustmentType,
            allowedValues: ["QuantityChangeInCapacity", "PercentChangeInCapacity", "TotalCapacity"],
        }));
    }
    errors.collect(ros.propertyValidator('adjustmentType', ros.validateString)(properties.adjustmentType));
    if (properties.metricName && (typeof properties.metricName) !== 'object') {
        errors.collect(ros.propertyValidator('metricName', ros.validateAllowedValues)({
            data: properties.metricName,
            allowedValues: ["CpuUtilization", "ClassicInternetRx", "ClassicInternetTx", "VpcInternetRx", "VpcInternetTx", "IntranetRx", "IntranetTx"],
        }));
    }
    errors.collect(ros.propertyValidator('metricName', ros.validateString)(properties.metricName));
    if (properties.scalingRuleName && (typeof properties.scalingRuleName) !== 'object') {
        errors.collect(ros.propertyValidator('scalingRuleName', ros.validateAllowedPattern)({
            data: properties.scalingRuleName,
            reg: /^[a-zA-Z0-9\u4e00-\u9fa5][-_.a-zA-Z0-9\u4e00-\u9fa5]{1,63}$/
        }));
    }
    errors.collect(ros.propertyValidator('scalingRuleName', ros.validateString)(properties.scalingRuleName));
    if (properties.adjustmentValue && (typeof properties.adjustmentValue) !== 'object') {
        errors.collect(ros.propertyValidator('adjustmentValue', ros.validateRange)({
            data: properties.adjustmentValue,
            min: -500,
            max: 10000,
        }));
    }
    errors.collect(ros.propertyValidator('adjustmentValue', ros.validateNumber)(properties.adjustmentValue));
    errors.collect(ros.propertyValidator('scaleOutEvaluationCount', ros.validateNumber)(properties.scaleOutEvaluationCount));
    if (properties.initialMaxSize && (typeof properties.initialMaxSize) !== 'object') {
        errors.collect(ros.propertyValidator('initialMaxSize', ros.validateRange)({
            data: properties.initialMaxSize,
            min: 0,
            max: 1000,
        }));
    }
    errors.collect(ros.propertyValidator('initialMaxSize', ros.validateNumber)(properties.initialMaxSize));
    if (properties.scalingRuleType && (typeof properties.scalingRuleType) !== 'object') {
        errors.collect(ros.propertyValidator('scalingRuleType', ros.validateAllowedValues)({
            data: properties.scalingRuleType,
            allowedValues: ["SimpleScalingRule", "TargetTrackingScalingRule", "StepScalingRule", "PredictiveScalingRule"],
        }));
    }
    errors.collect(ros.propertyValidator('scalingRuleType', ros.validateString)(properties.scalingRuleType));
    if (properties.estimatedInstanceWarmup && (typeof properties.estimatedInstanceWarmup) !== 'object') {
        errors.collect(ros.propertyValidator('estimatedInstanceWarmup', ros.validateRange)({
            data: properties.estimatedInstanceWarmup,
            min: 0,
            max: 86400,
        }));
    }
    errors.collect(ros.propertyValidator('estimatedInstanceWarmup', ros.validateNumber)(properties.estimatedInstanceWarmup));
    if (properties.predictiveScalingMode && (typeof properties.predictiveScalingMode) !== 'object') {
        errors.collect(ros.propertyValidator('predictiveScalingMode', ros.validateAllowedValues)({
            data: properties.predictiveScalingMode,
            allowedValues: ["PredictAndScale", "PredictOnly"],
        }));
    }
    errors.collect(ros.propertyValidator('predictiveScalingMode', ros.validateString)(properties.predictiveScalingMode));
    if (properties.predictiveTaskBufferTime && (typeof properties.predictiveTaskBufferTime) !== 'object') {
        errors.collect(ros.propertyValidator('predictiveTaskBufferTime', ros.validateRange)({
            data: properties.predictiveTaskBufferTime,
            min: 0,
            max: 60,
        }));
    }
    errors.collect(ros.propertyValidator('predictiveTaskBufferTime', ros.validateNumber)(properties.predictiveTaskBufferTime));
    if (properties.predictiveValueBuffer && (typeof properties.predictiveValueBuffer) !== 'object') {
        errors.collect(ros.propertyValidator('predictiveValueBuffer', ros.validateRange)({
            data: properties.predictiveValueBuffer,
            min: 0,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('predictiveValueBuffer', ros.validateNumber)(properties.predictiveValueBuffer));
    errors.collect(ros.propertyValidator('scaleInEvaluationCount', ros.validateNumber)(properties.scaleInEvaluationCount));
    return errors.wrap('supplied properties not correct for "RosScalingRuleProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingRule` resource
 *
 * @param properties - the TypeScript properties of a `RosScalingRuleProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingRule` resource.
 */
// @ts-ignore TS6133
function rosScalingRulePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosScalingRulePropsValidator(properties).assertSuccess();
    }
    return {
        ScalingGroupId: ros.stringToRosTemplate(properties.scalingGroupId),
        AdjustmentType: ros.stringToRosTemplate(properties.adjustmentType),
        AdjustmentValue: ros.numberToRosTemplate(properties.adjustmentValue),
        Cooldown: ros.numberToRosTemplate(properties.cooldown),
        DisableScaleIn: ros.booleanToRosTemplate(properties.disableScaleIn),
        EstimatedInstanceWarmup: ros.numberToRosTemplate(properties.estimatedInstanceWarmup),
        InitialMaxSize: ros.numberToRosTemplate(properties.initialMaxSize),
        MetricName: ros.stringToRosTemplate(properties.metricName),
        MinAdjustmentMagnitude: ros.numberToRosTemplate(properties.minAdjustmentMagnitude),
        PredictiveScalingMode: ros.stringToRosTemplate(properties.predictiveScalingMode),
        PredictiveTaskBufferTime: ros.numberToRosTemplate(properties.predictiveTaskBufferTime),
        PredictiveValueBehavior: ros.stringToRosTemplate(properties.predictiveValueBehavior),
        PredictiveValueBuffer: ros.numberToRosTemplate(properties.predictiveValueBuffer),
        ScaleInEvaluationCount: ros.numberToRosTemplate(properties.scaleInEvaluationCount),
        ScaleOutEvaluationCount: ros.numberToRosTemplate(properties.scaleOutEvaluationCount),
        ScalingRuleName: ros.stringToRosTemplate(properties.scalingRuleName),
        ScalingRuleType: ros.stringToRosTemplate(properties.scalingRuleType),
        StepAdjustment: ros.listMapper(rosScalingRuleStepAdjustmentPropertyToRosTemplate)(properties.stepAdjustment),
        TargetValue: ros.numberToRosTemplate(properties.targetValue),
    };
}
/**
 * A ROS template type:  `ALIYUN::ESS::ScalingRule`
 */
class RosScalingRule extends ros.RosResource {
    /**
     * Create a new `ALIYUN::ESS::ScalingRule`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosScalingRule.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrScalingRuleAri = this.getAtt('ScalingRuleAri');
        this.attrScalingRuleId = this.getAtt('ScalingRuleId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.scalingGroupId = props.scalingGroupId;
        this.adjustmentType = props.adjustmentType;
        this.adjustmentValue = props.adjustmentValue;
        this.cooldown = props.cooldown;
        this.disableScaleIn = props.disableScaleIn;
        this.estimatedInstanceWarmup = props.estimatedInstanceWarmup;
        this.initialMaxSize = props.initialMaxSize;
        this.metricName = props.metricName;
        this.minAdjustmentMagnitude = props.minAdjustmentMagnitude;
        this.predictiveScalingMode = props.predictiveScalingMode;
        this.predictiveTaskBufferTime = props.predictiveTaskBufferTime;
        this.predictiveValueBehavior = props.predictiveValueBehavior;
        this.predictiveValueBuffer = props.predictiveValueBuffer;
        this.scaleInEvaluationCount = props.scaleInEvaluationCount;
        this.scaleOutEvaluationCount = props.scaleOutEvaluationCount;
        this.scalingRuleName = props.scalingRuleName;
        this.scalingRuleType = props.scalingRuleType;
        this.stepAdjustment = props.stepAdjustment;
        this.targetValue = props.targetValue;
    }
    get rosProperties() {
        return {
            scalingGroupId: this.scalingGroupId,
            adjustmentType: this.adjustmentType,
            adjustmentValue: this.adjustmentValue,
            cooldown: this.cooldown,
            disableScaleIn: this.disableScaleIn,
            estimatedInstanceWarmup: this.estimatedInstanceWarmup,
            initialMaxSize: this.initialMaxSize,
            metricName: this.metricName,
            minAdjustmentMagnitude: this.minAdjustmentMagnitude,
            predictiveScalingMode: this.predictiveScalingMode,
            predictiveTaskBufferTime: this.predictiveTaskBufferTime,
            predictiveValueBehavior: this.predictiveValueBehavior,
            predictiveValueBuffer: this.predictiveValueBuffer,
            scaleInEvaluationCount: this.scaleInEvaluationCount,
            scaleOutEvaluationCount: this.scaleOutEvaluationCount,
            scalingRuleName: this.scalingRuleName,
            scalingRuleType: this.scalingRuleType,
            stepAdjustment: this.stepAdjustment,
            targetValue: this.targetValue,
        };
    }
    renderProperties(props) {
        return rosScalingRulePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosScalingRule = RosScalingRule;
/**
 * The resource type name for this resource class.
 */
RosScalingRule.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ESS::ScalingRule";
/**
 * Determine whether the given properties match those of a `StepAdjustmentProperty`
 *
 * @param properties - the TypeScript properties of a `StepAdjustmentProperty`
 *
 * @returns the result of the validation.
 */
function RosScalingRule_StepAdjustmentPropertyValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.metricIntervalUpperBound && (typeof properties.metricIntervalUpperBound) !== 'object') {
        errors.collect(ros.propertyValidator('metricIntervalUpperBound', ros.validateRange)({
            data: properties.metricIntervalUpperBound,
            min: -9999999000000000000,
            max: 9999999000000000000,
        }));
    }
    errors.collect(ros.propertyValidator('metricIntervalUpperBound', ros.validateNumber)(properties.metricIntervalUpperBound));
    if (properties.metricIntervalLowerBound && (typeof properties.metricIntervalLowerBound) !== 'object') {
        errors.collect(ros.propertyValidator('metricIntervalLowerBound', ros.validateRange)({
            data: properties.metricIntervalLowerBound,
            min: -9999999000000000000,
            max: 9999999000000000000,
        }));
    }
    errors.collect(ros.propertyValidator('metricIntervalLowerBound', ros.validateNumber)(properties.metricIntervalLowerBound));
    if (properties.scalingAdjustment && (typeof properties.scalingAdjustment) !== 'object') {
        errors.collect(ros.propertyValidator('scalingAdjustment', ros.validateRange)({
            data: properties.scalingAdjustment,
            min: 0,
            max: 1000,
        }));
    }
    errors.collect(ros.propertyValidator('scalingAdjustment', ros.validateNumber)(properties.scalingAdjustment));
    return errors.wrap('supplied properties not correct for "StepAdjustmentProperty"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingRule.StepAdjustment` resource
 *
 * @param properties - the TypeScript properties of a `StepAdjustmentProperty`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScalingRule.StepAdjustment` resource.
 */
// @ts-ignore TS6133
function rosScalingRuleStepAdjustmentPropertyToRosTemplate(properties) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    RosScalingRule_StepAdjustmentPropertyValidator(properties).assertSuccess();
    return {
        MetricIntervalUpperBound: ros.numberToRosTemplate(properties.metricIntervalUpperBound),
        MetricIntervalLowerBound: ros.numberToRosTemplate(properties.metricIntervalLowerBound),
        ScalingAdjustment: ros.numberToRosTemplate(properties.scalingAdjustment),
    };
}
/**
 * Determine whether the given properties match those of a `RosScheduledTaskProps`
 *
 * @param properties - the TypeScript properties of a `RosScheduledTaskProps`
 *
 * @returns the result of the validation.
 */
function RosScheduledTaskPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    if (properties.description && (Array.isArray(properties.description) || (typeof properties.description) === 'string')) {
        errors.collect(ros.propertyValidator('description', ros.validateLength)({
            data: properties.description.length,
            min: 2,
            max: 200,
        }));
    }
    errors.collect(ros.propertyValidator('description', ros.validateString)(properties.description));
    errors.collect(ros.propertyValidator('launchTime', ros.requiredValidator)(properties.launchTime));
    if (properties.launchTime && (typeof properties.launchTime) !== 'object') {
        errors.collect(ros.propertyValidator('launchTime', ros.validateAllowedPattern)({
            data: properties.launchTime,
            reg: /^\d{4}-\d{2}-\d{2}T\d{2}[:]\d{2}Z$/
        }));
    }
    errors.collect(ros.propertyValidator('launchTime', ros.validateString)(properties.launchTime));
    if (properties.recurrenceType && (typeof properties.recurrenceType) !== 'object') {
        errors.collect(ros.propertyValidator('recurrenceType', ros.validateAllowedValues)({
            data: properties.recurrenceType,
            allowedValues: ["Daily", "Weekly", "Monthly"],
        }));
    }
    errors.collect(ros.propertyValidator('recurrenceType', ros.validateString)(properties.recurrenceType));
    if (properties.scheduledTaskName && (typeof properties.scheduledTaskName) !== 'object') {
        errors.collect(ros.propertyValidator('scheduledTaskName', ros.validateAllowedPattern)({
            data: properties.scheduledTaskName,
            reg: /^[a-zA-Z0-9\u4e00-\u9fa5][-_.a-zA-Z0-9\u4e00-\u9fa5]{1,63}$/
        }));
    }
    errors.collect(ros.propertyValidator('scheduledTaskName', ros.validateString)(properties.scheduledTaskName));
    errors.collect(ros.propertyValidator('scheduledAction', ros.requiredValidator)(properties.scheduledAction));
    if (properties.scheduledAction && (Array.isArray(properties.scheduledAction) || (typeof properties.scheduledAction) === 'string')) {
        errors.collect(ros.propertyValidator('scheduledAction', ros.validateLength)({
            data: properties.scheduledAction.length,
            min: undefined,
            max: 200,
        }));
    }
    errors.collect(ros.propertyValidator('scheduledAction', ros.validateString)(properties.scheduledAction));
    if (properties.recurrenceEndTime && (typeof properties.recurrenceEndTime) !== 'object') {
        errors.collect(ros.propertyValidator('recurrenceEndTime', ros.validateAllowedPattern)({
            data: properties.recurrenceEndTime,
            reg: /^\d{4}-\d{2}-\d{2}T\d{2}[:]\d{2}Z$/
        }));
    }
    errors.collect(ros.propertyValidator('recurrenceEndTime', ros.validateString)(properties.recurrenceEndTime));
    if (properties.recurrenceValue && (Array.isArray(properties.recurrenceValue) || (typeof properties.recurrenceValue) === 'string')) {
        errors.collect(ros.propertyValidator('recurrenceValue', ros.validateLength)({
            data: properties.recurrenceValue.length,
            min: undefined,
            max: 50,
        }));
    }
    if (properties.recurrenceValue && (typeof properties.recurrenceValue) !== 'object') {
        errors.collect(ros.propertyValidator('recurrenceValue', ros.validateAllowedPattern)({
            data: properties.recurrenceValue,
            reg: /^(\d{1,2})$|^([0-6](,\s*[0-6]){,6})$|^(\d{1,2}[-]\d{1,2})$/
        }));
    }
    errors.collect(ros.propertyValidator('recurrenceValue', ros.validateString)(properties.recurrenceValue));
    errors.collect(ros.propertyValidator('taskEnabled', ros.validateBoolean)(properties.taskEnabled));
    if (properties.launchExpirationTime && (typeof properties.launchExpirationTime) !== 'object') {
        errors.collect(ros.propertyValidator('launchExpirationTime', ros.validateRange)({
            data: properties.launchExpirationTime,
            min: 0,
            max: 21600,
        }));
    }
    errors.collect(ros.propertyValidator('launchExpirationTime', ros.validateNumber)(properties.launchExpirationTime));
    return errors.wrap('supplied properties not correct for "RosScheduledTaskProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScheduledTask` resource
 *
 * @param properties - the TypeScript properties of a `RosScheduledTaskProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::ESS::ScheduledTask` resource.
 */
// @ts-ignore TS6133
function rosScheduledTaskPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosScheduledTaskPropsValidator(properties).assertSuccess();
    }
    return {
        LaunchTime: ros.stringToRosTemplate(properties.launchTime),
        ScheduledAction: ros.stringToRosTemplate(properties.scheduledAction),
        Description: ros.stringToRosTemplate(properties.description),
        LaunchExpirationTime: ros.numberToRosTemplate(properties.launchExpirationTime),
        RecurrenceEndTime: ros.stringToRosTemplate(properties.recurrenceEndTime),
        RecurrenceType: ros.stringToRosTemplate(properties.recurrenceType),
        RecurrenceValue: ros.stringToRosTemplate(properties.recurrenceValue),
        ScheduledTaskName: ros.stringToRosTemplate(properties.scheduledTaskName),
        TaskEnabled: ros.booleanToRosTemplate(properties.taskEnabled),
    };
}
/**
 * A ROS template type:  `ALIYUN::ESS::ScheduledTask`
 */
class RosScheduledTask extends ros.RosResource {
    /**
     * Create a new `ALIYUN::ESS::ScheduledTask`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosScheduledTask.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrScheduledTaskId = this.getAtt('ScheduledTaskId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.launchTime = props.launchTime;
        this.scheduledAction = props.scheduledAction;
        this.description = props.description;
        this.launchExpirationTime = props.launchExpirationTime;
        this.recurrenceEndTime = props.recurrenceEndTime;
        this.recurrenceType = props.recurrenceType;
        this.recurrenceValue = props.recurrenceValue;
        this.scheduledTaskName = props.scheduledTaskName;
        this.taskEnabled = props.taskEnabled;
    }
    get rosProperties() {
        return {
            launchTime: this.launchTime,
            scheduledAction: this.scheduledAction,
            description: this.description,
            launchExpirationTime: this.launchExpirationTime,
            recurrenceEndTime: this.recurrenceEndTime,
            recurrenceType: this.recurrenceType,
            recurrenceValue: this.recurrenceValue,
            scheduledTaskName: this.scheduledTaskName,
            taskEnabled: this.taskEnabled,
        };
    }
    renderProperties(props) {
        return rosScheduledTaskPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosScheduledTask = RosScheduledTask;
/**
 * The resource type name for this resource class.
 */
RosScheduledTask.ROS_RESOURCE_TYPE_NAME = "ALIYUN::ESS::ScheduledTask";
//# sourceMappingURL=data:application/json;base64,