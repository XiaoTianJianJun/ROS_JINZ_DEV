"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrepayInstanceGroupClone = exports.PrepayInstanceGroupCloneProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "PrepayInstanceGroupCloneProperty", { enumerable: true, get: function () { return ecs_generated_1.RosPrepayInstanceGroupClone; } });
/**
 * A ROS resource type:  `ALIYUN::ECS::PrepayInstanceGroupClone`
 */
class PrepayInstanceGroupClone extends ros.Resource {
    /**
     * Create a new `ALIYUN::ECS::PrepayInstanceGroupClone`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosPrepayInstanceGroupClone = new ecs_generated_1.RosPrepayInstanceGroupClone(this, id, {
            periodType: props.periodType,
            description: props.description,
            diskMappings: props.diskMappings,
            systemDiskDescription: props.systemDiskDescription,
            autoRenew: props.autoRenew === undefined || props.autoRenew === null ? 'False' : props.autoRenew,
            sourceInstanceId: props.sourceInstanceId,
            maxAmount: props.maxAmount,
            systemDiskAutoSnapshotPolicyId: props.systemDiskAutoSnapshotPolicyId,
            ramRoleName: props.ramRoleName,
            minAmount: props.minAmount === undefined || props.minAmount === null ? 1 : props.minAmount,
            imageId: props.imageId,
            systemDiskDiskName: props.systemDiskDiskName,
            tags: props.tags,
            passwordInherit: props.passwordInherit,
            password: props.password,
            autoRenewPeriod: props.autoRenewPeriod === undefined || props.autoRenewPeriod === null ? 1 : props.autoRenewPeriod,
            keyPairName: props.keyPairName,
            launchTemplateName: props.launchTemplateName,
            zoneId: props.zoneId,
            hpcClusterId: props.hpcClusterId,
            securityGroupId: props.securityGroupId,
            period: props.period === undefined || props.period === null ? 1 : props.period,
            launchTemplateId: props.launchTemplateId,
            securityGroupIds: props.securityGroupIds,
            systemDiskCategory: props.systemDiskCategory === undefined || props.systemDiskCategory === null ? 'cloud_efficiency' : props.systemDiskCategory,
            eniMappings: props.eniMappings,
            instanceName: props.instanceName,
            deploymentSetId: props.deploymentSetId,
            internetMaxBandwidthOut: props.internetMaxBandwidthOut,
            internetMaxBandwidthIn: props.internetMaxBandwidthIn === undefined || props.internetMaxBandwidthIn === null ? 200 : props.internetMaxBandwidthIn,
            launchTemplateVersion: props.launchTemplateVersion,
            periodUnit: props.periodUnit === undefined || props.periodUnit === null ? 'Month' : props.periodUnit,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosPrepayInstanceGroupClone;
        this.attrHostNames = rosPrepayInstanceGroupClone.attrHostNames;
        this.attrInnerIps = rosPrepayInstanceGroupClone.attrInnerIps;
        this.attrInstanceIds = rosPrepayInstanceGroupClone.attrInstanceIds;
        this.attrOrderId = rosPrepayInstanceGroupClone.attrOrderId;
        this.attrPrivateIps = rosPrepayInstanceGroupClone.attrPrivateIps;
        this.attrPublicIps = rosPrepayInstanceGroupClone.attrPublicIps;
        this.attrRelatedOrderIds = rosPrepayInstanceGroupClone.attrRelatedOrderIds;
        this.attrZoneIds = rosPrepayInstanceGroupClone.attrZoneIds;
    }
}
exports.PrepayInstanceGroupClone = PrepayInstanceGroupClone;
//# sourceMappingURL=data:application/json;base64,