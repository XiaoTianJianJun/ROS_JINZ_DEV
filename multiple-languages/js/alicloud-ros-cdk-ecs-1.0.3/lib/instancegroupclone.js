"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InstanceGroupClone = exports.InstanceGroupCloneProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "InstanceGroupCloneProperty", { enumerable: true, get: function () { return ecs_generated_1.RosInstanceGroupClone; } });
/**
 * A ROS resource type:  `ALIYUN::ECS::InstanceGroupClone`
 */
class InstanceGroupClone extends ros.Resource {
    /**
     * Create a new `ALIYUN::ECS::InstanceGroupClone`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosInstanceGroupClone = new ecs_generated_1.RosInstanceGroupClone(this, id, {
            description: props.description,
            diskMappings: props.diskMappings,
            resourceGroupId: props.resourceGroupId,
            systemDiskDescription: props.systemDiskDescription,
            systemDiskProvisionedIops: props.systemDiskProvisionedIops,
            autoRenew: props.autoRenew === undefined || props.autoRenew === null ? 'False' : props.autoRenew,
            ipv6Addresses: props.ipv6Addresses,
            sourceInstanceId: props.sourceInstanceId,
            maxAmount: props.maxAmount,
            systemDiskAutoSnapshotPolicyId: props.systemDiskAutoSnapshotPolicyId,
            ramRoleName: props.ramRoleName,
            ipv6AddressCount: props.ipv6AddressCount,
            imageId: props.imageId,
            spotPriceLimit: props.spotPriceLimit,
            systemDiskDiskName: props.systemDiskDiskName,
            tags: props.tags,
            spotStrategy: props.spotStrategy,
            passwordInherit: props.passwordInherit,
            password: props.password,
            autoRenewPeriod: props.autoRenewPeriod === undefined || props.autoRenewPeriod === null ? 1 : props.autoRenewPeriod,
            backendServerWeight: props.backendServerWeight === undefined || props.backendServerWeight === null ? 100 : props.backendServerWeight,
            keyPairName: props.keyPairName,
            launchTemplateName: props.launchTemplateName,
            zoneId: props.zoneId,
            hpcClusterId: props.hpcClusterId,
            securityGroupId: props.securityGroupId,
            period: props.period === undefined || props.period === null ? 1 : props.period,
            launchTemplateId: props.launchTemplateId,
            deletionProtection: props.deletionProtection,
            securityGroupIds: props.securityGroupIds,
            loadBalancerIdToAttach: props.loadBalancerIdToAttach,
            systemDiskCategory: props.systemDiskCategory === undefined || props.systemDiskCategory === null ? 'cloud_efficiency' : props.systemDiskCategory,
            instanceName: props.instanceName,
            eniMappings: props.eniMappings,
            systemDiskBurstingEnabled: props.systemDiskBurstingEnabled,
            deploymentSetId: props.deploymentSetId,
            internetMaxBandwidthOut: props.internetMaxBandwidthOut,
            internetMaxBandwidthIn: props.internetMaxBandwidthIn === undefined || props.internetMaxBandwidthIn === null ? 200 : props.internetMaxBandwidthIn,
            launchTemplateVersion: props.launchTemplateVersion,
            periodUnit: props.periodUnit === undefined || props.periodUnit === null ? 'Month' : props.periodUnit,
            autoReleaseTime: props.autoReleaseTime,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosInstanceGroupClone;
        this.attrHostNames = rosInstanceGroupClone.attrHostNames;
        this.attrInnerIps = rosInstanceGroupClone.attrInnerIps;
        this.attrInstanceIds = rosInstanceGroupClone.attrInstanceIds;
        this.attrIpv6AddressIds = rosInstanceGroupClone.attrIpv6AddressIds;
        this.attrIpv6Addresses = rosInstanceGroupClone.attrIpv6Addresses;
        this.attrOrderId = rosInstanceGroupClone.attrOrderId;
        this.attrPrivateIps = rosInstanceGroupClone.attrPrivateIps;
        this.attrPublicIps = rosInstanceGroupClone.attrPublicIps;
        this.attrZoneIds = rosInstanceGroupClone.attrZoneIds;
    }
}
exports.InstanceGroupClone = InstanceGroupClone;
//# sourceMappingURL=data:application/json;base64,