"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomImage = exports.CustomImageProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ecs_generated_1 = require("./ecs.generated");
Object.defineProperty(exports, "CustomImageProperty", { enumerable: true, get: function () { return ecs_generated_1.RosCustomImage; } });
/**
 * A ROS resource type:  `ALIYUN::ECS::CustomImage`
 */
class CustomImage extends ros.Resource {
    /**
     * Create a new `ALIYUN::ECS::CustomImage`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props = {}, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosCustomImage = new ecs_generated_1.RosCustomImage(this, id, {
            imageName: props.imageName,
            sourceRegionId: props.sourceRegionId,
            snapshotId: props.snapshotId,
            description: props.description,
            resourceGroupId: props.resourceGroupId,
            platform: props.platform,
            architecture: props.architecture,
            instanceId: props.instanceId,
            imageFamily: props.imageFamily,
            tag: props.tag,
            diskDeviceMapping: props.diskDeviceMapping,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosCustomImage;
        this.attrImageId = rosCustomImage.attrImageId;
        this.attrSourceRegionId = rosCustomImage.attrSourceRegionId;
    }
}
exports.CustomImage = CustomImage;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9taW1hZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjdXN0b21pbWFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQWlEO0FBRXRCLG9HQUZsQiw4QkFBYyxPQUV1QjtBQXNFOUM7O0dBRUc7QUFDSCxNQUFhLFdBQVksU0FBUSxHQUFHLENBQUMsUUFBUTtJQWlCekM7Ozs7OztPQU1HO0lBQ0gsWUFBWSxLQUFvQixFQUFFLEVBQVUsRUFBRSxRQUEwQixFQUFFLEVBQUUsbUNBQTJDLElBQUk7UUFDdkgsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLGNBQWMsR0FBRyxJQUFJLDhCQUFjLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNqRCxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIsY0FBYyxFQUFFLEtBQUssQ0FBQyxjQUFjO1lBQ3BDLFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVTtZQUM1QixXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsZUFBZSxFQUFFLEtBQUssQ0FBQyxlQUFlO1lBQ3RDLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtZQUN4QixZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVk7WUFDaEMsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQzVCLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixHQUFHLEVBQUUsS0FBSyxDQUFDLEdBQUc7WUFDZCxpQkFBaUIsRUFBRSxLQUFLLENBQUMsaUJBQWlCO1NBQzdDLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsY0FBYyxDQUFDO1FBQy9CLElBQUksQ0FBQyxXQUFXLEdBQUcsY0FBYyxDQUFDLFdBQVcsQ0FBQztRQUM5QyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsY0FBYyxDQUFDLGtCQUFrQixDQUFDO0lBQ2hFLENBQUM7Q0FDSjtBQTVDRCxrQ0E0Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NDdXN0b21JbWFnZSB9IGZyb20gJy4vZWNzLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc0N1c3RvbUltYWdlIGFzIEN1c3RvbUltYWdlUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBBTElZVU46OkVDUzo6Q3VzdG9tSW1hZ2VgXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ3VzdG9tSW1hZ2VQcm9wcyB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBhcmNoaXRlY3R1cmU6IEFmdGVyIHNwZWNpZnlpbmcgdGhlIGRhdGEgZGlzayBzbmFwc2hvdCBhcyB0aGUgbWlycm9yZWQgc3lzdGVtIGRpc2ssIHlvdSBuZWVkIHRvIGRldGVybWluZSB0aGUgc3lzdGVtIGFyY2hpdGVjdHVyZSBvZiB0aGUgc3lzdGVtIGRpc2sgdGhyb3VnaCBBcmNoaXRlY3R1cmUuIFJhbmdlczpcbiAgICAgKiBJMzg2XG4gICAgICogWDg2XzY0IChkZWZhdWx0KVxuICAgICAqL1xuICAgIHJlYWRvbmx5IGFyY2hpdGVjdHVyZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRlc2NyaXB0aW9uOiBUaGUgZGVzY3JpcHRpb24gb2YgdGhlIGltYWdlLlxuICAgICAqIEl0IGNhbiBiZSBbMCwgMjU2XSBsZXR0ZXJzIGluIGxlbmd0aC5cbiAgICAgKiBJdCBjYW5ub3QgYmVnaW4gd2l0aCBodHRwOi8vIG9yIGh0dHBzOi8vLlxuICAgICAqIERlZmF1bHQgdmFsdWU6IG51bGwuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVzY3JpcHRpb24/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkaXNrRGV2aWNlTWFwcGluZzpcbiAgICAgKi9cbiAgICByZWFkb25seSBkaXNrRGV2aWNlTWFwcGluZz86IEFycmF5PFJvc0N1c3RvbUltYWdlLkRpc2tEZXZpY2VNYXBwaW5nUHJvcGVydHkgfCByb3MuSVJlc29sdmFibGU+IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaW1hZ2VGYW1pbHk6IFRoZSBuYW1lIG9mIHRoZSBpbWFnZSBmYW1pbHkgb2YgdGhlIGN1c3RvbSBpbWFnZS4gVGhlIG5hbWUgbXVzdCBiZSAyIHRvIDEyOCBjaGFyYWN0ZXJzIGluIGxlbmd0aCBhbmQgY2FuIGNvbnRhaW4gbGV0dGVycywgZGlnaXRzLCBjb2xvbnMgKDopLCB1bmRlcnNjb3JlcyAoXyksIGFuZCBoeXBoZW5zICgtKS4gSXQgY2Fubm90IGNvbnRhaW4gaHR0cDovLyBvciBodHRwczovLy4gSXQgbXVzdCBzdGFydCB3aXRoIGEgbGV0dGVyIGFuZCBjYW5ub3Qgc3RhcnQgd2l0aCBhY3M6IG9yIGFsaXl1bi5UaGlzIHBhcmFtZXRlciBpcyBlbXB0eSBieSBkZWZhdWx0LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGltYWdlRmFtaWx5Pzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaW1hZ2VOYW1lOiBJbWFnZSBuYW1lLlxuICAgICAqIENhbiBjb250YWluIFsyLCAxMjhdIGNoYXJhY3RlcnMgaW4gbGVuZ3RoLiBNdXN0IGJlZ2luIHdpdGggYW4gRW5nbGlzaCBsZXR0ZXIgb3IgQ2hpbmVzZSBjaGFyYWN0ZXIuIENhbiBjb250YWluIGRpZ2l0cywgY29sb25zICg6KSwgdW5kZXJzY29yZXMgKF8pLCBvciBoeXBoZW5zICgtKS5cbiAgICAgKiBDYW5ub3QgYmVnaW4gd2l0aCBodHRwOi8vIG9yIGh0dHBzOi8vLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGltYWdlTmFtZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGluc3RhbmNlSWQ6IEluc3RhbmNlIElELlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGluc3RhbmNlSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBwbGF0Zm9ybTogQWZ0ZXIgc3BlY2lmeWluZyB0aGUgZGF0YSBkaXNrIHNuYXBzaG90IGFzIHRoZSBtaXJyb3JlZCBzeXN0ZW0gZGlzaywgeW91IG5lZWQgdG8gZGV0ZXJtaW5lIHRoZSBvcGVyYXRpbmcgc3lzdGVtIHJlbGVhc2Ugb2YgdGhlIHN5c3RlbSBkaXNrIHRocm91Z2ggUGxhdGZvcm0uXG4gICAgICovXG4gICAgcmVhZG9ubHkgcGxhdGZvcm0/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSByZXNvdXJjZUdyb3VwSWQ6IFRoZSBlbnRlcnByaXNlIHJlc291cmNlIGdyb3VwIElEIHdoZXJlIHRoZSBjdXN0b20gaW1hZ2UgaXMgbG9jYXRlZC5cbiAgICAgKi9cbiAgICByZWFkb25seSByZXNvdXJjZUdyb3VwSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzbmFwc2hvdElkOiBUaGUgc25hcHNob3QgSUQuIEEgY3VzdG9tIGltYWdlIGlzIGNyZWF0ZWQgZnJvbSB0aGUgc3BlY2lmaWVkIHNuYXBzaG90LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNuYXBzaG90SWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzb3VyY2VSZWdpb25JZDogSUQgb2YgdGhlIHJlZ2lvbiB0byB3aGVyZSB0aGUgaW5zdGFuY2Uvc25hcHNob3QgYmVsb25ncy4gRGVmYXVsdCBpcyBjdXJyZW50IHJlZ2lvbiBJRC5cbiAgICAgKi9cbiAgICByZWFkb25seSBzb3VyY2VSZWdpb25JZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHRhZzpcbiAgICAgKi9cbiAgICByZWFkb25seSB0YWc/OiBBcnJheTxyb3MuUm9zVGFnIHwgcm9zLklSZXNvbHZhYmxlPiB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBBIFJPUyByZXNvdXJjZSB0eXBlOiAgYEFMSVlVTjo6RUNTOjpDdXN0b21JbWFnZWBcbiAqL1xuZXhwb3J0IGNsYXNzIEN1c3RvbUltYWdlIGV4dGVuZHMgcm9zLlJlc291cmNlIHtcblxuICAgIC8qKlxuICAgICAqIEEgZmFjdG9yeSBtZXRob2QgdGhhdCBjcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIHRoaXMgY2xhc3MgZnJvbSBhbiBvYmplY3RcbiAgICAgKiBjb250YWluaW5nIHRoZSBwcm9wZXJ0aWVzIG9mIHRoaXMgUk9TIHJlc291cmNlLCB3aGljaCB3aWxsIGJlIGFzc2lnbmVkIHRvIFJPUyByZXNvdXJjZS5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBJbWFnZUlkOiBJbWFnZSBJRFxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRySW1hZ2VJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFNvdXJjZVJlZ2lvbklkOiBJRCBvZiB0aGUgcmVnaW9uIHRvIHdoZXJlIHRoZSBpbnN0YW5jZS9zbmFwc2hvdCBiZWxvbmdzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyU291cmNlUmVnaW9uSWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBgQUxJWVVOOjpFQ1M6OkN1c3RvbUltYWdlYC5cbiAgICAgKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBDdXN0b21JbWFnZVByb3BzID0ge30sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAgICAgY29uc3Qgcm9zQ3VzdG9tSW1hZ2UgPSBuZXcgUm9zQ3VzdG9tSW1hZ2UodGhpcywgaWQsICB7XG4gICAgICAgICAgICBpbWFnZU5hbWU6IHByb3BzLmltYWdlTmFtZSxcbiAgICAgICAgICAgIHNvdXJjZVJlZ2lvbklkOiBwcm9wcy5zb3VyY2VSZWdpb25JZCxcbiAgICAgICAgICAgIHNuYXBzaG90SWQ6IHByb3BzLnNuYXBzaG90SWQsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogcHJvcHMuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICByZXNvdXJjZUdyb3VwSWQ6IHByb3BzLnJlc291cmNlR3JvdXBJZCxcbiAgICAgICAgICAgIHBsYXRmb3JtOiBwcm9wcy5wbGF0Zm9ybSxcbiAgICAgICAgICAgIGFyY2hpdGVjdHVyZTogcHJvcHMuYXJjaGl0ZWN0dXJlLFxuICAgICAgICAgICAgaW5zdGFuY2VJZDogcHJvcHMuaW5zdGFuY2VJZCxcbiAgICAgICAgICAgIGltYWdlRmFtaWx5OiBwcm9wcy5pbWFnZUZhbWlseSxcbiAgICAgICAgICAgIHRhZzogcHJvcHMudGFnLFxuICAgICAgICAgICAgZGlza0RldmljZU1hcHBpbmc6IHByb3BzLmRpc2tEZXZpY2VNYXBwaW5nLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0N1c3RvbUltYWdlO1xuICAgICAgICB0aGlzLmF0dHJJbWFnZUlkID0gcm9zQ3VzdG9tSW1hZ2UuYXR0ckltYWdlSWQ7XG4gICAgICAgIHRoaXMuYXR0clNvdXJjZVJlZ2lvbklkID0gcm9zQ3VzdG9tSW1hZ2UuYXR0clNvdXJjZVJlZ2lvbklkO1xuICAgIH1cbn1cbiJdfQ==