"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoadBalancer = exports.LoadBalancerProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const alb_generated_1 = require("./alb.generated");
Object.defineProperty(exports, "LoadBalancerProperty", { enumerable: true, get: function () { return alb_generated_1.RosLoadBalancer; } });
/**
 * A ROS resource type:  `ALIYUN::ALB::LoadBalancer`
 */
class LoadBalancer extends ros.Resource {
    /**
     * Create a new `ALIYUN::ALB::LoadBalancer`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosLoadBalancer = new alb_generated_1.RosLoadBalancer(this, id, {
            loadBalancerName: props.loadBalancerName,
            loadBalancerEdition: props.loadBalancerEdition,
            resourceGroupId: props.resourceGroupId,
            vpcId: props.vpcId,
            loadBalancerBillingConfig: props.loadBalancerBillingConfig,
            bandwidthPackageId: props.bandwidthPackageId,
            addressType: props.addressType,
            addressAllocatedMode: props.addressAllocatedMode,
            zoneMappings: props.zoneMappings,
            modificationProtectionConfig: props.modificationProtectionConfig,
            deletionProtectionEnabled: props.deletionProtectionEnabled,
            tags: props.tags,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosLoadBalancer;
        this.attrAddressType = rosLoadBalancer.attrAddressType;
        this.attrDnsName = rosLoadBalancer.attrDnsName;
        this.attrLoadBalancerEdition = rosLoadBalancer.attrLoadBalancerEdition;
        this.attrLoadBalancerId = rosLoadBalancer.attrLoadBalancerId;
        this.attrVpcId = rosLoadBalancer.attrVpcId;
        this.attrZoneMappings = rosLoadBalancer.attrZoneMappings;
    }
}
exports.LoadBalancer = LoadBalancer;
//# sourceMappingURL=data:application/json;base64,