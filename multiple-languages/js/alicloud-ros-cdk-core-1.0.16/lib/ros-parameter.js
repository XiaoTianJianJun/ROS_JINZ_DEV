"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosParameter = exports.RosParameterType = void 0;
const ros_element_1 = require("./ros-element");
const ros_reference_1 = require("./private/ros-reference");
const token_1 = require("./token");
var RosParameterType;
(function (RosParameterType) {
    RosParameterType["STRING"] = "String";
    RosParameterType["NUMBER"] = "Number";
    RosParameterType["JSON"] = "Json";
    RosParameterType["BOOLEAN"] = "Boolean";
    RosParameterType["COMMA_DELIMITED_LIST"] = "CommaDelimitedList";
    RosParameterType["OOS_PARAMETER"] = "ALIYUN::OOS::Parameter::Value";
    RosParameterType["OOS_SECRET_PARAMETER"] = "ALIYUN::OOS::SecretParameter::Value";
})(RosParameterType = exports.RosParameterType || (exports.RosParameterType = {}));
/**
 * A ROS parameter.
 *
 * Parameters enable you to input custom values to your template each time you create or
 * update a stack.
 */
class RosParameter extends ros_element_1.RosElement {
    constructor(scope, id, props = {}) {
        super(scope, id);
        this.props = props;
        this.id = id;
        this.type = props.type || RosParameterType.STRING;
        this.validateProperties(props);
    }
    /**
     * Indicates if this parameter is configured with "NoEcho" enabled.
     */
    get noEcho() {
        return !!this.props.noEcho;
    }
    /**
     * The parameter value as a Token
     */
    get value() {
        return ros_reference_1.RosReference.for(this, 'Ref');
    }
    /**
     * The parameter value, if it represents a string.
     */
    get valueAsString() {
        if (!isStringType(this.type)) {
            throw new Error(`Parameter type (${this.type}) is not a string type`);
        }
        return token_1.Token.asString(this.value);
    }
    /**
     * The parameter value, if it represents a string.
     */
    get valueAsBoolean() {
        if (!isStringType(this.type)) {
            throw new Error(`Parameter type (${this.type}) is not a string type`);
        }
        return token_1.Token.asAny(this.value);
    }
    /**
     * The parameter value, if it represents a string.
     */
    get valueAsAny() {
        return token_1.Token.asAny(this.value);
    }
    /**
     * The parameter value, if it represents a string list.
     */
    get valueAsList() {
        if (!isListType(this.type)) {
            throw new Error(`Parameter type (${this.type}) is not a string list type`);
        }
        return token_1.Token.asList(this.value);
    }
    /**
     * The parameter value, if it represents a number.
     */
    get valueAsNumber() {
        if (!isNumberType(this.type)) {
            throw new Error(`Parameter type (${this.type}) is not a number type`);
        }
        return token_1.Token.asNumber(this.value);
    }
    /**
     * @internal
     */
    _toRosTemplate() {
        return {
            Parameters: {
                [this.id]: {
                    Type: this.type,
                    Default: this.props.defaultValue,
                    AllowedPattern: this.props.allowedPattern,
                    AllowedValues: this.props.allowedValues,
                    ConstraintDescription: this.props.constraintDescription,
                    Description: this.props.description,
                    MaxLength: this.props.maxLength,
                    MaxValue: this.props.maxValue,
                    MinLength: this.props.minLength,
                    MinValue: this.props.minValue,
                    NoEcho: this.props.noEcho,
                    Label: this.props.label,
                    AssociationProperty: this.props.associationProperty,
                    AssociationPropertyMetadata: this.props.associationPropertyMetadata,
                    Confirm: this.props.confirm,
                    TextArea: this.props.textArea,
                },
            },
        };
    }
    resolve(_context) {
        return this.value;
    }
    validateProperties(props = {}) {
        // check whether the required properties is in parameter(props)
        runtime_1.requireProperty(props, 'type', this);
        // check whether the associationProperty is allowed value
        // isAllowedValue(props, 'associationProperty', this, RosParameter.ASSOCIATION_PROPERTY_ALLOWED_VALUES);
        // check the type of this parameter is allowed
        util_1.isAllowedValue(props, 'type', this, RosParameter.TYPE_ALLOWED_VALUES);
        // check whether the max length of string is larger than the min length
        if (props.maxLength && props.minLength && props.maxLength < props.minLength) {
            throw new Error(`The max length of string of the parameter ${this.toString()} is lower than its min length.`);
        }
        // check whether the max value of this parameter is larger than the min value
        if (props.maxValue && props.minValue && props.maxValue < props.minValue) {
            throw new Error(`The max value of the parameter ${this.toString()} is lower than its min value.`);
        }
        // check whether the "confirm" property is allowed to be set "true"
        if (props.confirm && (props.type !== 'String' || !props.noEcho)) {
            throw new Error(`The property "confirm" of the parameter ${this.toString()} could be true only if type is "String" and "noEcho" is true.`);
        }
    }
}
exports.RosParameter = RosParameter;
// public static readonly ASSOCIATION_PROPERTY_ALLOWED_VALUES: string[] = ['Password',
//   'TextArea',
//   'Json',
//   'CommaDelimitedList',
//   'Code',
//   'FileContent',
//   'Cron',
//   'ChargeType',
//   'List[Parameter]',
//   'List[Parameters]',
//   'DateTime',
//   'GMTZone',
//   'OOSServiceRole',
//   'RateControl',
//   'Tags',
//   'Targets',
//   'TimeTriggerWeekly',
//   'TimeZone',
//   'ALIYUN::ECS::RegionId',
//   'ALIYUN::ECS::ZoneId',
//   'ALIYUN::ECS::Instance::InstanceId',
//   'ALIYUN::ECS::Instance::Password',
//   'ALIYUN::RDS::Instance::InstanceId',
//   'ALIYUN::RDS::Engine::EngineId',
//   'ALIYUN::RDS::Engine::EngineVersion',
//   'ALIYUN::ECS::Disk::DataDiskCategory',
//   'ALIYUN::ECS::Disk::SystemDiskCategory',
//   'ALIYUN::ECS::Disk::DiskId',
//   'ALIYUN::ECS::VPC::VPCId',
//   'ALIYUN::ECS::VSwitch::VSwitchId',
//   'ALIYUN::ECS::Instance::InstanceType',
//   'ALIYUN::ECS::SecurityGroup::SecurityGroupId',
//   'ALIYUN::ECS::KeyPair::KeyPairName',
//   'ALIYUN::ECS::Snapshot::AutoSnapshotPolicyId',
//   'ALIYUN::ECS::Command::CommandId',
//   'ALIYUN::ECS::Image::ImageId',
//   'ALIYUN::ECS::ResourceGroup::ResourceGroupId',
//   'ALIYUN::ECS::LaunchTemplate::LaunchTemplateId',
//   'ALIYUN::ECS::LaunchTemplate::LaunchTemplateVersion',
//   'ALIYUN::RDS::Instance::InstanceType',
//   'ALIYUN::SLB::Instance::InstanceType',
//   'ALIYUN::SLB::Certificate',
//   'ALIYUN::SLB::Instance::InstanceId',
//   'ALIYUN::SLB::ACL::ACLId',
//   'ALIYUN::OOS::Template::TemplateName',
//   'ALIYUN::OOS::Template::TemplateVersion',
//   'ALIYUN::OOS::Parameter::Value',
//   'ALIYUN::OOS::SecretParameter::Value',
//   'ALIYUN::OOS::Package::PackageName',
//   'ALIYUN::OOS::Package::PackageVersion',
//   'ALIYUN::OOS::Command::CommandContent',
//   'ALIYUN::OOS::Component::CleanUpInfo',
//   'ALIYUN::OOS::File::FileUrl',
//   'ALIYUN::OSS::Bucket::BucketName',
//   'ALIYUN::OSS::Object::ObjectName',
//   'ALIYUN::OOS::Component::TimerTrigger',
//   'ALIYUN::VPC::VirtualBorderRouter::RouteTableId',
//   'ALIYUN::VPC::NatGateway::NatGatewayId',
//   'ALIYUN::VPC::VSwitch::CidrBlock',
//   'ALIYUN::VPC::VPC::CidrBlock',
//   'ALIYUN::ESS::ScalingConfiguration::ScalingConfigurationId',
//   'ALIYUN::ESS::AutoScalingGroup::AutoScalingGroupId',
//   'ALIYUN::RAM::User',
//   'ALIYUN::RAM::Role',
//   'ALIYUN::CAS::Certificate::CertificateId',
//   'ALIYUN::Elasticsearch::Instance::InstanceType',
//   'ALIYUN::InfluxDB::Instance::InstanceType',
//   'ALIYUN::Redis::Instance::InstanceType',
//   'ALIYUN::EHPC::FileSystem::FileSystemId',
//   'ALIYUN::EHPC::FileSystem::MountTargetDomain',
//   'ALIYUN::EHPC::Cluster::ClusterId',
//   'ALIYUN::ALB::Instance::InstanceId',
//   'ALIYUN::ALB::ACL::ACLId',
//   'ALIYUN::ResourceManager::Folder',
//   'ALIYUN::ResourceManager::Account'
// ];
RosParameter.TYPE_ALLOWED_VALUES = ['String', 'Number', 'CommaDelimitedList', 'Json', 'Boolean',
    'ALIYUN::OOS::Parameter::Value', 'ALIYUN::OOS::SecretParameter::Value'];
(function (RosParameter) {
    class AssociationProperty {
    }
    AssociationProperty.PASSWORD = 'Password';
    AssociationProperty.TEXT_AREA = 'TextArea';
    AssociationProperty.JSON = 'Json';
    AssociationProperty.COMMA_DELIMITED_LIST = 'CommaDelimitedList';
    AssociationProperty.CODE = 'Code';
    AssociationProperty.FILE_CONTENT = 'FileContent';
    AssociationProperty.CRON = 'Cron';
    AssociationProperty.CHARGE_TYPE = 'ChargeType';
    AssociationProperty.LIST_PARAMETER = 'List[Parameter]';
    AssociationProperty.LIST_PARAMETERS = 'List[Parameters]';
    AssociationProperty.DATE_TIME = 'DateTime';
    AssociationProperty.GMT_ZONE = 'GMTZone';
    AssociationProperty.OOS_SERVICE_ROLE = 'OOSServiceRole';
    AssociationProperty.RATE_CONTROL = 'RateControl';
    AssociationProperty.TAGS = 'Tags';
    AssociationProperty.TARGETS = 'Targets';
    AssociationProperty.TIME_TRIGGER_WEEKLY = 'TimeTriggerWeekly';
    AssociationProperty.TIME_ZONE = 'TimeZone';
    AssociationProperty.ECS_REGION_ID = 'ALIYUN::ECS::RegionId';
    AssociationProperty.ECS_ZONE_ID = 'ALIYUN::ECS::ZoneId';
    AssociationProperty.ECS_INSTANCE_ID = 'ALIYUN::ECS::Instance::InstanceId';
    AssociationProperty.ECS_INSTANCE_PASSWORD = 'ALIYUN::ECS::Instance::Password';
    AssociationProperty.RDS_INSTANCE_ID = 'ALIYUN::RDS::Instance::InstanceId';
    AssociationProperty.RDS_ENGINE_ID = 'ALIYUN::RDS::Engine::EngineId';
    AssociationProperty.RDS_ENGINE_VERSION = 'ALIYUN::RDS::Engine::EngineVersion';
    AssociationProperty.ECS_DATA_DISK_CATEGORY = 'ALIYUN::ECS::Disk::DataDiskCategory';
    AssociationProperty.ECS_SYSTEM_DISK_CATEGORY = 'ALIYUN::ECS::Disk::SystemDiskCategory';
    AssociationProperty.ECS_DISK_ID = 'ALIYUN::ECS::Disk::DiskId';
    AssociationProperty.ECS_VPC_ID = 'ALIYUN::ECS::VPC::VPCId';
    AssociationProperty.ECS_VSWITCH_ID = 'ALIYUN::ECS::VSwitch::VSwitchId';
    AssociationProperty.ECS_INSTANCE_TYPE = 'ALIYUN::ECS::Instance::InstanceType';
    AssociationProperty.ECS_SECURITY_GROUP_ID = 'ALIYUN::ECS::SecurityGroup::SecurityGroupId';
    AssociationProperty.ECS_KEY_PAIR_NAME = 'ALIYUN::ECS::KeyPair::KeyPairName';
    AssociationProperty.ECS_AUTO_SNAPSHOT_POLICY_ID = 'ALIYUN::ECS::Snapshot::AutoSnapshotPolicyId';
    AssociationProperty.ECS_COMMAND_ID = 'ALIYUN::ECS::Command::CommandId';
    AssociationProperty.ECS_IMAGE_ID = 'ALIYUN::ECS::Image::ImageId';
    AssociationProperty.ECS_RESOURCE_GROUP_ID = 'ALIYUN::ECS::ResourceGroup::ResourceGroupId';
    AssociationProperty.ECS_LAUNCH_TEMPLATE_ID = 'ALIYUN::ECS::LaunchTemplate::LaunchTemplateId';
    AssociationProperty.ECS_LAUNCH_TEMPLATE_VERSION = 'ALIYUN::ECS::LaunchTemplate::LaunchTemplateVersion';
    AssociationProperty.RDS_INSTANCE_TYPE = 'ALIYUN::RDS::Instance::InstanceType';
    AssociationProperty.SLB_INSTANCE_TYPE = 'ALIYUN::SLB::Instance::InstanceType';
    AssociationProperty.SLB_CERTIFICATE = 'ALIYUN::SLB::Certificate';
    AssociationProperty.SLB_INSTANCE_ID = 'ALIYUN::SLB::Instance::InstanceId';
    AssociationProperty.SLB_ACL_ID = 'ALIYUN::SLB::ACL::ACLId';
    AssociationProperty.OOS_TEMPLATE_NAME = 'ALIYUN::OOS::Template::TemplateName';
    AssociationProperty.OOS_TEMPLATE_VERSION = 'ALIYUN::OOS::Template::TemplateVersion';
    AssociationProperty.OOS_PARAMETER_VALUE = 'ALIYUN::OOS::Parameter::Value';
    AssociationProperty.OOS_SECRET_PARAMETER_VALUE = 'ALIYUN::OOS::SecretParameter::Value';
    AssociationProperty.OOS_PACKAGE_NAME = 'ALIYUN::OOS::Package::PackageName';
    AssociationProperty.OOS_PACKAGE_VERSION = 'ALIYUN::OOS::Package::PackageVersion';
    AssociationProperty.OOS_COMMAND_CONTENT = 'ALIYUN::OOS::Command::CommandContent';
    AssociationProperty.OOS_COMPONENT_CLEAN_UP_INFO = 'ALIYUN::OOS::Component::CleanUpInfo';
    AssociationProperty.OOS_FILE_URL = 'ALIYUN::OOS::File::FileUrl';
    AssociationProperty.OSS_BUCKET_NAME = 'ALIYUN::OSS::Bucket::BucketName';
    AssociationProperty.OSS_OBJECT_NAME = 'ALIYUN::OSS::Object::ObjectName';
    AssociationProperty.OOS_COMPONENT_TIMER_TRIGGER = 'ALIYUN::OOS::Component::TimerTrigger';
    AssociationProperty.VPC_ROUTER_ROUTE_TABLE_ID = 'ALIYUN::VPC::VirtualBorderRouter::RouteTableId';
    AssociationProperty.VPC_NAT_GATEWAY_ID = 'ALIYUN::VPC::NatGateway::NatGatewayId';
    AssociationProperty.VSWITCH_CIDR_BLOCK = 'ALIYUN::VPC::VSwitch::CidrBlock';
    AssociationProperty.VPC_CIDR_BLOCK = 'ALIYUN::VPC::VPC::CidrBlock';
    AssociationProperty.ESS_SCALING_CONFIGURATION_ID = 'ALIYUN::ESS::ScalingConfiguration::ScalingConfigurationId';
    AssociationProperty.ESS_AUTO_SCALING_GROUP_ID = 'ALIYUN::ESS::AutoScalingGroup::AutoScalingGroupId';
    AssociationProperty.RAM_USER = 'ALIYUN::RAM::User';
    AssociationProperty.RAM_ROLE = 'ALIYUN::RAM::Role';
    AssociationProperty.CAS_CERTIFICATE_ID = 'ALIYUN::CAS::Certificate::CertificateId';
    AssociationProperty.ELASTICSEARCH_INSTANCE_TYPE = 'ALIYUN::Elasticsearch::Instance::InstanceType';
    AssociationProperty.INFLUX_DB_INSTANCE_TYPE = 'ALIYUN::InfluxDB::Instance::InstanceType';
    AssociationProperty.REDIS_INSTANCE_TYPE = 'ALIYUN::Redis::Instance::InstanceType';
    AssociationProperty.EHPC_FILE_SYSTEM_ID = 'ALIYUN::EHPC::FileSystem::FileSystemId';
    AssociationProperty.EHPC_FILE_SYSTEM_MOUNT_TARGET_DOMAIN = 'ALIYUN::EHPC::FileSystem::MountTargetDomain';
    AssociationProperty.EHPC_CLUSTER_ID = 'ALIYUN::EHPC::Cluster::ClusterId';
    AssociationProperty.ALB_INSTANCE_ID = 'ALIYUN::ALB::Instance::InstanceId';
    AssociationProperty.ALB_ACL_ID = 'ALIYUN::ALB::ACL::ACLId';
    AssociationProperty.RESOURCE_MANAGER_FOLDER = 'ALIYUN::ResourceManager::Folder';
    AssociationProperty.RESOURCE_MANAGER_ACCOUNT = 'ALIYUN::ResourceManager::Account';
    RosParameter.AssociationProperty = AssociationProperty;
})(RosParameter = exports.RosParameter || (exports.RosParameter = {}));
/**
 * Whether the given parameter type looks like a list type
 */
function isListType(type) {
    return type.indexOf('List<') >= 0 || type.indexOf('CommaDelimitedList') >= 0;
}
/**
 * Whether the given parameter type looks like a number type
 */
function isNumberType(type) {
    return type === 'Number';
}
/**
 * Whether the given parameter type looks like a string type
 */
function isStringType(type) {
    return !isListType(type) && !isNumberType(type);
}
const runtime_1 = require("./runtime");
const util_1 = require("./util");
//# sourceMappingURL=data:application/json;base64,