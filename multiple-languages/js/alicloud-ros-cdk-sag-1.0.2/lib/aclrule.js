"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ACLRule = exports.ACLRuleProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const sag_generated_1 = require("./sag.generated");
Object.defineProperty(exports, "ACLRuleProperty", { enumerable: true, get: function () { return sag_generated_1.RosACLRule; } });
/**
 * A ROS resource type:  `ALIYUN::SAG::ACLRule`
 */
class ACLRule extends ros.Resource {
    /**
     * Create a new `ALIYUN::SAG::ACLRule`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosACLRule = new sag_generated_1.RosACLRule(this, id, {
            policy: props.policy,
            description: props.description,
            destCidr: props.destCidr,
            sourcePortRange: props.sourcePortRange,
            sourceCidr: props.sourceCidr,
            priority: props.priority === undefined || props.priority === null ? 1 : props.priority,
            aclId: props.aclId,
            ipProtocol: props.ipProtocol,
            destPortRange: props.destPortRange,
            direction: props.direction,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosACLRule;
        this.attrAcrId = rosACLRule.attrAcrId;
    }
}
exports.ACLRule = ACLRule;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNscnVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFjbHJ1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUE2QztBQUV0QixnR0FGZCwwQkFBVSxPQUVtQjtBQTREdEM7O0dBRUc7QUFDSCxNQUFhLE9BQVEsU0FBUSxHQUFHLENBQUMsUUFBUTtJQVlyQzs7Ozs7O09BTUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQW1CLEVBQUUsbUNBQTJDLElBQUk7UUFDOUcsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLFVBQVUsR0FBRyxJQUFJLDBCQUFVLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUN6QyxNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU07WUFDcEIsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtZQUN4QixlQUFlLEVBQUUsS0FBSyxDQUFDLGVBQWU7WUFDdEMsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQzVCLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUSxLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsUUFBUSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUTtZQUN0RixLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUs7WUFDbEIsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQzVCLGFBQWEsRUFBRSxLQUFLLENBQUMsYUFBYTtZQUNsQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7U0FDN0IsRUFBRSxnQ0FBZ0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxVQUFVLENBQUM7UUFDM0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDO0lBQzFDLENBQUM7Q0FDSjtBQXJDRCwwQkFxQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NBQ0xSdWxlIH0gZnJvbSAnLi9zYWcuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zQUNMUnVsZSBhcyBBQ0xSdWxlUHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBBTElZVU46OlNBRzo6QUNMUnVsZWBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBQ0xSdWxlUHJvcHMge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgYWNsSWQ6IEFjY2VzcyBjb250cm9sIElELlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGFjbElkOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBkZXN0Q2lkcjogRGVzdGluYXRpb24gYWRkcmVzcywgQ0lEUiBmb3JtYXQgYW5kIElQIGFkZHJlc3MgcmFuZ2UgaW4gSVB2NCBmb3JtYXQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGVzdENpZHI6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRlc3RQb3J0UmFuZ2U6IERlc3RpbmF0aW9uIHBvcnQgcmFuZ2UsIDgwLzgwLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRlc3RQb3J0UmFuZ2U6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRpcmVjdGlvbjogUmVndWxhciBkaXJlY3Rpb24uXG4gICAgICogVmFsdWU6IGlufG91dFxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRpcmVjdGlvbjogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgaXBQcm90b2NvbDogUHJvdG9jb2wsIG5vdCBjYXNlIHNlbnNpdGl2ZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBpcFByb3RvY29sOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBwb2xpY3k6IEFjY2VzczogYWNjZXB0fGRyb3BcbiAgICAgKi9cbiAgICByZWFkb25seSBwb2xpY3k6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNvdXJjZUNpZHI6IFNvdXJjZSBhZGRyZXNzLCBDSURSIGZvcm1hdCBhbmQgSVAgYWRkcmVzcyByYW5nZSBpbiBJUHY0IGZvcm1hdC5cbiAgICAgKi9cbiAgICByZWFkb25seSBzb3VyY2VDaWRyOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzb3VyY2VQb3J0UmFuZ2U6IFNvdXJjZSBwb3J0IHJhbmdlLCA4MC84MC5cbiAgICAgKi9cbiAgICByZWFkb25seSBzb3VyY2VQb3J0UmFuZ2U6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRlc2NyaXB0aW9uOiBSdWxlIGRlc2NyaXB0aW9uIGluZm9ybWF0aW9uLCByYW5naW5nIGZyb20gMSB0byA1MTIgY2hhcmFjdGVycy5cbiAgICAgKi9cbiAgICByZWFkb25seSBkZXNjcmlwdGlvbj86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHByaW9yaXR5OiBQcmlvcml0eSwgcmFuZ2luZyBmcm9tIDEgdG8gMTAwLlxuICAgICAqIERlZmF1bHQ6IDFcbiAgICAgKi9cbiAgICByZWFkb25seSBwcmlvcml0eT86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcbn1cblxuLyoqXG4gKiBBIFJPUyByZXNvdXJjZSB0eXBlOiAgYEFMSVlVTjo6U0FHOjpBQ0xSdWxlYFxuICovXG5leHBvcnQgY2xhc3MgQUNMUnVsZSBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBIGZhY3RvcnkgbWV0aG9kIHRoYXQgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGZyb20gYW4gb2JqZWN0XG4gICAgICogY29udGFpbmluZyB0aGUgcHJvcGVydGllcyBvZiB0aGlzIFJPUyByZXNvdXJjZSwgd2hpY2ggd2lsbCBiZSBhc3NpZ25lZCB0byBST1MgcmVzb3VyY2UuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgQWNySWQ6IEFjY2VzcyBjb250cm9sIHJ1bGUgSUQuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJBY3JJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGBBTElZVU46OlNBRzo6QUNMUnVsZWAuXG4gICAgICpcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogQUNMUnVsZVByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIGNvbnN0IHJvc0FDTFJ1bGUgPSBuZXcgUm9zQUNMUnVsZSh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIHBvbGljeTogcHJvcHMucG9saWN5LFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IHByb3BzLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgZGVzdENpZHI6IHByb3BzLmRlc3RDaWRyLFxuICAgICAgICAgICAgc291cmNlUG9ydFJhbmdlOiBwcm9wcy5zb3VyY2VQb3J0UmFuZ2UsXG4gICAgICAgICAgICBzb3VyY2VDaWRyOiBwcm9wcy5zb3VyY2VDaWRyLFxuICAgICAgICAgICAgcHJpb3JpdHk6IHByb3BzLnByaW9yaXR5ID09PSB1bmRlZmluZWQgfHwgcHJvcHMucHJpb3JpdHkgPT09IG51bGwgPyAxIDogcHJvcHMucHJpb3JpdHksXG4gICAgICAgICAgICBhY2xJZDogcHJvcHMuYWNsSWQsXG4gICAgICAgICAgICBpcFByb3RvY29sOiBwcm9wcy5pcFByb3RvY29sLFxuICAgICAgICAgICAgZGVzdFBvcnRSYW5nZTogcHJvcHMuZGVzdFBvcnRSYW5nZSxcbiAgICAgICAgICAgIGRpcmVjdGlvbjogcHJvcHMuZGlyZWN0aW9uLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc0FDTFJ1bGU7XG4gICAgICAgIHRoaXMuYXR0ckFjcklkID0gcm9zQUNMUnVsZS5hdHRyQWNySWQ7XG4gICAgfVxufVxuIl19