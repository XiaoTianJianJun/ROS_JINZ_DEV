"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SynchronizationJob = exports.SynchronizationJobProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const dts_generated_1 = require("./dts.generated");
Object.defineProperty(exports, "SynchronizationJobProperty", { enumerable: true, get: function () { return dts_generated_1.RosSynchronizationJob; } });
/**
 * A ROS resource type:  `ALIYUN::DTS::SynchronizationJob`
 */
class SynchronizationJob extends ros.Resource {
    /**
     * Create a new `ALIYUN::DTS::SynchronizationJob`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosSynchronizationJob = new dts_generated_1.RosSynchronizationJob(this, id, {
            synchronizationObjects: props.synchronizationObjects,
            period: props.period,
            payType: props.payType ? props.payType : 'Postpaid',
            topology: props.topology,
            sourceRegion: props.sourceRegion,
            dataInitialization: props.dataInitialization ? props.dataInitialization : true,
            destinationEndpoint: props.destinationEndpoint,
            networkType: props.networkType,
            sourceEndpoint: props.sourceEndpoint,
            usedTime: props.usedTime,
            structureInitialization: props.structureInitialization ? props.structureInitialization : true,
            synchronizationJobClass: props.synchronizationJobClass,
            destRegion: props.destRegion,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosSynchronizationJob;
        this.attrSynchronizationJobId = rosSynchronizationJob.attrSynchronizationJobId;
    }
}
exports.SynchronizationJob = SynchronizationJob;
//# sourceMappingURL=data:application/json;base64,