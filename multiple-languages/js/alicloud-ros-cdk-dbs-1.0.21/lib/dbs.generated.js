"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosRestoreTask = exports.RosDownload = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosDownloadProps`
 *
 * @param properties - the TypeScript properties of a `RosDownloadProps`
 *
 * @returns the result of the validation.
 */
function RosDownloadPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('bakSetId', ros.validateString)(properties.bakSetId));
    errors.collect(ros.propertyValidator('instanceName', ros.requiredValidator)(properties.instanceName));
    errors.collect(ros.propertyValidator('instanceName', ros.validateString)(properties.instanceName));
    errors.collect(ros.propertyValidator('downloadPointInTime', ros.validateString)(properties.downloadPointInTime));
    errors.collect(ros.propertyValidator('bakSetType', ros.validateString)(properties.bakSetType));
    errors.collect(ros.propertyValidator('bakSetSize', ros.validateString)(properties.bakSetSize));
    errors.collect(ros.propertyValidator('targetPath', ros.validateString)(properties.targetPath));
    errors.collect(ros.propertyValidator('targetType', ros.validateString)(properties.targetType));
    errors.collect(ros.propertyValidator('targetOssRegion', ros.validateString)(properties.targetOssRegion));
    errors.collect(ros.propertyValidator('deleteBackupSetInOss', ros.validateBoolean)(properties.deleteBackupSetInOss));
    errors.collect(ros.propertyValidator('targetBucket', ros.validateString)(properties.targetBucket));
    errors.collect(ros.propertyValidator('formatType', ros.requiredValidator)(properties.formatType));
    errors.collect(ros.propertyValidator('formatType', ros.validateString)(properties.formatType));
    if (properties.downloadAddressDuration && (typeof properties.downloadAddressDuration) !== 'object') {
        errors.collect(ros.propertyValidator('downloadAddressDuration', ros.validateRange)({
            data: properties.downloadAddressDuration,
            min: 300,
            max: 86400,
        }));
    }
    errors.collect(ros.propertyValidator('downloadAddressDuration', ros.validateNumber)(properties.downloadAddressDuration));
    return errors.wrap('supplied properties not correct for "RosDownloadProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DBS::Download` resource
 *
 * @param properties - the TypeScript properties of a `RosDownloadProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DBS::Download` resource.
 */
// @ts-ignore TS6133
function rosDownloadPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosDownloadPropsValidator(properties).assertSuccess();
    }
    return {
        FormatType: ros.stringToRosTemplate(properties.formatType),
        InstanceName: ros.stringToRosTemplate(properties.instanceName),
        BakSetId: ros.stringToRosTemplate(properties.bakSetId),
        BakSetSize: ros.stringToRosTemplate(properties.bakSetSize),
        BakSetType: ros.stringToRosTemplate(properties.bakSetType),
        DeleteBackupSetInOss: ros.booleanToRosTemplate(properties.deleteBackupSetInOss),
        DownloadAddressDuration: ros.numberToRosTemplate(properties.downloadAddressDuration),
        DownloadPointInTime: ros.stringToRosTemplate(properties.downloadPointInTime),
        TargetBucket: ros.stringToRosTemplate(properties.targetBucket),
        TargetOssRegion: ros.stringToRosTemplate(properties.targetOssRegion),
        TargetPath: ros.stringToRosTemplate(properties.targetPath),
        TargetType: ros.stringToRosTemplate(properties.targetType),
    };
}
/**
 * A ROS template type:  `ALIYUN::DBS::Download`
 */
class RosDownload extends ros.RosResource {
    /**
     * Create a new `ALIYUN::DBS::Download`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosDownload.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrBakSetId = this.getAtt('BakSetId');
        this.attrDownloadAddressInfo = this.getAtt('DownloadAddressInfo');
        this.attrInstanceName = this.getAtt('InstanceName');
        this.attrTaskId = this.getAtt('TaskId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.formatType = props.formatType;
        this.instanceName = props.instanceName;
        this.bakSetId = props.bakSetId;
        this.bakSetSize = props.bakSetSize;
        this.bakSetType = props.bakSetType;
        this.deleteBackupSetInOss = props.deleteBackupSetInOss;
        this.downloadAddressDuration = props.downloadAddressDuration;
        this.downloadPointInTime = props.downloadPointInTime;
        this.targetBucket = props.targetBucket;
        this.targetOssRegion = props.targetOssRegion;
        this.targetPath = props.targetPath;
        this.targetType = props.targetType;
    }
    get rosProperties() {
        return {
            formatType: this.formatType,
            instanceName: this.instanceName,
            bakSetId: this.bakSetId,
            bakSetSize: this.bakSetSize,
            bakSetType: this.bakSetType,
            deleteBackupSetInOss: this.deleteBackupSetInOss,
            downloadAddressDuration: this.downloadAddressDuration,
            downloadPointInTime: this.downloadPointInTime,
            targetBucket: this.targetBucket,
            targetOssRegion: this.targetOssRegion,
            targetPath: this.targetPath,
            targetType: this.targetType,
        };
    }
    renderProperties(props) {
        return rosDownloadPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosDownload = RosDownload;
/**
 * The resource type name for this resource class.
 */
RosDownload.ROS_RESOURCE_TYPE_NAME = "ALIYUN::DBS::Download";
/**
 * Determine whether the given properties match those of a `RosRestoreTaskProps`
 *
 * @param properties - the TypeScript properties of a `RosRestoreTaskProps`
 *
 * @returns the result of the validation.
 */
function RosRestoreTaskPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('startTask', ros.validateBoolean)(properties.startTask));
    errors.collect(ros.propertyValidator('restoreDir', ros.validateString)(properties.restoreDir));
    if (properties.duplicateConflict && (typeof properties.duplicateConflict) !== 'object') {
        errors.collect(ros.propertyValidator('duplicateConflict', ros.validateAllowedValues)({
            data: properties.duplicateConflict,
            allowedValues: ["failure", "renamenew"],
        }));
    }
    errors.collect(ros.propertyValidator('duplicateConflict', ros.validateString)(properties.duplicateConflict));
    errors.collect(ros.propertyValidator('restoreHome', ros.validateString)(properties.restoreHome));
    errors.collect(ros.propertyValidator('destinationEndpointPassword', ros.validateString)(properties.destinationEndpointPassword));
    errors.collect(ros.propertyValidator('destinationEndpointIp', ros.validateString)(properties.destinationEndpointIp));
    errors.collect(ros.propertyValidator('destinationEndpointPort', ros.validateNumber)(properties.destinationEndpointPort));
    errors.collect(ros.propertyValidator('destinationEndpointOracleSid', ros.validateString)(properties.destinationEndpointOracleSid));
    errors.collect(ros.propertyValidator('backupSetId', ros.validateString)(properties.backupSetId));
    errors.collect(ros.propertyValidator('destinationEndpointInstanceType', ros.requiredValidator)(properties.destinationEndpointInstanceType));
    errors.collect(ros.propertyValidator('destinationEndpointInstanceType', ros.validateString)(properties.destinationEndpointInstanceType));
    errors.collect(ros.propertyValidator('restoreTime', ros.validateNumber)(properties.restoreTime));
    errors.collect(ros.propertyValidator('destinationEndpointRegion', ros.validateString)(properties.destinationEndpointRegion));
    errors.collect(ros.propertyValidator('destinationEndpointDatabaseName', ros.validateString)(properties.destinationEndpointDatabaseName));
    errors.collect(ros.propertyValidator('destinationEndpointUserName', ros.validateString)(properties.destinationEndpointUserName));
    errors.collect(ros.propertyValidator('restoreObjects', ros.validateString)(properties.restoreObjects));
    errors.collect(ros.propertyValidator('restoreTaskName', ros.requiredValidator)(properties.restoreTaskName));
    errors.collect(ros.propertyValidator('restoreTaskName', ros.validateString)(properties.restoreTaskName));
    errors.collect(ros.propertyValidator('backupPlanId', ros.requiredValidator)(properties.backupPlanId));
    errors.collect(ros.propertyValidator('backupPlanId', ros.validateString)(properties.backupPlanId));
    errors.collect(ros.propertyValidator('backupGatewayId', ros.validateNumber)(properties.backupGatewayId));
    errors.collect(ros.propertyValidator('destinationEndpointInstanceId', ros.validateString)(properties.destinationEndpointInstanceId));
    return errors.wrap('supplied properties not correct for "RosRestoreTaskProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::DBS::RestoreTask` resource
 *
 * @param properties - the TypeScript properties of a `RosRestoreTaskProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::DBS::RestoreTask` resource.
 */
// @ts-ignore TS6133
function rosRestoreTaskPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosRestoreTaskPropsValidator(properties).assertSuccess();
    }
    return {
        BackupPlanId: ros.stringToRosTemplate(properties.backupPlanId),
        DestinationEndpointInstanceType: ros.stringToRosTemplate(properties.destinationEndpointInstanceType),
        RestoreTaskName: ros.stringToRosTemplate(properties.restoreTaskName),
        BackupGatewayId: ros.numberToRosTemplate(properties.backupGatewayId),
        BackupSetId: ros.stringToRosTemplate(properties.backupSetId),
        DestinationEndpointDatabaseName: ros.stringToRosTemplate(properties.destinationEndpointDatabaseName),
        DestinationEndpointInstanceID: ros.stringToRosTemplate(properties.destinationEndpointInstanceId),
        DestinationEndpointIP: ros.stringToRosTemplate(properties.destinationEndpointIp),
        DestinationEndpointOracleSID: ros.stringToRosTemplate(properties.destinationEndpointOracleSid),
        DestinationEndpointPassword: ros.stringToRosTemplate(properties.destinationEndpointPassword),
        DestinationEndpointPort: ros.numberToRosTemplate(properties.destinationEndpointPort),
        DestinationEndpointRegion: ros.stringToRosTemplate(properties.destinationEndpointRegion),
        DestinationEndpointUserName: ros.stringToRosTemplate(properties.destinationEndpointUserName),
        DuplicateConflict: ros.stringToRosTemplate(properties.duplicateConflict),
        RestoreDir: ros.stringToRosTemplate(properties.restoreDir),
        RestoreHome: ros.stringToRosTemplate(properties.restoreHome),
        RestoreObjects: ros.stringToRosTemplate(properties.restoreObjects),
        RestoreTime: ros.numberToRosTemplate(properties.restoreTime),
        StartTask: ros.booleanToRosTemplate(properties.startTask),
    };
}
/**
 * A ROS template type:  `ALIYUN::DBS::RestoreTask`
 */
class RosRestoreTask extends ros.RosResource {
    /**
     * Create a new `ALIYUN::DBS::RestoreTask`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosRestoreTask.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrRestoreTaskId = this.getAtt('RestoreTaskId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.backupPlanId = props.backupPlanId;
        this.destinationEndpointInstanceType = props.destinationEndpointInstanceType;
        this.restoreTaskName = props.restoreTaskName;
        this.backupGatewayId = props.backupGatewayId;
        this.backupSetId = props.backupSetId;
        this.destinationEndpointDatabaseName = props.destinationEndpointDatabaseName;
        this.destinationEndpointInstanceId = props.destinationEndpointInstanceId;
        this.destinationEndpointIp = props.destinationEndpointIp;
        this.destinationEndpointOracleSid = props.destinationEndpointOracleSid;
        this.destinationEndpointPassword = props.destinationEndpointPassword;
        this.destinationEndpointPort = props.destinationEndpointPort;
        this.destinationEndpointRegion = props.destinationEndpointRegion;
        this.destinationEndpointUserName = props.destinationEndpointUserName;
        this.duplicateConflict = props.duplicateConflict;
        this.restoreDir = props.restoreDir;
        this.restoreHome = props.restoreHome;
        this.restoreObjects = props.restoreObjects;
        this.restoreTime = props.restoreTime;
        this.startTask = props.startTask;
    }
    get rosProperties() {
        return {
            backupPlanId: this.backupPlanId,
            destinationEndpointInstanceType: this.destinationEndpointInstanceType,
            restoreTaskName: this.restoreTaskName,
            backupGatewayId: this.backupGatewayId,
            backupSetId: this.backupSetId,
            destinationEndpointDatabaseName: this.destinationEndpointDatabaseName,
            destinationEndpointInstanceId: this.destinationEndpointInstanceId,
            destinationEndpointIp: this.destinationEndpointIp,
            destinationEndpointOracleSid: this.destinationEndpointOracleSid,
            destinationEndpointPassword: this.destinationEndpointPassword,
            destinationEndpointPort: this.destinationEndpointPort,
            destinationEndpointRegion: this.destinationEndpointRegion,
            destinationEndpointUserName: this.destinationEndpointUserName,
            duplicateConflict: this.duplicateConflict,
            restoreDir: this.restoreDir,
            restoreHome: this.restoreHome,
            restoreObjects: this.restoreObjects,
            restoreTime: this.restoreTime,
            startTask: this.startTask,
        };
    }
    renderProperties(props) {
        return rosRestoreTaskPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosRestoreTask = RosRestoreTask;
/**
 * The resource type name for this resource class.
 */
RosRestoreTask.ROS_RESOURCE_TYPE_NAME = "ALIYUN::DBS::RestoreTask";
//# sourceMappingURL=data:application/json;base64,