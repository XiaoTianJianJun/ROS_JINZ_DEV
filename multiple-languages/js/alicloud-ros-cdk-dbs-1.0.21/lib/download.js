"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Download = exports.DownloadProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const dbs_generated_1 = require("./dbs.generated");
Object.defineProperty(exports, "DownloadProperty", { enumerable: true, get: function () { return dbs_generated_1.RosDownload; } });
/**
 * A ROS resource type:  `ALIYUN::DBS::Download`
 */
class Download extends ros.Resource {
    /**
     * Create a new `ALIYUN::DBS::Download`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosDownload = new dbs_generated_1.RosDownload(this, id, {
            bakSetId: props.bakSetId,
            instanceName: props.instanceName,
            downloadPointInTime: props.downloadPointInTime,
            bakSetType: props.bakSetType,
            bakSetSize: props.bakSetSize,
            targetPath: props.targetPath,
            targetType: props.targetType,
            targetOssRegion: props.targetOssRegion,
            deleteBackupSetInOss: props.deleteBackupSetInOss === undefined || props.deleteBackupSetInOss === null ? true : props.deleteBackupSetInOss,
            targetBucket: props.targetBucket,
            formatType: props.formatType,
            downloadAddressDuration: props.downloadAddressDuration === undefined || props.downloadAddressDuration === null ? 2700 : props.downloadAddressDuration,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosDownload;
        this.attrBakSetId = rosDownload.attrBakSetId;
        this.attrDownloadAddressInfo = rosDownload.attrDownloadAddressInfo;
        this.attrInstanceName = rosDownload.attrInstanceName;
        this.attrTaskId = rosDownload.attrTaskId;
    }
}
exports.Download = Download;
//# sourceMappingURL=data:application/json;base64,