"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Instance = exports.InstanceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const kafka_generated_1 = require("./kafka.generated");
Object.defineProperty(exports, "InstanceProperty", { enumerable: true, get: function () { return kafka_generated_1.RosInstance; } });
/**
 * A ROS resource type:  `ALIYUN::KAFKA::Instance`
 */
class Instance extends ros.Resource {
    /**
     * Create a new `ALIYUN::KAFKA::Instance`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosInstance = new kafka_generated_1.RosInstance(this, id, {
            deployType: props.deployType,
            diskType: props.diskType,
            deployOption: props.deployOption,
            eipMax: props.eipMax,
            specType: props.specType,
            ioMax: props.ioMax,
            ioMaxSpec: props.ioMaxSpec,
            diskSize: props.diskSize,
            topicQuota: props.topicQuota,
            payType: props.payType === undefined || props.payType === null ? 'Hour' : props.payType,
            tags: props.tags,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosInstance;
        this.attrInstanceId = rosInstance.attrInstanceId;
        this.attrName = rosInstance.attrName;
        this.attrOrderId = rosInstance.attrOrderId;
    }
}
exports.Instance = Instance;
//# sourceMappingURL=data:application/json;base64,