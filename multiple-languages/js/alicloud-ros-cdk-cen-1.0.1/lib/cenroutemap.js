"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CenRouteMap = exports.CenRouteMapProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cen_generated_1 = require("./cen.generated");
Object.defineProperty(exports, "CenRouteMapProperty", { enumerable: true, get: function () { return cen_generated_1.RosCenRouteMap; } });
/**
 * A ROS resource type:  `ALIYUN::CEN::CenRouteMap`
 */
class CenRouteMap extends ros.Resource {
    /**
     * Create a new `ALIYUN::CEN::CenRouteMap`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosCenRouteMap = new cen_generated_1.RosCenRouteMap(this, id, {
            description: props.description,
            sourceInstanceIdsReverseMatch: props.sourceInstanceIdsReverseMatch,
            transmitDirection: props.transmitDirection,
            matchCommunitySet: props.matchCommunitySet,
            cenRegionId: props.cenRegionId,
            sourceRouteTableIds: props.sourceRouteTableIds,
            destinationInstanceIds: props.destinationInstanceIds,
            destinationInstanceIdsReverseMatch: props.destinationInstanceIdsReverseMatch,
            sourceInstanceIds: props.sourceInstanceIds,
            destinationRouteTableIds: props.destinationRouteTableIds,
            destinationCidrBlocks: props.destinationCidrBlocks,
            operateCommunitySet: props.operateCommunitySet,
            destinationChildInstanceTypes: props.destinationChildInstanceTypes,
            priority: props.priority,
            sourceChildInstanceTypes: props.sourceChildInstanceTypes,
            asPathMatchMode: props.asPathMatchMode,
            cidrMatchMode: props.cidrMatchMode,
            mapResult: props.mapResult,
            routeTypes: props.routeTypes,
            preference: props.preference,
            communityOperateMode: props.communityOperateMode,
            cenId: props.cenId,
            nextPriority: props.nextPriority,
            prependAsPath: props.prependAsPath,
            communityMatchMode: props.communityMatchMode,
            matchAsns: props.matchAsns,
            sourceRegionIds: props.sourceRegionIds,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosCenRouteMap;
        this.attrAsPathMatchMode = rosCenRouteMap.attrAsPathMatchMode;
        this.attrCenId = rosCenRouteMap.attrCenId;
        this.attrCenRegionId = rosCenRouteMap.attrCenRegionId;
        this.attrCidrMatchMode = rosCenRouteMap.attrCidrMatchMode;
        this.attrCommunityMatchMode = rosCenRouteMap.attrCommunityMatchMode;
        this.attrCommunityOperateMode = rosCenRouteMap.attrCommunityOperateMode;
        this.attrDescription = rosCenRouteMap.attrDescription;
        this.attrDestinationChildInstanceTypes = rosCenRouteMap.attrDestinationChildInstanceTypes;
        this.attrDestinationCidrBlocks = rosCenRouteMap.attrDestinationCidrBlocks;
        this.attrDestinationInstanceIds = rosCenRouteMap.attrDestinationInstanceIds;
        this.attrDestinationInstanceIdsReverseMatch = rosCenRouteMap.attrDestinationInstanceIdsReverseMatch;
        this.attrDestinationRouteTableIds = rosCenRouteMap.attrDestinationRouteTableIds;
        this.attrMapResult = rosCenRouteMap.attrMapResult;
        this.attrMatchAsns = rosCenRouteMap.attrMatchAsns;
        this.attrMatchCommunitySet = rosCenRouteMap.attrMatchCommunitySet;
        this.attrNextPriority = rosCenRouteMap.attrNextPriority;
        this.attrOperateCommunitySet = rosCenRouteMap.attrOperateCommunitySet;
        this.attrPreference = rosCenRouteMap.attrPreference;
        this.attrPrependAsPath = rosCenRouteMap.attrPrependAsPath;
        this.attrPriority = rosCenRouteMap.attrPriority;
        this.attrRouteMapId = rosCenRouteMap.attrRouteMapId;
        this.attrRouteTypes = rosCenRouteMap.attrRouteTypes;
        this.attrSourceChildInstanceTypes = rosCenRouteMap.attrSourceChildInstanceTypes;
        this.attrSourceInstanceIds = rosCenRouteMap.attrSourceInstanceIds;
        this.attrSourceInstanceIdsReverseMatch = rosCenRouteMap.attrSourceInstanceIdsReverseMatch;
        this.attrSourceRegionIds = rosCenRouteMap.attrSourceRegionIds;
        this.attrSourceRouteTableIds = rosCenRouteMap.attrSourceRouteTableIds;
        this.attrTransmitDirection = rosCenRouteMap.attrTransmitDirection;
    }
}
exports.CenRouteMap = CenRouteMap;
//# sourceMappingURL=data:application/json;base64,