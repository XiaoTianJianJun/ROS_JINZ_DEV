"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosEditingProject = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosEditingProjectProps`
 *
 * @param properties - the TypeScript properties of a `RosEditingProjectProps`
 *
 * @returns the result of the validation.
 */
function RosEditingProjectPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('editingProjectName', ros.validateString)(properties.editingProjectName));
    errors.collect(ros.propertyValidator('timeline', ros.validateString)(properties.timeline));
    errors.collect(ros.propertyValidator('title', ros.requiredValidator)(properties.title));
    errors.collect(ros.propertyValidator('title', ros.validateString)(properties.title));
    return errors.wrap('supplied properties not correct for "RosEditingProjectProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::VOD::EditingProject` resource
 *
 * @param properties - the TypeScript properties of a `RosEditingProjectProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::VOD::EditingProject` resource.
 */
// @ts-ignore TS6133
function rosEditingProjectPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosEditingProjectPropsValidator(properties).assertSuccess();
    }
    return {
        Title: ros.stringToRosTemplate(properties.title),
        EditingProjectName: ros.stringToRosTemplate(properties.editingProjectName),
        Timeline: ros.stringToRosTemplate(properties.timeline),
    };
}
/**
 * A ROS template type:  `ALIYUN::VOD::EditingProject`
 */
class RosEditingProject extends ros.RosResource {
    /**
     * Create a new `ALIYUN::VOD::EditingProject`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosEditingProject.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrCreateTime = this.getAtt('CreateTime');
        this.attrEditingProjectId = this.getAtt('EditingProjectId');
        this.attrEditingProjectName = this.getAtt('EditingProjectName');
        this.attrModifiedTime = this.getAtt('ModifiedTime');
        this.attrTimeline = this.getAtt('Timeline');
        this.attrTitle = this.getAtt('Title');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.title = props.title;
        this.editingProjectName = props.editingProjectName;
        this.timeline = props.timeline;
    }
    get rosProperties() {
        return {
            title: this.title,
            editingProjectName: this.editingProjectName,
            timeline: this.timeline,
        };
    }
    renderProperties(props) {
        return rosEditingProjectPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosEditingProject = RosEditingProject;
/**
 * The resource type name for this resource class.
 */
RosEditingProject.ROS_RESOURCE_TYPE_NAME = "ALIYUN::VOD::EditingProject";
//# sourceMappingURL=data:application/json;base64,