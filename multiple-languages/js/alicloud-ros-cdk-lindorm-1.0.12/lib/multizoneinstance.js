"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiZoneInstance = exports.MultiZoneInstanceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const lindorm_generated_1 = require("./lindorm.generated");
Object.defineProperty(exports, "MultiZoneInstanceProperty", { enumerable: true, get: function () { return lindorm_generated_1.RosMultiZoneInstance; } });
/**
 * A ROS resource type:  `ALIYUN::Lindorm::MultiZoneInstance`
 */
class MultiZoneInstance extends ros.Resource {
    /**
     * Create a new `ALIYUN::Lindorm::MultiZoneInstance`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosMultiZoneInstance = new lindorm_generated_1.RosMultiZoneInstance(this, id, {
            standbyZoneId: props.standbyZoneId,
            resourceGroupId: props.resourceGroupId,
            instanceChargeType: props.instanceChargeType === undefined || props.instanceChargeType === null ? 'POSTPAY' : props.instanceChargeType,
            logDiskCategory: props.logDiskCategory,
            standbyVSwitchId: props.standbyVSwitchId,
            solrNum: props.solrNum,
            solrSpec: props.solrSpec,
            coreSpec: props.coreSpec,
            filestoreSpec: props.filestoreSpec,
            tsdbNum: props.tsdbNum,
            arbiterZoneId: props.arbiterZoneId,
            primaryZoneId: props.primaryZoneId,
            multiZoneCombination: props.multiZoneCombination,
            coreSingleStorage: props.coreSingleStorage,
            coldStorage: props.coldStorage,
            diskCategory: props.diskCategory,
            logSpec: props.logSpec,
            period: props.period,
            primaryVSwitchId: props.primaryVSwitchId,
            arbiterVSwitchId: props.arbiterVSwitchId,
            instanceName: props.instanceName,
            filestoreNum: props.filestoreNum,
            vpcId: props.vpcId,
            securityIpList: props.securityIpList,
            lindormSpec: props.lindormSpec,
            tsdbSpec: props.tsdbSpec,
            logSingleStorage: props.logSingleStorage,
            lindormNum: props.lindormNum,
            logNum: props.logNum,
            periodUnit: props.periodUnit,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosMultiZoneInstance;
        this.attrInstanceId = rosMultiZoneInstance.attrInstanceId;
        this.attrJdbcUrlList = rosMultiZoneInstance.attrJdbcUrlList;
    }
}
exports.MultiZoneInstance = MultiZoneInstance;
//# sourceMappingURL=data:application/json;base64,