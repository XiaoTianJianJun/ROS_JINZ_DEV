"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VpnGateway = exports.VpnGatewayProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const vpc_generated_1 = require("./vpc.generated");
Object.defineProperty(exports, "VpnGatewayProperty", { enumerable: true, get: function () { return vpc_generated_1.RosVpnGateway; } });
/**
 * A ROS resource type:  `ALIYUN::VPC::VpnGateway`
 */
class VpnGateway extends ros.Resource {
    /**
     * Create a new `ALIYUN::VPC::VpnGateway`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosVpnGateway = new vpc_generated_1.RosVpnGateway(this, id, {
            enableIpsec: props.enableIpsec === undefined || props.enableIpsec === null ? true : props.enableIpsec,
            enableSsl: props.enableSsl === undefined || props.enableSsl === null ? false : props.enableSsl,
            vpnType: props.vpnType,
            sslConnections: props.sslConnections,
            disasterRecoveryVSwitchId: props.disasterRecoveryVSwitchId,
            description: props.description,
            instanceChargeType: props.instanceChargeType === undefined || props.instanceChargeType === null ? 'PREPAY' : props.instanceChargeType,
            vSwitchId: props.vSwitchId,
            period: props.period,
            autoPay: props.autoPay === undefined || props.autoPay === null ? true : props.autoPay,
            name: props.name,
            vpcId: props.vpcId,
            networkType: props.networkType,
            bandwidth: props.bandwidth,
            tags: props.tags,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosVpnGateway;
        this.attrDisasterRecoveryInternetIp = rosVpnGateway.attrDisasterRecoveryInternetIp;
        this.attrDisasterRecoveryVSwitchId = rosVpnGateway.attrDisasterRecoveryVSwitchId;
        this.attrInternetIp = rosVpnGateway.attrInternetIp;
        this.attrOrderId = rosVpnGateway.attrOrderId;
        this.attrSpec = rosVpnGateway.attrSpec;
        this.attrSslMaxConnections = rosVpnGateway.attrSslMaxConnections;
        this.attrSslVpnInternetIp = rosVpnGateway.attrSslVpnInternetIp;
        this.attrVSwitchId = rosVpnGateway.attrVSwitchId;
        this.attrVpcId = rosVpnGateway.attrVpcId;
        this.attrVpnGatewayId = rosVpnGateway.attrVpnGatewayId;
        this.attrVpnType = rosVpnGateway.attrVpnType;
    }
}
exports.VpnGateway = VpnGateway;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidnBuZ2F0ZXdheS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInZwbmdhdGV3YXkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQThDO0FBQzlDLG1EQUFnRDtBQUV0QixtR0FGakIsNkJBQWEsT0FFc0I7QUFtRzVDOztHQUVHO0FBQ0gsTUFBYSxVQUFXLFNBQVEsR0FBRyxDQUFDLFFBQVE7SUE4RHhDOzs7Ozs7T0FNRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBc0IsRUFBRSxtQ0FBMkMsSUFBSTtRQUNqSCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sYUFBYSxHQUFHLElBQUksNkJBQWEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQy9DLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVyxLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsV0FBVyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsV0FBVztZQUNyRyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVMsS0FBSyxTQUFTLElBQUksS0FBSyxDQUFDLFNBQVMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVM7WUFDOUYsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO1lBQ3RCLGNBQWMsRUFBRSxLQUFLLENBQUMsY0FBYztZQUNwQyx5QkFBeUIsRUFBRSxLQUFLLENBQUMseUJBQXlCO1lBQzFELFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixrQkFBa0IsRUFBRSxLQUFLLENBQUMsa0JBQWtCLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLGtCQUFrQjtZQUNySSxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNO1lBQ3BCLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTyxLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsT0FBTyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTztZQUNyRixJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7WUFDaEIsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLO1lBQ2xCLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztZQUM5QixTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO1NBQ25CLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsYUFBYSxDQUFDO1FBQzlCLElBQUksQ0FBQyw4QkFBOEIsR0FBRyxhQUFhLENBQUMsOEJBQThCLENBQUM7UUFDbkYsSUFBSSxDQUFDLDZCQUE2QixHQUFHLGFBQWEsQ0FBQyw2QkFBNkIsQ0FBQztRQUNqRixJQUFJLENBQUMsY0FBYyxHQUFHLGFBQWEsQ0FBQyxjQUFjLENBQUM7UUFDbkQsSUFBSSxDQUFDLFdBQVcsR0FBRyxhQUFhLENBQUMsV0FBVyxDQUFDO1FBQzdDLElBQUksQ0FBQyxRQUFRLEdBQUcsYUFBYSxDQUFDLFFBQVEsQ0FBQztRQUN2QyxJQUFJLENBQUMscUJBQXFCLEdBQUcsYUFBYSxDQUFDLHFCQUFxQixDQUFDO1FBQ2pFLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxhQUFhLENBQUMsb0JBQW9CLENBQUM7UUFDL0QsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUMsYUFBYSxDQUFDO1FBQ2pELElBQUksQ0FBQyxTQUFTLEdBQUcsYUFBYSxDQUFDLFNBQVMsQ0FBQztRQUN6QyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsYUFBYSxDQUFDLGdCQUFnQixDQUFDO1FBQ3ZELElBQUksQ0FBQyxXQUFXLEdBQUcsYUFBYSxDQUFDLFdBQVcsQ0FBQztJQUNqRCxDQUFDO0NBQ0o7QUF0R0QsZ0NBc0dDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcm9zIGZyb20gJ0BhbGljbG91ZC9yb3MtY2RrLWNvcmUnO1xuaW1wb3J0IHsgUm9zVnBuR2F0ZXdheSB9IGZyb20gJy4vdnBjLmdlbmVyYXRlZCc7XG4vLyBHZW5lcmF0ZWQgZnJvbSB0aGUgQWxpQ2xvdWQgUk9TIFJlc291cmNlIFNwZWNpZmljYXRpb25cbmV4cG9ydCB7IFJvc1ZwbkdhdGV3YXkgYXMgVnBuR2F0ZXdheVByb3BlcnR5IH07XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgZGVmaW5pbmcgYSBgQUxJWVVOOjpWUEM6OlZwbkdhdGV3YXlgXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVnBuR2F0ZXdheVByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGJhbmR3aWR0aDogVGhlIHB1YmxpYyBuZXR3b3JrIGJhbmR3aWR0aCBvZiB0aGUgVlBOIGdhdGV3YXksIGluIE1icHMuXG4gICAgICogVmFsdWU6IDV8MTB8MjB8NTB8MTAwfDIwMC5cbiAgICAgKi9cbiAgICByZWFkb25seSBiYW5kd2lkdGg6IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHZwY0lkOiBWUEMgSUQgdG8gd2hpY2ggdGhlIFZQTiBnYXRld2F5IGJlbG9uZ3MuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdnBjSWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGF1dG9QYXk6IFdoZXRoZXIgdG8gYXV0b21hdGljYWxseSBwYXkgdGhlIGJpbGwgb2YgdGhlIFZQTiBnYXRld2F5LCB0aGUgdmFsdWU6XG4gICAgICogdHJ1ZTogQXV0b21hdGljYWxseSBwYXlzIHRoZSBiaWxsIGZvciB0aGUgVlBOIGdhdGV3YXkuXG4gICAgICogZmFsc2U6IERvZXMgbm90IGF1dG9tYXRpY2FsbHkgcGF5IHRoZSBiaWxsIGZvciB0aGUgVlBOIGdhdGV3YXkuXG4gICAgICogRGVmYXVsdCB0cnVlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF1dG9QYXk/OiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZGVzY3JpcHRpb246IERlc2NyaXB0aW9uIG9mIHRoZSBWUE4gZ2F0ZXdheS5cbiAgICAgKiBUaGUgbGVuZ3RoIGlzIDItMjU2IGNoYXJhY3RlcnMgYW5kIG11c3Qgc3RhcnQgd2l0aCBhIGxldHRlciBvciBDaGluZXNlLCBidXQgY2Fubm90IHN0YXJ0IHdpdGggaHR0cDovLyBvciBodHRwczovLy5cbiAgICAgKi9cbiAgICByZWFkb25seSBkZXNjcmlwdGlvbj86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGRpc2FzdGVyUmVjb3ZlcnlWU3dpdGNoSWQ6IFRoZSBzZWNvbmQgdlN3aXRjaCB3aXRoIHdoaWNoIHlvdSB3YW50IHRvIGFzc29jaWF0ZSB0aGUgVlBOIGdhdGV3YXkuXG4gICAgICogSWYgeW91IGNhbGwgdGhpcyBvcGVyYXRpb24gaW4gYSByZWdpb24gdGhhdCBzdXBwb3J0cyB0aGUgZHVhbC10dW5uZWwgbW9kZSwgdGhpcyBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQuXG4gICAgICogWW91IG5lZWQgdG8gc3BlY2lmeSB0d28gdlN3aXRjaGVzIGluIGRpZmZlcmVudCB6b25lcyBmcm9tIHRoZSBWUEMgYXNzb2NpYXRlZCB3aXRoIHRoZSBWUE4gZ2F0ZXdheSB0byBpbXBsZW1lbnQgZGlzYXN0ZXIgcmVjb3ZlcnkgYWNyb3NzIHpvbmVzLlxuICAgICAqIEZvciBhIHJlZ2lvbiB0aGF0IHN1cHBvcnRzIG9ubHkgb25lIHpvbmUsIGRpc2FzdGVyIHJlY292ZXJ5IGFjcm9zcyB6b25lcyBpcyBub3Qgc3VwcG9ydGVkLiBXZSByZWNvbW1lbmQgdGhhdCB5b3Ugc3BlY2lmeSB0d28gdlN3aXRjaGVzIGluIHRoZSB6b25lIHRvIGltcGxlbWVudCBoaWdoIGF2YWlsYWJpbGl0eS4gWW91IGNhbiBzcGVjaWZ5IHRoZSBzYW1lIHZTd2l0Y2guXG4gICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHJlZ2lvbnMgYW5kIHpvbmVzIHRoYXQgc3VwcG9ydCB0aGUgZHVhbC10dW5uZWwgbW9kZSwgc2VlIFVwZ3JhZGUgYSBWUE4gZ2F0ZXdheSB0byBlbmFibGUgdGhlIGR1YWwtdHVubmVsIG1vZGUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGlzYXN0ZXJSZWNvdmVyeVZTd2l0Y2hJZD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGVuYWJsZUlwc2VjOiBXaGV0aGVyIHRvIGVuYWJsZSBJUHNlYy1WUE4uIFRoZSBJUHNlYy1WUE4gZmVhdHVyZSBwcm92aWRlcyBhIHNpdGUtdG8tc2l0ZSBjb25uZWN0aW9uLiBZb3UgY2FuIHNlY3VyZWx5IGNvbm5lY3QgeW91ciBsb2NhbCBkYXRhIGNlbnRlciBuZXR3b3JrIHRvIGEgcHJpdmF0ZSBuZXR3b3JrIG9yIHR3byBwcm9wcmlldGFyeSBuZXR3b3JrcyBieSBjcmVhdGluZyBhbiBJUHNlYyB0dW5uZWwuIFZhbHVlOlxuICAgICAqIFRydWUgKGRlZmF1bHQpOiBFbmFibGVzIHRoZSBJUHNlYy1WUE4gZmVhdHVyZS5cbiAgICAgKiBGYWxzZTogVGhlIElQc2VjLVZQTiBmdW5jdGlvbiBpcyBub3QgZW5hYmxlZC5cbiAgICAgKi9cbiAgICByZWFkb25seSBlbmFibGVJcHNlYz86IGJvb2xlYW4gfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBlbmFibGVTc2w6IEVuYWJsZSB0aGUgU1NMLVZQTiBmdW5jdGlvbi4gUHJvdmlkZSBwb2ludC10by1zaXRlIFZQTiBjb25uZWN0aW9uLCBubyBuZWVkIHRvIGNvbmZpZ3VyZSBjdXN0b21lciBnYXRld2F5LCB0ZXJtaW5hbCBkaXJlY3RseSBhY2Nlc3MuIFZhbHVlOlxuICAgICAqIFRydWU6IEVuYWJsZSBTU0wtVlBOLlxuICAgICAqIEZhbHNlIChkZWZhdWx0KTogRG9lcyBub3QgZW5hYmxlIFNTTC1WUE4uXG4gICAgICovXG4gICAgcmVhZG9ubHkgZW5hYmxlU3NsPzogYm9vbGVhbiB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGluc3RhbmNlQ2hhcmdlVHlwZTogQWNjb3VudGluZyB0eXBlIG9mIHRoZSBWUE4gZ2F0ZXdheSwgdGhlIHZhbHVlIGlzOlxuICAgICAqIFBSRVBBWSwgUE9TVFBBWVxuICAgICAqL1xuICAgIHJlYWRvbmx5IGluc3RhbmNlQ2hhcmdlVHlwZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IG5hbWU6IE5hbWUgb2YgdGhlIFZQTiBnYXRld2F5LiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0aGUgSUQgb2YgdGhlIFZQTiBnYXRld2F5LlxuICAgICAqIFRoZSBsZW5ndGggaXMgMn4xMDAgRW5nbGlzaCBvciBDaGluZXNlIGNoYXJhY3RlcnMuIEl0IG11c3Qgc3RhcnQgd2l0aCBhIGxhcmdlIG9yIHNtYWxsIGxldHRlciBvciBDaGluZXNlLiBJdCBjYW4gY29udGFpbiBudW1iZXJzLCB1bmRlcnNjb3JlcyAoXykgYW5kIGRhc2hlcyAoLSkuIEl0IGNhbm5vdCBzdGFydCB3aXRoIGh0dHA6Ly8gb3IgaHR0cHM6Ly8uXG4gICAgICovXG4gICAgcmVhZG9ubHkgbmFtZT86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IG5ldHdvcmtUeXBlOiBUaGUgbmV0d29yayB0eXBlIG9mIHRoZSBWUE4gZ2F0ZXdheS4gVmFsaWQgdmFsdWVzOiBwdWJsaWN8cHJpdmF0ZVxuICAgICAqL1xuICAgIHJlYWRvbmx5IG5ldHdvcmtUeXBlPzogc3RyaW5nIHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgcGVyaW9kOiBQdXJjaGFzZSB0aW1lLCB2YWx1ZTogMX45fDEyfDI0fDM2LlxuICAgICAqIFdoZW4gdGhlIHZhbHVlIG9mIHRoZSBJbnN0YW5jZUNoYXJnZVR5cGUgcGFyYW1ldGVyIGlzIFBSRVBBWSwgdGhpcyBwYXJhbWV0ZXIgaXMgbWFuZGF0b3J5LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHBlcmlvZD86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNzbENvbm5lY3Rpb25zOiBUaGUgbWF4aW11bSBudW1iZXIgb2YgY2xpZW50cyBhbGxvd2VkIHRvIGNvbm5lY3QgYXQgdGhlIHNhbWUgdGltZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBzc2xDb25uZWN0aW9ucz86IG51bWJlciB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHRhZ3M6IFRhZ3MgdG8gYXR0YWNoIHRvIGluc3RhbmNlLiBNYXggc3VwcG9ydCAyMCB0YWdzIHRvIGFkZCBkdXJpbmcgY3JlYXRlIGluc3RhbmNlLiBFYWNoIHRhZyB3aXRoIHR3byBwcm9wZXJ0aWVzIEtleSBhbmQgVmFsdWUsIGFuZCBLZXkgaXMgcmVxdWlyZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdGFncz86IFJvc1ZwbkdhdGV3YXkuVGFnc1Byb3BlcnR5W107XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB2cG5UeXBlOiBWUE4gZ2F0ZXdheSB0eXBlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHZwblR5cGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB2U3dpdGNoSWQ6IFRoZSBJRCBvZiB0aGUgVlN3aXRjaCB0byB3aGljaCB0aGUgVlBOIGdhdGV3YXkgYmVsb25ncy5cbiAgICAgKi9cbiAgICByZWFkb25seSB2U3dpdGNoSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG59XG5cbi8qKlxuICogQSBST1MgcmVzb3VyY2UgdHlwZTogIGBBTElZVU46OlZQQzo6VnBuR2F0ZXdheWBcbiAqL1xuZXhwb3J0IGNsYXNzIFZwbkdhdGV3YXkgZXh0ZW5kcyByb3MuUmVzb3VyY2Uge1xuXG4gICAgLyoqXG4gICAgICogQSBmYWN0b3J5IG1ldGhvZCB0aGF0IGNyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcyBmcm9tIGFuIG9iamVjdFxuICAgICAqIGNvbnRhaW5pbmcgdGhlIHByb3BlcnRpZXMgb2YgdGhpcyBST1MgcmVzb3VyY2UsIHdoaWNoIHdpbGwgYmUgYXNzaWduZWQgdG8gUk9TIHJlc291cmNlLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIERpc2FzdGVyUmVjb3ZlcnlJbnRlcm5ldElwOiBUaGUgc2Vjb25kIElQIGFkZHJlc3MgYXNzaWduZWQgYnkgdGhlIHN5c3RlbSB0byBjcmVhdGUgYW4gSVBzZWMtVlBOIGNvbm5lY3Rpb24uVGhpcyBhdHRyaWJ1dGUgaXMgcmV0dXJuZWQgb25seSB3aGVuIHRoZSBWUE4gZ2F0ZXdheSBzdXBwb3J0cyB0aGUgZHVhbC10dW5uZWwgbW9kZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckRpc2FzdGVyUmVjb3ZlcnlJbnRlcm5ldElwOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgRGlzYXN0ZXJSZWNvdmVyeVZTd2l0Y2hJZDogVGhlIElEIG9mIHRoZSBzZWNvbmQgdlN3aXRjaCBhc3NvY2lhdGVkIHdpdGggdGhlIFZQTiBnYXRld2F5LlRoaXMgYXR0cmlidXRlIGlzIHJldHVybmVkIG9ubHkgd2hlbiB0aGUgVlBOIGdhdGV3YXkgc3VwcG9ydHMgdGhlIGR1YWwtdHVubmVsIG1vZGUuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJEaXNhc3RlclJlY292ZXJ5VlN3aXRjaElkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgSW50ZXJuZXRJcDogVGhlIHB1YmxpYyBJUCBhZGRyZXNzIG9mIHRoZSBWUE4gZ2F0ZXdheS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0ckludGVybmV0SXA6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBPcmRlcklkOiBUaGUgb3JkZXIgSUQuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGF0dHJPcmRlcklkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgU3BlYzogVGhlIHNwZWNpZmljYXRpb24gb2YgdGhlIFZQTiBnYXRld2F5LlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyU3BlYzogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFNzbE1heENvbm5lY3Rpb25zOiBUaGUgbWF4aW11bSBudW1iZXIgb2YgY29uY3VycmVudCBTU0wtVlBOIGNvbm5lY3Rpb25zLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyU3NsTWF4Q29ubmVjdGlvbnM6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBTc2xWcG5JbnRlcm5ldElwOiBUaGUgSVAgYWRkcmVzcyBvZiB0aGUgU1NMLVZQTiBjb25uZWN0aW9uLlRoaXMgYXR0cmlidXRlIGlzIHJldHVybmVkIG9ubHkgd2hlbiB0aGUgVlBOIGdhdGV3YXkgaXMgYSBwdWJsaWMgVlBOIGdhdGV3YXkgYW5kIHN1cHBvcnRzIG9ubHkgdGhlIHNpbmdsZS10dW5uZWwgbW9kZS4gSW4gYWRkaXRpb24sIHRoZSBWUE4gZ2F0ZXdheSBtdXN0IGhhdmUgdGhlIFNTTC1WUE4gZmVhdHVyZSBlbmFibGVkLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyU3NsVnBuSW50ZXJuZXRJcDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFZTd2l0Y2hJZDogVGhlIElEIG9mIHRoZSB2U3dpdGNoIHRvIHdoaWNoIHRoZSBWUE4gZ2F0ZXdheSBiZWxvbmdzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyVlN3aXRjaElkOiByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgVnBjSWQ6IFRoZSBJRCBvZiB0aGUgdmlydHVhbCBwcml2YXRlIGNsb3VkIChWUEMpIHRvIHdoaWNoIHRoZSBWUE4gZ2F0ZXdheSBiZWxvbmdzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyVnBjSWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBWcG5HYXRld2F5SWQ6IElEIG9mIHRoZSBWUE4gZ2F0ZXdheS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clZwbkdhdGV3YXlJZDogcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlIFZwblR5cGU6IFRoZSB0eXBlIG9mIHRoZSBWUE4gZ2F0ZXdheS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clZwblR5cGU6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBgQUxJWVVOOjpWUEM6OlZwbkdhdGV3YXlgLlxuICAgICAqXG4gICAgICogUGFyYW0gc2NvcGUgLSBzY29wZSBpbiB3aGljaCB0aGlzIHJlc291cmNlIGlzIGRlZmluZWRcbiAgICAgKiBQYXJhbSBpZCAgICAtIHNjb3BlZCBpZCBvZiB0aGUgcmVzb3VyY2VcbiAgICAgKiBQYXJhbSBwcm9wcyAtIHJlc291cmNlIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogcm9zLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFZwbkdhdGV3YXlQcm9wcywgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQ6Ym9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBjb25zdCByb3NWcG5HYXRld2F5ID0gbmV3IFJvc1ZwbkdhdGV3YXkodGhpcywgaWQsICB7XG4gICAgICAgICAgICBlbmFibGVJcHNlYzogcHJvcHMuZW5hYmxlSXBzZWMgPT09IHVuZGVmaW5lZCB8fCBwcm9wcy5lbmFibGVJcHNlYyA9PT0gbnVsbCA/IHRydWUgOiBwcm9wcy5lbmFibGVJcHNlYyxcbiAgICAgICAgICAgIGVuYWJsZVNzbDogcHJvcHMuZW5hYmxlU3NsID09PSB1bmRlZmluZWQgfHwgcHJvcHMuZW5hYmxlU3NsID09PSBudWxsID8gZmFsc2UgOiBwcm9wcy5lbmFibGVTc2wsXG4gICAgICAgICAgICB2cG5UeXBlOiBwcm9wcy52cG5UeXBlLFxuICAgICAgICAgICAgc3NsQ29ubmVjdGlvbnM6IHByb3BzLnNzbENvbm5lY3Rpb25zLFxuICAgICAgICAgICAgZGlzYXN0ZXJSZWNvdmVyeVZTd2l0Y2hJZDogcHJvcHMuZGlzYXN0ZXJSZWNvdmVyeVZTd2l0Y2hJZCxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBwcm9wcy5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgIGluc3RhbmNlQ2hhcmdlVHlwZTogcHJvcHMuaW5zdGFuY2VDaGFyZ2VUeXBlID09PSB1bmRlZmluZWQgfHwgcHJvcHMuaW5zdGFuY2VDaGFyZ2VUeXBlID09PSBudWxsID8gJ1BSRVBBWScgOiBwcm9wcy5pbnN0YW5jZUNoYXJnZVR5cGUsXG4gICAgICAgICAgICB2U3dpdGNoSWQ6IHByb3BzLnZTd2l0Y2hJZCxcbiAgICAgICAgICAgIHBlcmlvZDogcHJvcHMucGVyaW9kLFxuICAgICAgICAgICAgYXV0b1BheTogcHJvcHMuYXV0b1BheSA9PT0gdW5kZWZpbmVkIHx8IHByb3BzLmF1dG9QYXkgPT09IG51bGwgPyB0cnVlIDogcHJvcHMuYXV0b1BheSxcbiAgICAgICAgICAgIG5hbWU6IHByb3BzLm5hbWUsXG4gICAgICAgICAgICB2cGNJZDogcHJvcHMudnBjSWQsXG4gICAgICAgICAgICBuZXR3b3JrVHlwZTogcHJvcHMubmV0d29ya1R5cGUsXG4gICAgICAgICAgICBiYW5kd2lkdGg6IHByb3BzLmJhbmR3aWR0aCxcbiAgICAgICAgICAgIHRhZ3M6IHByb3BzLnRhZ3MsXG4gICAgICAgIH0sIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50ICYmIHRoaXMuc3RhY2suZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQpO1xuICAgICAgICB0aGlzLnJlc291cmNlID0gcm9zVnBuR2F0ZXdheTtcbiAgICAgICAgdGhpcy5hdHRyRGlzYXN0ZXJSZWNvdmVyeUludGVybmV0SXAgPSByb3NWcG5HYXRld2F5LmF0dHJEaXNhc3RlclJlY292ZXJ5SW50ZXJuZXRJcDtcbiAgICAgICAgdGhpcy5hdHRyRGlzYXN0ZXJSZWNvdmVyeVZTd2l0Y2hJZCA9IHJvc1ZwbkdhdGV3YXkuYXR0ckRpc2FzdGVyUmVjb3ZlcnlWU3dpdGNoSWQ7XG4gICAgICAgIHRoaXMuYXR0ckludGVybmV0SXAgPSByb3NWcG5HYXRld2F5LmF0dHJJbnRlcm5ldElwO1xuICAgICAgICB0aGlzLmF0dHJPcmRlcklkID0gcm9zVnBuR2F0ZXdheS5hdHRyT3JkZXJJZDtcbiAgICAgICAgdGhpcy5hdHRyU3BlYyA9IHJvc1ZwbkdhdGV3YXkuYXR0clNwZWM7XG4gICAgICAgIHRoaXMuYXR0clNzbE1heENvbm5lY3Rpb25zID0gcm9zVnBuR2F0ZXdheS5hdHRyU3NsTWF4Q29ubmVjdGlvbnM7XG4gICAgICAgIHRoaXMuYXR0clNzbFZwbkludGVybmV0SXAgPSByb3NWcG5HYXRld2F5LmF0dHJTc2xWcG5JbnRlcm5ldElwO1xuICAgICAgICB0aGlzLmF0dHJWU3dpdGNoSWQgPSByb3NWcG5HYXRld2F5LmF0dHJWU3dpdGNoSWQ7XG4gICAgICAgIHRoaXMuYXR0clZwY0lkID0gcm9zVnBuR2F0ZXdheS5hdHRyVnBjSWQ7XG4gICAgICAgIHRoaXMuYXR0clZwbkdhdGV3YXlJZCA9IHJvc1ZwbkdhdGV3YXkuYXR0clZwbkdhdGV3YXlJZDtcbiAgICAgICAgdGhpcy5hdHRyVnBuVHlwZSA9IHJvc1ZwbkdhdGV3YXkuYXR0clZwblR5cGU7XG4gICAgfVxufVxuIl19