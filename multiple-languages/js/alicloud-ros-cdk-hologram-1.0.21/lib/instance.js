"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Instance = exports.InstanceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const hologram_generated_1 = require("./hologram.generated");
Object.defineProperty(exports, "InstanceProperty", { enumerable: true, get: function () { return hologram_generated_1.RosInstance; } });
/**
 * A ROS resource type:  `ALIYUN::Hologram::Instance`
 */
class Instance extends ros.Resource {
    /**
     * Create a new `ALIYUN::Hologram::Instance`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosInstance = new hologram_generated_1.RosInstance(this, id, {
            coldStorageSize: props.coldStorageSize,
            leaderInstanceId: props.leaderInstanceId,
            resourceGroupId: props.resourceGroupId,
            zoneId: props.zoneId,
            productCode: props.productCode,
            pricingCycle: props.pricingCycle,
            scaleType: props.scaleType,
            cpu: props.cpu,
            storageSize: props.storageSize,
            duration: props.duration,
            autoPay: props.autoPay,
            endpoints: props.endpoints,
            instanceName: props.instanceName,
            gatewayCount: props.gatewayCount,
            initialDatabases: props.initialDatabases,
            paymentType: props.paymentType,
            instanceType: props.instanceType,
            tags: props.tags,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosInstance;
        this.attrAutoRenewal = rosInstance.attrAutoRenewal;
        this.attrColdStorageSize = rosInstance.attrColdStorageSize;
        this.attrCommodityCode = rosInstance.attrCommodityCode;
        this.attrComputeNodeCount = rosInstance.attrComputeNodeCount;
        this.attrCpu = rosInstance.attrCpu;
        this.attrCreateTime = rosInstance.attrCreateTime;
        this.attrEnableHiveAccess = rosInstance.attrEnableHiveAccess;
        this.attrEndpoints = rosInstance.attrEndpoints;
        this.attrExpirationTime = rosInstance.attrExpirationTime;
        this.attrGatewayCount = rosInstance.attrGatewayCount;
        this.attrGatewayCpu = rosInstance.attrGatewayCpu;
        this.attrGatewayMemory = rosInstance.attrGatewayMemory;
        this.attrInstanceId = rosInstance.attrInstanceId;
        this.attrInstanceName = rosInstance.attrInstanceName;
        this.attrInstanceOwner = rosInstance.attrInstanceOwner;
        this.attrInstanceType = rosInstance.attrInstanceType;
        this.attrMemory = rosInstance.attrMemory;
        this.attrPaymentType = rosInstance.attrPaymentType;
        this.attrResourceGroupId = rosInstance.attrResourceGroupId;
        this.attrStorageSize = rosInstance.attrStorageSize;
        this.attrSuspendReason = rosInstance.attrSuspendReason;
        this.attrTags = rosInstance.attrTags;
        this.attrVersion = rosInstance.attrVersion;
        this.attrZoneId = rosInstance.attrZoneId;
    }
}
exports.Instance = Instance;
//# sourceMappingURL=data:application/json;base64,