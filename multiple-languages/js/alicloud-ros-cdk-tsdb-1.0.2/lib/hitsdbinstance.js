"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HiTSDBInstance = exports.HiTSDBInstanceProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const tsdb_generated_1 = require("./tsdb.generated");
Object.defineProperty(exports, "HiTSDBInstanceProperty", { enumerable: true, get: function () { return tsdb_generated_1.RosHiTSDBInstance; } });
/**
 * A ROS resource type:  `ALIYUN::TSDB::HiTSDBInstance`
 */
class HiTSDBInstance extends ros.Resource {
    /**
     * Create a new `ALIYUN::TSDB::HiTSDBInstance`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosHiTSDBInstance = new tsdb_generated_1.RosHiTSDBInstance(this, id, {
            instanceStorage: props.instanceStorage,
            zoneId: props.zoneId,
            vpcId: props.vpcId,
            instanceAlias: props.instanceAlias,
            pricingCycle: props.pricingCycle,
            securityIpList: props.securityIpList,
            vSwitchId: props.vSwitchId,
            instanceClass: props.instanceClass,
            duration: props.duration,
            payType: props.payType === undefined || props.payType === null ? 'POSTPAY' : props.payType,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosHiTSDBInstance;
        this.attrConnectionString = rosHiTSDBInstance.attrConnectionString;
        this.attrEngineType = rosHiTSDBInstance.attrEngineType;
        this.attrInstanceId = rosHiTSDBInstance.attrInstanceId;
        this.attrOrderId = rosHiTSDBInstance.attrOrderId;
        this.attrPublicConnectionString = rosHiTSDBInstance.attrPublicConnectionString;
        this.attrReverseVpcIp = rosHiTSDBInstance.attrReverseVpcIp;
        this.attrReverseVpcPort = rosHiTSDBInstance.attrReverseVpcPort;
    }
}
exports.HiTSDBInstance = HiTSDBInstance;
//# sourceMappingURL=data:application/json;base64,