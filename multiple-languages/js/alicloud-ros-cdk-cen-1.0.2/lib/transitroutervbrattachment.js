"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransitRouterVbrAttachment = exports.TransitRouterVbrAttachmentProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cen_generated_1 = require("./cen.generated");
Object.defineProperty(exports, "TransitRouterVbrAttachmentProperty", { enumerable: true, get: function () { return cen_generated_1.RosTransitRouterVbrAttachment; } });
/**
 * A ROS resource type:  `ALIYUN::CEN::TransitRouterVbrAttachment`
 */
class TransitRouterVbrAttachment extends ros.Resource {
    /**
     * Create a new `ALIYUN::CEN::TransitRouterVbrAttachment`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosTransitRouterVbrAttachment = new cen_generated_1.RosTransitRouterVbrAttachment(this, id, {
            autoPublishRouteEnabled: props.autoPublishRouteEnabled,
            routeTableAssociationEnabled: props.routeTableAssociationEnabled,
            routeTablePropagationEnabled: props.routeTablePropagationEnabled,
            vbrOwnerId: props.vbrOwnerId,
            cenId: props.cenId,
            transitRouterAttachmentName: props.transitRouterAttachmentName,
            resourceType: props.resourceType,
            vbrId: props.vbrId,
            transitRouterAttachmentDescription: props.transitRouterAttachmentDescription,
            transitRouterId: props.transitRouterId,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosTransitRouterVbrAttachment;
        this.attrAutoPublishRouteEnabled = rosTransitRouterVbrAttachment.attrAutoPublishRouteEnabled;
        this.attrCenId = rosTransitRouterVbrAttachment.attrCenId;
        this.attrClientToken = rosTransitRouterVbrAttachment.attrClientToken;
        this.attrResourceType = rosTransitRouterVbrAttachment.attrResourceType;
        this.attrTransitRouterAttachmentDescription = rosTransitRouterVbrAttachment.attrTransitRouterAttachmentDescription;
        this.attrTransitRouterAttachmentId = rosTransitRouterVbrAttachment.attrTransitRouterAttachmentId;
        this.attrTransitRouterAttachmentName = rosTransitRouterVbrAttachment.attrTransitRouterAttachmentName;
        this.attrTransitRouterId = rosTransitRouterVbrAttachment.attrTransitRouterId;
        this.attrVbrId = rosTransitRouterVbrAttachment.attrVbrId;
        this.attrVbrOwnerId = rosTransitRouterVbrAttachment.attrVbrOwnerId;
    }
}
exports.TransitRouterVbrAttachment = TransitRouterVbrAttachment;
//# sourceMappingURL=data:application/json;base64,