"use strict";
// Generated from the AliCloud ROS Resource Specification
Object.defineProperty(exports, "__esModule", { value: true });
exports.RosVirtualHost = exports.RosQueue = exports.RosInstance = exports.RosExchange = exports.RosBinding = void 0;
const ros = require("@alicloud/ros-cdk-core");
/**
 * Determine whether the given properties match those of a `RosBindingProps`
 *
 * @param properties - the TypeScript properties of a `RosBindingProps`
 *
 * @returns the result of the validation.
 */
function RosBindingPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('argument', ros.requiredValidator)(properties.argument));
    errors.collect(ros.propertyValidator('argument', ros.validateString)(properties.argument));
    errors.collect(ros.propertyValidator('sourceExchange', ros.requiredValidator)(properties.sourceExchange));
    errors.collect(ros.propertyValidator('sourceExchange', ros.validateString)(properties.sourceExchange));
    errors.collect(ros.propertyValidator('instanceId', ros.requiredValidator)(properties.instanceId));
    errors.collect(ros.propertyValidator('instanceId', ros.validateString)(properties.instanceId));
    errors.collect(ros.propertyValidator('bindingKey', ros.requiredValidator)(properties.bindingKey));
    errors.collect(ros.propertyValidator('bindingKey', ros.validateString)(properties.bindingKey));
    errors.collect(ros.propertyValidator('bindingType', ros.requiredValidator)(properties.bindingType));
    if (properties.bindingType && (typeof properties.bindingType) !== 'object') {
        errors.collect(ros.propertyValidator('bindingType', ros.validateAllowedValues)({
            data: properties.bindingType,
            allowedValues: ["0", "0", "QUEUE", "1", "1", "EXCHANGE"],
        }));
    }
    errors.collect(ros.propertyValidator('bindingType', ros.validateString)(properties.bindingType));
    errors.collect(ros.propertyValidator('destinationName', ros.requiredValidator)(properties.destinationName));
    errors.collect(ros.propertyValidator('destinationName', ros.validateString)(properties.destinationName));
    errors.collect(ros.propertyValidator('virtualHost', ros.requiredValidator)(properties.virtualHost));
    errors.collect(ros.propertyValidator('virtualHost', ros.validateString)(properties.virtualHost));
    return errors.wrap('supplied properties not correct for "RosBindingProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::AMQP::Binding` resource
 *
 * @param properties - the TypeScript properties of a `RosBindingProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::AMQP::Binding` resource.
 */
// @ts-ignore TS6133
function rosBindingPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosBindingPropsValidator(properties).assertSuccess();
    }
    return {
        Argument: ros.stringToRosTemplate(properties.argument),
        BindingKey: ros.stringToRosTemplate(properties.bindingKey),
        BindingType: ros.stringToRosTemplate(properties.bindingType),
        DestinationName: ros.stringToRosTemplate(properties.destinationName),
        InstanceId: ros.stringToRosTemplate(properties.instanceId),
        SourceExchange: ros.stringToRosTemplate(properties.sourceExchange),
        VirtualHost: ros.stringToRosTemplate(properties.virtualHost),
    };
}
/**
 * A ROS template type:  `ALIYUN::AMQP::Binding`
 */
class RosBinding extends ros.RosResource {
    /**
     * Create a new `ALIYUN::AMQP::Binding`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosBinding.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.argument = props.argument;
        this.bindingKey = props.bindingKey;
        this.bindingType = props.bindingType;
        this.destinationName = props.destinationName;
        this.instanceId = props.instanceId;
        this.sourceExchange = props.sourceExchange;
        this.virtualHost = props.virtualHost;
    }
    get rosProperties() {
        return {
            argument: this.argument,
            bindingKey: this.bindingKey,
            bindingType: this.bindingType,
            destinationName: this.destinationName,
            instanceId: this.instanceId,
            sourceExchange: this.sourceExchange,
            virtualHost: this.virtualHost,
        };
    }
    renderProperties(props) {
        return rosBindingPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosBinding = RosBinding;
/**
 * The resource type name for this resource class.
 */
RosBinding.ROS_RESOURCE_TYPE_NAME = "ALIYUN::AMQP::Binding";
/**
 * Determine whether the given properties match those of a `RosExchangeProps`
 *
 * @param properties - the TypeScript properties of a `RosExchangeProps`
 *
 * @returns the result of the validation.
 */
function RosExchangePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('instanceId', ros.requiredValidator)(properties.instanceId));
    errors.collect(ros.propertyValidator('instanceId', ros.validateString)(properties.instanceId));
    errors.collect(ros.propertyValidator('alternateExchange', ros.validateString)(properties.alternateExchange));
    errors.collect(ros.propertyValidator('internal', ros.requiredValidator)(properties.internal));
    errors.collect(ros.propertyValidator('internal', ros.validateBoolean)(properties.internal));
    errors.collect(ros.propertyValidator('virtualHost', ros.requiredValidator)(properties.virtualHost));
    errors.collect(ros.propertyValidator('virtualHost', ros.validateString)(properties.virtualHost));
    errors.collect(ros.propertyValidator('autoDeleteState', ros.requiredValidator)(properties.autoDeleteState));
    errors.collect(ros.propertyValidator('autoDeleteState', ros.validateBoolean)(properties.autoDeleteState));
    errors.collect(ros.propertyValidator('exchangeName', ros.requiredValidator)(properties.exchangeName));
    if (properties.exchangeName && (Array.isArray(properties.exchangeName) || (typeof properties.exchangeName) === 'string')) {
        errors.collect(ros.propertyValidator('exchangeName', ros.validateLength)({
            data: properties.exchangeName.length,
            min: undefined,
            max: 255,
        }));
    }
    errors.collect(ros.propertyValidator('exchangeName', ros.validateString)(properties.exchangeName));
    errors.collect(ros.propertyValidator('exchangeType', ros.requiredValidator)(properties.exchangeType));
    if (properties.exchangeType && (typeof properties.exchangeType) !== 'object') {
        errors.collect(ros.propertyValidator('exchangeType', ros.validateAllowedValues)({
            data: properties.exchangeType,
            allowedValues: ["FANOUT", "DIRECT", "TOPIC", "HEADERS"],
        }));
    }
    errors.collect(ros.propertyValidator('exchangeType', ros.validateString)(properties.exchangeType));
    return errors.wrap('supplied properties not correct for "RosExchangeProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::AMQP::Exchange` resource
 *
 * @param properties - the TypeScript properties of a `RosExchangeProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::AMQP::Exchange` resource.
 */
// @ts-ignore TS6133
function rosExchangePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosExchangePropsValidator(properties).assertSuccess();
    }
    return {
        AutoDeleteState: ros.booleanToRosTemplate(properties.autoDeleteState),
        ExchangeName: ros.stringToRosTemplate(properties.exchangeName),
        ExchangeType: ros.stringToRosTemplate(properties.exchangeType),
        InstanceId: ros.stringToRosTemplate(properties.instanceId),
        Internal: ros.booleanToRosTemplate(properties.internal),
        VirtualHost: ros.stringToRosTemplate(properties.virtualHost),
        AlternateExchange: ros.stringToRosTemplate(properties.alternateExchange),
    };
}
/**
 * A ROS template type:  `ALIYUN::AMQP::Exchange`
 */
class RosExchange extends ros.RosResource {
    /**
     * Create a new `ALIYUN::AMQP::Exchange`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosExchange.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrExchangeName = this.getAtt('ExchangeName');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.autoDeleteState = props.autoDeleteState;
        this.exchangeName = props.exchangeName;
        this.exchangeType = props.exchangeType;
        this.instanceId = props.instanceId;
        this.internal = props.internal;
        this.virtualHost = props.virtualHost;
        this.alternateExchange = props.alternateExchange;
    }
    get rosProperties() {
        return {
            autoDeleteState: this.autoDeleteState,
            exchangeName: this.exchangeName,
            exchangeType: this.exchangeType,
            instanceId: this.instanceId,
            internal: this.internal,
            virtualHost: this.virtualHost,
            alternateExchange: this.alternateExchange,
        };
    }
    renderProperties(props) {
        return rosExchangePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosExchange = RosExchange;
/**
 * The resource type name for this resource class.
 */
RosExchange.ROS_RESOURCE_TYPE_NAME = "ALIYUN::AMQP::Exchange";
/**
 * Determine whether the given properties match those of a `RosInstanceProps`
 *
 * @param properties - the TypeScript properties of a `RosInstanceProps`
 *
 * @returns the result of the validation.
 */
function RosInstancePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('maxTps', ros.requiredValidator)(properties.maxTps));
    if (properties.maxTps && (typeof properties.maxTps) !== 'object') {
        errors.collect(ros.propertyValidator('maxTps', ros.validateAllowedValues)({
            data: properties.maxTps,
            allowedValues: [1000, 1500, 2000, 2500, 3000, 4000, 5000, 8000, 10000, 15000, 20000, 25000, 30000, 40000, 50000, 100000, 200000, 300000, 500000, 800000, 1000000],
        }));
    }
    errors.collect(ros.propertyValidator('maxTps', ros.validateNumber)(properties.maxTps));
    if (properties.maxEipTps && (typeof properties.maxEipTps) !== 'object') {
        errors.collect(ros.propertyValidator('maxEipTps', ros.validateRange)({
            data: properties.maxEipTps,
            min: 128,
            max: undefined,
        }));
    }
    errors.collect(ros.propertyValidator('maxEipTps', ros.validateNumber)(properties.maxEipTps));
    if (properties.supportEip && (typeof properties.supportEip) !== 'object') {
        errors.collect(ros.propertyValidator('supportEip', ros.validateAllowedValues)({
            data: properties.supportEip,
            allowedValues: ["true", "false"],
        }));
    }
    errors.collect(ros.propertyValidator('supportEip', ros.validateString)(properties.supportEip));
    if (properties.period && (typeof properties.period) !== 'object') {
        errors.collect(ros.propertyValidator('period', ros.validateAllowedValues)({
            data: properties.period,
            allowedValues: [1, 2, 3, 6, 12, 24, 36],
        }));
    }
    errors.collect(ros.propertyValidator('period', ros.validateNumber)(properties.period));
    errors.collect(ros.propertyValidator('storageSize', ros.requiredValidator)(properties.storageSize));
    if (properties.storageSize && (typeof properties.storageSize) !== 'object') {
        errors.collect(ros.propertyValidator('storageSize', ros.validateRange)({
            data: properties.storageSize,
            min: 0,
            max: 2800,
        }));
    }
    errors.collect(ros.propertyValidator('storageSize', ros.validateNumber)(properties.storageSize));
    if (properties.payType && (typeof properties.payType) !== 'object') {
        errors.collect(ros.propertyValidator('payType', ros.validateAllowedValues)({
            data: properties.payType,
            allowedValues: ["Subscription", "PrePaid", "Prepaid", "PrePay", "PREPAY", "PRE"],
        }));
    }
    errors.collect(ros.propertyValidator('payType', ros.validateString)(properties.payType));
    errors.collect(ros.propertyValidator('queueCapacity', ros.requiredValidator)(properties.queueCapacity));
    if (properties.queueCapacity && (typeof properties.queueCapacity) !== 'object') {
        errors.collect(ros.propertyValidator('queueCapacity', ros.validateRange)({
            data: properties.queueCapacity,
            min: 50,
            max: 80000,
        }));
    }
    errors.collect(ros.propertyValidator('queueCapacity', ros.validateNumber)(properties.queueCapacity));
    if (properties.tracingStorageTime && (typeof properties.tracingStorageTime) !== 'object') {
        errors.collect(ros.propertyValidator('tracingStorageTime', ros.validateAllowedValues)({
            data: properties.tracingStorageTime,
            allowedValues: [0, 3, 7, 15],
        }));
    }
    errors.collect(ros.propertyValidator('tracingStorageTime', ros.validateNumber)(properties.tracingStorageTime));
    errors.collect(ros.propertyValidator('instanceName', ros.validateString)(properties.instanceName));
    if (properties.orderNum && (typeof properties.orderNum) !== 'object') {
        errors.collect(ros.propertyValidator('orderNum', ros.validateRange)({
            data: properties.orderNum,
            min: 1,
            max: 9999,
        }));
    }
    errors.collect(ros.propertyValidator('orderNum', ros.validateNumber)(properties.orderNum));
    if (properties.supportTracing && (typeof properties.supportTracing) !== 'object') {
        errors.collect(ros.propertyValidator('supportTracing', ros.validateAllowedValues)({
            data: properties.supportTracing,
            allowedValues: ["true", "false"],
        }));
    }
    errors.collect(ros.propertyValidator('supportTracing', ros.validateString)(properties.supportTracing));
    errors.collect(ros.propertyValidator('instanceType', ros.requiredValidator)(properties.instanceType));
    if (properties.instanceType && (typeof properties.instanceType) !== 'object') {
        errors.collect(ros.propertyValidator('instanceType', ros.validateAllowedValues)({
            data: properties.instanceType,
            allowedValues: ["professional", "enterprise", "vip"],
        }));
    }
    errors.collect(ros.propertyValidator('instanceType', ros.validateString)(properties.instanceType));
    if (properties.periodUnit && (typeof properties.periodUnit) !== 'object') {
        errors.collect(ros.propertyValidator('periodUnit', ros.validateAllowedValues)({
            data: properties.periodUnit,
            allowedValues: ["month", "year", "Month", "Year"],
        }));
    }
    errors.collect(ros.propertyValidator('periodUnit', ros.validateString)(properties.periodUnit));
    return errors.wrap('supplied properties not correct for "RosInstanceProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::AMQP::Instance` resource
 *
 * @param properties - the TypeScript properties of a `RosInstanceProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::AMQP::Instance` resource.
 */
// @ts-ignore TS6133
function rosInstancePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosInstancePropsValidator(properties).assertSuccess();
    }
    return {
        InstanceType: ros.stringToRosTemplate(properties.instanceType),
        MaxTps: ros.numberToRosTemplate(properties.maxTps),
        QueueCapacity: ros.numberToRosTemplate(properties.queueCapacity),
        StorageSize: ros.numberToRosTemplate(properties.storageSize),
        InstanceName: ros.stringToRosTemplate(properties.instanceName),
        MaxEipTps: ros.numberToRosTemplate(properties.maxEipTps),
        OrderNum: ros.numberToRosTemplate(properties.orderNum),
        PayType: ros.stringToRosTemplate(properties.payType),
        Period: ros.numberToRosTemplate(properties.period),
        PeriodUnit: ros.stringToRosTemplate(properties.periodUnit),
        SupportEip: ros.stringToRosTemplate(properties.supportEip),
        SupportTracing: ros.stringToRosTemplate(properties.supportTracing),
        TracingStorageTime: ros.numberToRosTemplate(properties.tracingStorageTime),
    };
}
/**
 * A ROS template type:  `ALIYUN::AMQP::Instance`
 */
class RosInstance extends ros.RosResource {
    /**
     * Create a new `ALIYUN::AMQP::Instance`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosInstance.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrInstanceId = this.getAtt('InstanceId');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.instanceType = props.instanceType;
        this.maxTps = props.maxTps;
        this.queueCapacity = props.queueCapacity;
        this.storageSize = props.storageSize;
        this.instanceName = props.instanceName;
        this.maxEipTps = props.maxEipTps;
        this.orderNum = props.orderNum;
        this.payType = props.payType;
        this.period = props.period;
        this.periodUnit = props.periodUnit;
        this.supportEip = props.supportEip;
        this.supportTracing = props.supportTracing;
        this.tracingStorageTime = props.tracingStorageTime;
    }
    get rosProperties() {
        return {
            instanceType: this.instanceType,
            maxTps: this.maxTps,
            queueCapacity: this.queueCapacity,
            storageSize: this.storageSize,
            instanceName: this.instanceName,
            maxEipTps: this.maxEipTps,
            orderNum: this.orderNum,
            payType: this.payType,
            period: this.period,
            periodUnit: this.periodUnit,
            supportEip: this.supportEip,
            supportTracing: this.supportTracing,
            tracingStorageTime: this.tracingStorageTime,
        };
    }
    renderProperties(props) {
        return rosInstancePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosInstance = RosInstance;
/**
 * The resource type name for this resource class.
 */
RosInstance.ROS_RESOURCE_TYPE_NAME = "ALIYUN::AMQP::Instance";
/**
 * Determine whether the given properties match those of a `RosQueueProps`
 *
 * @param properties - the TypeScript properties of a `RosQueueProps`
 *
 * @returns the result of the validation.
 */
function RosQueuePropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('deadLetterExchange', ros.validateString)(properties.deadLetterExchange));
    errors.collect(ros.propertyValidator('maximumPriority', ros.validateNumber)(properties.maximumPriority));
    errors.collect(ros.propertyValidator('instanceId', ros.requiredValidator)(properties.instanceId));
    errors.collect(ros.propertyValidator('instanceId', ros.validateString)(properties.instanceId));
    errors.collect(ros.propertyValidator('exclusiveState', ros.validateBoolean)(properties.exclusiveState));
    errors.collect(ros.propertyValidator('deadLetterRoutingKey', ros.validateString)(properties.deadLetterRoutingKey));
    errors.collect(ros.propertyValidator('virtualHost', ros.requiredValidator)(properties.virtualHost));
    errors.collect(ros.propertyValidator('virtualHost', ros.validateString)(properties.virtualHost));
    errors.collect(ros.propertyValidator('maxLength', ros.validateNumber)(properties.maxLength));
    errors.collect(ros.propertyValidator('autoDeleteState', ros.validateBoolean)(properties.autoDeleteState));
    errors.collect(ros.propertyValidator('queueName', ros.requiredValidator)(properties.queueName));
    if (properties.queueName && (Array.isArray(properties.queueName) || (typeof properties.queueName) === 'string')) {
        errors.collect(ros.propertyValidator('queueName', ros.validateLength)({
            data: properties.queueName.length,
            min: undefined,
            max: 255,
        }));
    }
    errors.collect(ros.propertyValidator('queueName', ros.validateString)(properties.queueName));
    errors.collect(ros.propertyValidator('messageTtl', ros.validateNumber)(properties.messageTtl));
    errors.collect(ros.propertyValidator('autoExpireState', ros.validateNumber)(properties.autoExpireState));
    return errors.wrap('supplied properties not correct for "RosQueueProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::AMQP::Queue` resource
 *
 * @param properties - the TypeScript properties of a `RosQueueProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::AMQP::Queue` resource.
 */
// @ts-ignore TS6133
function rosQueuePropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosQueuePropsValidator(properties).assertSuccess();
    }
    return {
        InstanceId: ros.stringToRosTemplate(properties.instanceId),
        QueueName: ros.stringToRosTemplate(properties.queueName),
        VirtualHost: ros.stringToRosTemplate(properties.virtualHost),
        AutoDeleteState: ros.booleanToRosTemplate(properties.autoDeleteState),
        AutoExpireState: ros.numberToRosTemplate(properties.autoExpireState),
        DeadLetterExchange: ros.stringToRosTemplate(properties.deadLetterExchange),
        DeadLetterRoutingKey: ros.stringToRosTemplate(properties.deadLetterRoutingKey),
        ExclusiveState: ros.booleanToRosTemplate(properties.exclusiveState),
        MaximumPriority: ros.numberToRosTemplate(properties.maximumPriority),
        MaxLength: ros.numberToRosTemplate(properties.maxLength),
        MessageTTL: ros.numberToRosTemplate(properties.messageTtl),
    };
}
/**
 * A ROS template type:  `ALIYUN::AMQP::Queue`
 */
class RosQueue extends ros.RosResource {
    /**
     * Create a new `ALIYUN::AMQP::Queue`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosQueue.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrQueueName = this.getAtt('QueueName');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.instanceId = props.instanceId;
        this.queueName = props.queueName;
        this.virtualHost = props.virtualHost;
        this.autoDeleteState = props.autoDeleteState;
        this.autoExpireState = props.autoExpireState;
        this.deadLetterExchange = props.deadLetterExchange;
        this.deadLetterRoutingKey = props.deadLetterRoutingKey;
        this.exclusiveState = props.exclusiveState;
        this.maximumPriority = props.maximumPriority;
        this.maxLength = props.maxLength;
        this.messageTtl = props.messageTtl;
    }
    get rosProperties() {
        return {
            instanceId: this.instanceId,
            queueName: this.queueName,
            virtualHost: this.virtualHost,
            autoDeleteState: this.autoDeleteState,
            autoExpireState: this.autoExpireState,
            deadLetterExchange: this.deadLetterExchange,
            deadLetterRoutingKey: this.deadLetterRoutingKey,
            exclusiveState: this.exclusiveState,
            maximumPriority: this.maximumPriority,
            maxLength: this.maxLength,
            messageTtl: this.messageTtl,
        };
    }
    renderProperties(props) {
        return rosQueuePropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosQueue = RosQueue;
/**
 * The resource type name for this resource class.
 */
RosQueue.ROS_RESOURCE_TYPE_NAME = "ALIYUN::AMQP::Queue";
/**
 * Determine whether the given properties match those of a `RosVirtualHostProps`
 *
 * @param properties - the TypeScript properties of a `RosVirtualHostProps`
 *
 * @returns the result of the validation.
 */
function RosVirtualHostPropsValidator(properties) {
    if (!ros.canInspect(properties)) {
        return ros.VALIDATION_SUCCESS;
    }
    const errors = new ros.ValidationResults();
    errors.collect(ros.propertyValidator('instanceId', ros.requiredValidator)(properties.instanceId));
    errors.collect(ros.propertyValidator('instanceId', ros.validateString)(properties.instanceId));
    errors.collect(ros.propertyValidator('virtualHost', ros.requiredValidator)(properties.virtualHost));
    if (properties.virtualHost && (Array.isArray(properties.virtualHost) || (typeof properties.virtualHost) === 'string')) {
        errors.collect(ros.propertyValidator('virtualHost', ros.validateLength)({
            data: properties.virtualHost.length,
            min: undefined,
            max: 100,
        }));
    }
    errors.collect(ros.propertyValidator('virtualHost', ros.validateString)(properties.virtualHost));
    return errors.wrap('supplied properties not correct for "RosVirtualHostProps"');
}
/**
 * Renders the AliCloud ROS Resource properties of an `ALIYUN::AMQP::VirtualHost` resource
 *
 * @param properties - the TypeScript properties of a `RosVirtualHostProps`
 *
 * @returns the AliCloud ROS Resource properties of an `ALIYUN::AMQP::VirtualHost` resource.
 */
// @ts-ignore TS6133
function rosVirtualHostPropsToRosTemplate(properties, enableResourcePropertyConstraint) {
    if (!ros.canInspect(properties)) {
        return properties;
    }
    if (enableResourcePropertyConstraint) {
        RosVirtualHostPropsValidator(properties).assertSuccess();
    }
    return {
        InstanceId: ros.stringToRosTemplate(properties.instanceId),
        VirtualHost: ros.stringToRosTemplate(properties.virtualHost),
    };
}
/**
 * A ROS template type:  `ALIYUN::AMQP::VirtualHost`
 */
class RosVirtualHost extends ros.RosResource {
    /**
     * Create a new `ALIYUN::AMQP::VirtualHost`.
     *
     * @param scope - scope in which this resource is defined
     * @param id    - scoped id of the resource
     * @param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint) {
        super(scope, id, { type: RosVirtualHost.ROS_RESOURCE_TYPE_NAME, properties: props });
        this.attrVirtualHost = this.getAtt('VirtualHost');
        this.enableResourcePropertyConstraint = enableResourcePropertyConstraint;
        this.instanceId = props.instanceId;
        this.virtualHost = props.virtualHost;
    }
    get rosProperties() {
        return {
            instanceId: this.instanceId,
            virtualHost: this.virtualHost,
        };
    }
    renderProperties(props) {
        return rosVirtualHostPropsToRosTemplate(props, this.enableResourcePropertyConstraint);
    }
}
exports.RosVirtualHost = RosVirtualHost;
/**
 * The resource type name for this resource class.
 */
RosVirtualHost.ROS_RESOURCE_TYPE_NAME = "ALIYUN::AMQP::VirtualHost";
//# sourceMappingURL=data:application/json;base64,