"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServerlessKubernetesCluster = exports.ServerlessKubernetesClusterProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const cs_generated_1 = require("./cs.generated");
Object.defineProperty(exports, "ServerlessKubernetesClusterProperty", { enumerable: true, get: function () { return cs_generated_1.RosServerlessKubernetesCluster; } });
/**
 * A ROS resource type:  `ALIYUN::CS::ServerlessKubernetesCluster`
 */
class ServerlessKubernetesCluster extends ros.Resource {
    /**
     * Create a new `ALIYUN::CS::ServerlessKubernetesCluster`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosServerlessKubernetesCluster = new cs_generated_1.RosServerlessKubernetesCluster(this, id, {
            kubernetesVersion: props.kubernetesVersion,
            endpointPublicAccess: props.endpointPublicAccess,
            zoneId: props.zoneId,
            vSwitchIds: props.vSwitchIds,
            securityGroupId: props.securityGroupId,
            vSwitchId: props.vSwitchId,
            addons: props.addons,
            natGateway: props.natGateway ? props.natGateway : false,
            name: props.name,
            vpcId: props.vpcId,
            serviceCidr: props.serviceCidr ? props.serviceCidr : '172.19.0.0/20',
            tags: props.tags,
            privateZone: props.privateZone,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosServerlessKubernetesCluster;
        this.attrClusterId = rosServerlessKubernetesCluster.attrClusterId;
        this.attrTaskId = rosServerlessKubernetesCluster.attrTaskId;
        this.attrWorkerRamRoleName = rosServerlessKubernetesCluster.attrWorkerRamRoleName;
    }
}
exports.ServerlessKubernetesCluster = ServerlessKubernetesCluster;
//# sourceMappingURL=data:application/json;base64,