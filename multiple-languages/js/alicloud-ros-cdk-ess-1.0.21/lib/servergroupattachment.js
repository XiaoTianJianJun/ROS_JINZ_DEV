"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServerGroupAttachment = exports.ServerGroupAttachmentProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const ess_generated_1 = require("./ess.generated");
Object.defineProperty(exports, "ServerGroupAttachmentProperty", { enumerable: true, get: function () { return ess_generated_1.RosServerGroupAttachment; } });
/**
 * A ROS resource type:  `ALIYUN::ESS::ServerGroupAttachment`
 */
class ServerGroupAttachment extends ros.Resource {
    /**
     * Create a new `ALIYUN::ESS::ServerGroupAttachment`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosServerGroupAttachment = new ess_generated_1.RosServerGroupAttachment(this, id, {
            serverGroups: props.serverGroups,
            scalingGroupId: props.scalingGroupId,
            forceAttach: props.forceAttach,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosServerGroupAttachment;
        this.attrScalingActivityId = rosServerGroupAttachment.attrScalingActivityId;
    }
}
exports.ServerGroupAttachment = ServerGroupAttachment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyZ3JvdXBhdHRhY2htZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2VydmVyZ3JvdXBhdHRhY2htZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDhDQUE4QztBQUM5QyxtREFBMkQ7QUFFdEIsOEdBRjVCLHdDQUF3QixPQUVpQztBQTBCbEU7O0dBRUc7QUFDSCxNQUFhLHFCQUFzQixTQUFRLEdBQUcsQ0FBQyxRQUFRO0lBYW5EOzs7Ozs7T0FNRztJQUNILFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBaUMsRUFBRSxtQ0FBMkMsSUFBSTtRQUM1SCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sd0JBQXdCLEdBQUcsSUFBSSx3Q0FBd0IsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFHO1lBQ3JFLFlBQVksRUFBRSxLQUFLLENBQUMsWUFBWTtZQUNoQyxjQUFjLEVBQUUsS0FBSyxDQUFDLGNBQWM7WUFDcEMsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1NBQ2pDLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsd0JBQXdCLENBQUM7UUFDekMsSUFBSSxDQUFDLHFCQUFxQixHQUFHLHdCQUF3QixDQUFDLHFCQUFxQixDQUFDO0lBQ2hGLENBQUM7Q0FDSjtBQS9CRCxzREErQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByb3MgZnJvbSAnQGFsaWNsb3VkL3Jvcy1jZGstY29yZSc7XG5pbXBvcnQgeyBSb3NTZXJ2ZXJHcm91cEF0dGFjaG1lbnQgfSBmcm9tICcuL2Vzcy5nZW5lcmF0ZWQnO1xuLy8gR2VuZXJhdGVkIGZyb20gdGhlIEFsaUNsb3VkIFJPUyBSZXNvdXJjZSBTcGVjaWZpY2F0aW9uXG5leHBvcnQgeyBSb3NTZXJ2ZXJHcm91cEF0dGFjaG1lbnQgYXMgU2VydmVyR3JvdXBBdHRhY2htZW50UHJvcGVydHkgfTtcblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBkZWZpbmluZyBhIGBBTElZVU46OkVTUzo6U2VydmVyR3JvdXBBdHRhY2htZW50YFxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNlcnZlckdyb3VwQXR0YWNobWVudFByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNjYWxpbmdHcm91cElkOiBUaGUgSUQgb2YgdGhlIHNjYWxpbmcgZ3JvdXAuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc2NhbGluZ0dyb3VwSWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNlcnZlckdyb3VwczogQSBjb2xsZWN0aW9uIG9mIGluZm9ybWF0aW9uIGFib3V0IHNlcnZlciBncm91cHMuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc2VydmVyR3JvdXBzOiBBcnJheTxSb3NTZXJ2ZXJHcm91cEF0dGFjaG1lbnQuU2VydmVyR3JvdXBzUHJvcGVydHkgfCByb3MuSVJlc29sdmFibGU+IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgZm9yY2VBdHRhY2g6IFNwZWNpZmllcyB3aGV0aGVyIHRvIGFkZCB0aGUgRWxhc3RpYyBDb21wdXRlIFNlcnZpY2UgKEVDUykgaW5zdGFuY2VzIGluIHRoZSBzY2FsaW5nIGdyb3VwIHRvIHRoZSBiYWNrZW5kIHNlcnZlciBncm91cCBvZiB0aGUgbmV3bHkgYXR0YWNoZWQgU0xCIGluc3RhbmNlLiBWYWxpZCB2YWx1ZXM6XG4gICAgICogdHJ1ZVxuICAgICAqIGZhbHNlXG4gICAgICogRGVmYXVsdCB2YWx1ZTogZmFsc2UuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZm9yY2VBdHRhY2g/OiBib29sZWFuIHwgcm9zLklSZXNvbHZhYmxlO1xufVxuXG4vKipcbiAqIEEgUk9TIHJlc291cmNlIHR5cGU6ICBgQUxJWVVOOjpFU1M6OlNlcnZlckdyb3VwQXR0YWNobWVudGBcbiAqL1xuZXhwb3J0IGNsYXNzIFNlcnZlckdyb3VwQXR0YWNobWVudCBleHRlbmRzIHJvcy5SZXNvdXJjZSB7XG5cbiAgICAvKipcbiAgICAgKiBBIGZhY3RvcnkgbWV0aG9kIHRoYXQgY3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGZyb20gYW4gb2JqZWN0XG4gICAgICogY29udGFpbmluZyB0aGUgcHJvcGVydGllcyBvZiB0aGlzIFJPUyByZXNvdXJjZSwgd2hpY2ggd2lsbCBiZSBhc3NpZ25lZCB0byBST1MgcmVzb3VyY2UuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBdHRyaWJ1dGUgU2NhbGluZ0FjdGl2aXR5SWQ6IFRoZSBJRCBvZiB0aGUgc2NhbGluZyBhY3Rpdml0eSBkdXJpbmcgd2hpY2ggb25lIG9yIG1vcmUgU0xCIGluc3RhbmNlcyBhcmUgYXR0YWNoZWQgdG8gdGhlIHNjYWxpbmcgZ3JvdXAgYW5kIHRoZSBFQ1MgaW5zdGFuY2VzIGluIHRoZSBzY2FsaW5nIGdyb3VwIGFyZSBhZGRlZCB0byB0aGUgYmFja2VuZCBzZXJ2ZXIgZ3JvdXBzIG9mIHRoZSBTTEIgaW5zdGFuY2VzLlxuTm90ZSBUaGlzIHBhcmFtZXRlciBpcyByZXR1cm5lZCBvbmx5IGFmdGVyIHlvdSBzZXQgdGhlIEZvcmNlQXR0YWNoIHBhcmFtZXRlciB0byB0cnVlLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhdHRyU2NhbGluZ0FjdGl2aXR5SWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBgQUxJWVVOOjpFU1M6OlNlcnZlckdyb3VwQXR0YWNobWVudGAuXG4gICAgICpcbiAgICAgKiBQYXJhbSBzY29wZSAtIHNjb3BlIGluIHdoaWNoIHRoaXMgcmVzb3VyY2UgaXMgZGVmaW5lZFxuICAgICAqIFBhcmFtIGlkICAgIC0gc2NvcGVkIGlkIG9mIHRoZSByZXNvdXJjZVxuICAgICAqIFBhcmFtIHByb3BzIC0gcmVzb3VyY2UgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiByb3MuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogU2VydmVyR3JvdXBBdHRhY2htZW50UHJvcHMsIGVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50OmJvb2xlYW4gPSB0cnVlKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICAgICAgY29uc3Qgcm9zU2VydmVyR3JvdXBBdHRhY2htZW50ID0gbmV3IFJvc1NlcnZlckdyb3VwQXR0YWNobWVudCh0aGlzLCBpZCwgIHtcbiAgICAgICAgICAgIHNlcnZlckdyb3VwczogcHJvcHMuc2VydmVyR3JvdXBzLFxuICAgICAgICAgICAgc2NhbGluZ0dyb3VwSWQ6IHByb3BzLnNjYWxpbmdHcm91cElkLFxuICAgICAgICAgICAgZm9yY2VBdHRhY2g6IHByb3BzLmZvcmNlQXR0YWNoLFxuICAgICAgICB9LCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCAmJiB0aGlzLnN0YWNrLmVuYWJsZVJlc291cmNlUHJvcGVydHlDb25zdHJhaW50KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJvc1NlcnZlckdyb3VwQXR0YWNobWVudDtcbiAgICAgICAgdGhpcy5hdHRyU2NhbGluZ0FjdGl2aXR5SWQgPSByb3NTZXJ2ZXJHcm91cEF0dGFjaG1lbnQuYXR0clNjYWxpbmdBY3Rpdml0eUlkO1xuICAgIH1cbn1cbiJdfQ==