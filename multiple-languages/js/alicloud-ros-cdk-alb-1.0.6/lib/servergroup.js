"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServerGroup = exports.ServerGroupProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const alb_generated_1 = require("./alb.generated");
Object.defineProperty(exports, "ServerGroupProperty", { enumerable: true, get: function () { return alb_generated_1.RosServerGroup; } });
/**
 * A ROS resource type:  `ALIYUN::ALB::ServerGroup`
 */
class ServerGroup extends ros.Resource {
    /**
     * Create a new `ALIYUN::ALB::ServerGroup`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosServerGroup = new alb_generated_1.RosServerGroup(this, id, {
            vpcId: props.vpcId,
            resourceGroupId: props.resourceGroupId,
            scheduler: props.scheduler,
            stickySessionConfig: props.stickySessionConfig,
            healthCheckConfig: props.healthCheckConfig,
            protocol: props.protocol,
            serverGroupType: props.serverGroupType,
            tags: props.tags,
            serverGroupName: props.serverGroupName,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosServerGroup;
        this.attrServerGroupId = rosServerGroup.attrServerGroupId;
    }
}
exports.ServerGroup = ServerGroup;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyZ3JvdXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzZXJ2ZXJncm91cC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBOEM7QUFDOUMsbURBQWlEO0FBRXRCLG9HQUZsQiw4QkFBYyxPQUV1QjtBQXlFOUM7O0dBRUc7QUFDSCxNQUFhLFdBQVksU0FBUSxHQUFHLENBQUMsUUFBUTtJQVl6Qzs7Ozs7O09BTUc7SUFDSCxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQXVCLEVBQUUsbUNBQTJDLElBQUk7UUFDbEgsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLGNBQWMsR0FBRyxJQUFJLDhCQUFjLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRztZQUNqRCxLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUs7WUFDbEIsZUFBZSxFQUFFLEtBQUssQ0FBQyxlQUFlO1lBQ3RDLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztZQUMxQixtQkFBbUIsRUFBRSxLQUFLLENBQUMsbUJBQW1CO1lBQzlDLGlCQUFpQixFQUFFLEtBQUssQ0FBQyxpQkFBaUI7WUFDMUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1lBQ3hCLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0QyxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7WUFDaEIsZUFBZSxFQUFFLEtBQUssQ0FBQyxlQUFlO1NBQ3pDLEVBQUUsZ0NBQWdDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxRQUFRLEdBQUcsY0FBYyxDQUFDO1FBQy9CLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxjQUFjLENBQUMsaUJBQWlCLENBQUM7SUFDOUQsQ0FBQztDQUNKO0FBcENELGtDQW9DQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJvcyBmcm9tICdAYWxpY2xvdWQvcm9zLWNkay1jb3JlJztcbmltcG9ydCB7IFJvc1NlcnZlckdyb3VwIH0gZnJvbSAnLi9hbGIuZ2VuZXJhdGVkJztcbi8vIEdlbmVyYXRlZCBmcm9tIHRoZSBBbGlDbG91ZCBST1MgUmVzb3VyY2UgU3BlY2lmaWNhdGlvblxuZXhwb3J0IHsgUm9zU2VydmVyR3JvdXAgYXMgU2VydmVyR3JvdXBQcm9wZXJ0eSB9O1xuXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGRlZmluaW5nIGEgYEFMSVlVTjo6QUxCOjpTZXJ2ZXJHcm91cGBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTZXJ2ZXJHcm91cFByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IGhlYWx0aENoZWNrQ29uZmlnOiBUaGUgY29uZmlndXJhdGlvbiBvZiBoZWFsdGggY2hlY2tzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGhlYWx0aENoZWNrQ29uZmlnOiBSb3NTZXJ2ZXJHcm91cC5IZWFsdGhDaGVja0NvbmZpZ1Byb3BlcnR5IHwgcm9zLklSZXNvbHZhYmxlO1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydHkgc2VydmVyR3JvdXBOYW1lOiBUaGUgbmFtZSBvZiB0aGUgc2VydmVyIGdyb3VwLiBUaGUgbmFtZSBtdXN0IGJlIDIgdG8gMTI4IGNoYXJhY3RlcnMgaW4gbGVuZ3RoLCBhbmRcbiAgICAgKiBjYW4gY29udGFpbiBsZXR0ZXJzLCBkaWdpdHMsIHBlcmlvZHMgKC4pLCB1bmRlcnNjb3JlcyAoXyksIGFuZCBoeXBoZW5zICgtKS4gVGhlIG5hbWVcbiAgICAgKiBtdXN0IHN0YXJ0IHdpdGggYSBsZXR0ZXIuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc2VydmVyR3JvdXBOYW1lOiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB2cGNJZDogVGhlIElEIG9mIHRoZSB2aXJ0dWFsIHByaXZhdGUgY2xvdWQgKFZQQykuIFlvdSBjYW4gYWRkIG9ubHkgc2VydmVycyB0aGF0IGFyZSBkZXBsb3llZFxuICAgICAqIGluIHRoZSBzcGVjaWZpZWQgVlBDIHRvIHRoZSBzZXJ2ZXIgZ3JvdXAuXG4gICAgICogTm90ZSBUaGlzIHBhcmFtZXRlciBpcyByZXF1aXJlZCBpZiB0aGUgU2VydmVyR3JvdXBUeXBlIHBhcmFtZXRlciBpcyBzZXQgdG8gSW5zdGFuY2Ugb3IgSXAuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdnBjSWQ6IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHByb3RvY29sOiBUaGUgc2VydmVyIHByb3RvY29sLiBWYWxpZCB2YWx1ZXM6XG4gICAgICogSFRUUDogYWxsb3dzIHlvdSB0byBhc3NvY2lhdGUgSFRUUFMsIEhUVFAsIG9yIFFVSUMgbGlzdGVuZXJzIHdpdGggYmFja2VuZCBzZXJ2ZXJzLiBUaGlzXG4gICAgICogaXMgdGhlIGRlZmF1bHQgdmFsdWUuXG4gICAgICogSFRUUFM6IGFsbG93cyB5b3UgdG8gYXNzb2NpYXRlIEhUVFBTIGxpc3RlbmVycyB3aXRoIGJhY2tlbmQgc2VydmVycy5cbiAgICAgKi9cbiAgICByZWFkb25seSBwcm90b2NvbD86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHJlc291cmNlR3JvdXBJZDogVGhlIElEIG9mIHRoZSByZXNvdXJjZSBncm91cC5cbiAgICAgKi9cbiAgICByZWFkb25seSByZXNvdXJjZUdyb3VwSWQ/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzY2hlZHVsZXI6IFRoZSBzY2hlZHVsaW5nIGFsZ29yaXRobS4gVmFsaWQgdmFsdWVzOlxuICAgICAqIFdycjogQmFja2VuZCBzZXJ2ZXJzIHRoYXQgaGF2ZSBoaWdoZXIgd2VpZ2h0cyByZWNlaXZlIG1vcmUgcmVxdWVzdHMgdGhhbiB0aG9zZSB0aGF0IGhhdmVcbiAgICAgKiBsb3dlciB3ZWlnaHRzLiBUaGlzIGlzIHRoZSBkZWZhdWx0IHZhbHVlLlxuICAgICAqIFdsYzogUmVxdWVzdHMgYXJlIGRpc3RyaWJ1dGVkIGJhc2VkIG9uIHRoZSB3ZWlnaHQgYW5kIGxvYWQgb2YgZWFjaCBiYWNrZW5kIHNlcnZlci4gVGhlXG4gICAgICogbG9hZCByZWZlcnMgdG8gdGhlIG51bWJlciBvZiBjb25uZWN0aW9ucyB0byBhIGJhY2tlbmQgc2VydmVyLiBJZiBtdWx0aXBsZSBiYWNrZW5kXG4gICAgICogc2VydmVycyBoYXZlIHRoZSBzYW1lIHdlaWdodCwgcmVxdWVzdHMgYXJlIHJvdXRlZCB0byB0aGUgYmFja2VuZCBzZXJ2ZXIgd2l0aCB0aGUgbGVhc3RcbiAgICAgKiBjb25uZWN0aW9ucy5cbiAgICAgKiBTY2g6IHNwZWNpZmllcyBjb25zaXN0ZW50IGhhc2hpbmcgdGhhdCBpcyBiYXNlZCBvbiBzb3VyY2UgSVAgYWRkcmVzc2VzLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNjaGVkdWxlcj86IHN0cmluZyB8IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnR5IHNlcnZlckdyb3VwVHlwZTogVGhlIHR5cGUgb2YgdGhlIHNlcnZlciBncm91cC4gVmFsaWQgdmFsdWVzOlxuICAgICAqIEluc3RhbmNlOiBhIHNlcnZlciBncm91cCB0aGF0IGNvbnNpc3RzIG9mIHNlcnZlcnMuIFlvdSBjYW4gYWRkIEVsYXN0aWMgQ29tcHV0ZSBTZXJ2aWNlIChFQ1MpXG4gICAgICogaW5zdGFuY2VzLCBlbGFzdGljIG5ldHdvcmsgaW50ZXJmYWNlcyAoRU5JcyksIGFuZCBlbGFzdGljIGNvbnRhaW5lciBpbnN0YW5jZXMgdG8gdGhpc1xuICAgICAqIHR5cGUgb2Ygc2VydmVyIGdyb3VwLiBUaGlzIGlzIHRoZSBkZWZhdWx0IHZhbHVlLlxuICAgICAqIElwOiBhIHNlcnZlciBncm91cCB0aGF0IGNvbnNpc3RzIG9mIElQIGFkZHJlc3Nlcy4gWW91IGNhbiBhZGQgSVAgYWRkcmVzc2VzIHRvIHRoaXMgdHlwZVxuICAgICAqIG9mIHNlcnZlciBncm91cC5cbiAgICAgKi9cbiAgICByZWFkb25seSBzZXJ2ZXJHcm91cFR5cGU/OiBzdHJpbmcgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSBzdGlja3lTZXNzaW9uQ29uZmlnOiBUaGUgY29uZmlndXJhdGlvbiBvZiBzZXNzaW9uIHBlcnNpc3RlbmNlLlxuICAgICAqIE5vdGUgVGhpcyBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQgaWYgdGhlIFNlcnZlckdyb3VwVHlwZSBwYXJhbWV0ZXIgaXMgc2V0IHRvIEluc3RhbmNlIG9yIElwLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHN0aWNreVNlc3Npb25Db25maWc/OiBSb3NTZXJ2ZXJHcm91cC5TdGlja3lTZXNzaW9uQ29uZmlnUHJvcGVydHkgfCByb3MuSVJlc29sdmFibGU7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0eSB0YWdzOiBUYWdzIHRvIGF0dGFjaCB0byBpbnN0YW5jZS4gTWF4IHN1cHBvcnQgMjAgdGFncyB0byBhZGQgZHVyaW5nIGNyZWF0ZSBpbnN0YW5jZS4gRWFjaCB0YWcgd2l0aCB0d28gcHJvcGVydGllcyBLZXkgYW5kIFZhbHVlLCBhbmQgS2V5IGlzIHJlcXVpcmVkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IHRhZ3M/OiBSb3NTZXJ2ZXJHcm91cC5UYWdzUHJvcGVydHlbXTtcbn1cblxuLyoqXG4gKiBBIFJPUyByZXNvdXJjZSB0eXBlOiAgYEFMSVlVTjo6QUxCOjpTZXJ2ZXJHcm91cGBcbiAqL1xuZXhwb3J0IGNsYXNzIFNlcnZlckdyb3VwIGV4dGVuZHMgcm9zLlJlc291cmNlIHtcblxuICAgIC8qKlxuICAgICAqIEEgZmFjdG9yeSBtZXRob2QgdGhhdCBjcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIHRoaXMgY2xhc3MgZnJvbSBhbiBvYmplY3RcbiAgICAgKiBjb250YWluaW5nIHRoZSBwcm9wZXJ0aWVzIG9mIHRoaXMgUk9TIHJlc291cmNlLCB3aGljaCB3aWxsIGJlIGFzc2lnbmVkIHRvIFJPUyByZXNvdXJjZS5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEF0dHJpYnV0ZSBTZXJ2ZXJHcm91cElkOiBUaGUgSUQgb2YgdGhlIHNlcnZlciBncm91cC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYXR0clNlcnZlckdyb3VwSWQ6IHJvcy5JUmVzb2x2YWJsZTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBgQUxJWVVOOjpBTEI6OlNlcnZlckdyb3VwYC5cbiAgICAgKlxuICAgICAqIFBhcmFtIHNjb3BlIC0gc2NvcGUgaW4gd2hpY2ggdGhpcyByZXNvdXJjZSBpcyBkZWZpbmVkXG4gICAgICogUGFyYW0gaWQgICAgLSBzY29wZWQgaWQgb2YgdGhlIHJlc291cmNlXG4gICAgICogUGFyYW0gcHJvcHMgLSByZXNvdXJjZSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IHJvcy5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBTZXJ2ZXJHcm91cFByb3BzLCBlbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludDpib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgICAgIGNvbnN0IHJvc1NlcnZlckdyb3VwID0gbmV3IFJvc1NlcnZlckdyb3VwKHRoaXMsIGlkLCAge1xuICAgICAgICAgICAgdnBjSWQ6IHByb3BzLnZwY0lkLFxuICAgICAgICAgICAgcmVzb3VyY2VHcm91cElkOiBwcm9wcy5yZXNvdXJjZUdyb3VwSWQsXG4gICAgICAgICAgICBzY2hlZHVsZXI6IHByb3BzLnNjaGVkdWxlcixcbiAgICAgICAgICAgIHN0aWNreVNlc3Npb25Db25maWc6IHByb3BzLnN0aWNreVNlc3Npb25Db25maWcsXG4gICAgICAgICAgICBoZWFsdGhDaGVja0NvbmZpZzogcHJvcHMuaGVhbHRoQ2hlY2tDb25maWcsXG4gICAgICAgICAgICBwcm90b2NvbDogcHJvcHMucHJvdG9jb2wsXG4gICAgICAgICAgICBzZXJ2ZXJHcm91cFR5cGU6IHByb3BzLnNlcnZlckdyb3VwVHlwZSxcbiAgICAgICAgICAgIHRhZ3M6IHByb3BzLnRhZ3MsXG4gICAgICAgICAgICBzZXJ2ZXJHcm91cE5hbWU6IHByb3BzLnNlcnZlckdyb3VwTmFtZSxcbiAgICAgICAgfSwgZW5hYmxlUmVzb3VyY2VQcm9wZXJ0eUNvbnN0cmFpbnQgJiYgdGhpcy5zdGFjay5lbmFibGVSZXNvdXJjZVByb3BlcnR5Q29uc3RyYWludCk7XG4gICAgICAgIHRoaXMucmVzb3VyY2UgPSByb3NTZXJ2ZXJHcm91cDtcbiAgICAgICAgdGhpcy5hdHRyU2VydmVyR3JvdXBJZCA9IHJvc1NlcnZlckdyb3VwLmF0dHJTZXJ2ZXJHcm91cElkO1xuICAgIH1cbn1cbiJdfQ==