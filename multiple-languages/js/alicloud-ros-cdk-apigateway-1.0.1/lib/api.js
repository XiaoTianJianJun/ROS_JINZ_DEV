"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Api = exports.ApiProperty = void 0;
const ros = require("@alicloud/ros-cdk-core");
const apigateway_generated_1 = require("./apigateway.generated");
Object.defineProperty(exports, "ApiProperty", { enumerable: true, get: function () { return apigateway_generated_1.RosApi; } });
/**
 * A ROS resource type:  `ALIYUN::ApiGateway::Api`
 */
class Api extends ros.Resource {
    /**
     * Create a new `ALIYUN::ApiGateway::Api`.
     *
     * Param scope - scope in which this resource is defined
     * Param id    - scoped id of the resource
     * Param props - resource properties
     */
    constructor(scope, id, props, enableResourcePropertyConstraint = true) {
        super(scope, id);
        const rosApi = new apigateway_generated_1.RosApi(this, id, {
            requestConfig: props.requestConfig,
            description: props.description,
            resultSample: props.resultSample,
            disableInternet: props.disableInternet,
            apiName: props.apiName,
            forceNonceCheck: props.forceNonceCheck,
            resultType: props.resultType ? props.resultType : 'JSON',
            failResultSample: props.failResultSample,
            errorCodeSamples: props.errorCodeSamples,
            serviceParametersMap: props.serviceParametersMap,
            groupId: props.groupId,
            requestParameters: props.requestParameters,
            appCodeAuthType: props.appCodeAuthType,
            serviceConfig: props.serviceConfig,
            constParameters: props.constParameters,
            systemParameters: props.systemParameters,
            openIdConnectConfig: props.openIdConnectConfig,
            visibility: props.visibility,
            serviceParameters: props.serviceParameters,
            authType: props.authType,
            tags: props.tags,
        }, enableResourcePropertyConstraint && this.stack.enableResourcePropertyConstraint);
        this.resource = rosApi;
        this.attrApiId = rosApi.attrApiId;
    }
}
exports.Api = Api;
//# sourceMappingURL=data:application/json;base64,