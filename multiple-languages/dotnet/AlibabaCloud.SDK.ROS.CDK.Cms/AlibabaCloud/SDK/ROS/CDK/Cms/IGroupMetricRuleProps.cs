using Amazon.JSII.Runtime.Deputy;

#pragma warning disable CS0672,CS0809,CS1591

namespace AlibabaCloud.SDK.ROS.CDK.Cms
{
    /// <summary>Properties for defining a `ALIYUN::CMS::GroupMetricRule`.</summary>
    [JsiiInterface(nativeType: typeof(IGroupMetricRuleProps), fullyQualifiedName: "@alicloud/ros-cdk-cms.GroupMetricRuleProps")]
    public interface IGroupMetricRuleProps
    {
        /// <summary>Property category: The abbreviation of the service name.</summary>
        /// <remarks>
        /// Valid values:
        /// ECS (including Alibaba Cloud and non-Alibaba Cloud hosts)
        /// RDS (ApsaraDB for RDS)
        /// ADS (AnalyticDB)
        /// SLB (Server Load Balancer)
        /// VPC (Virtual Private Cloud)
        /// APIGATEWAY (API Gateway)
        /// CDN
        /// CS (Container Service for Swarm)
        /// DCDN (Dynamic Route for CDN)
        /// DDoS (distributed denial of service)
        /// EIP (Elastic IP)
        /// ELASTICSEARCH (Elasticsearch)
        /// EMR (E-MapReduce)
        /// ESS (Auto Scaling)
        /// HBASE (ApsaraDB for HBase)
        /// IOT_EDGE (IoT Edge)
        /// K8S_POD (k8s pod)
        /// KVSTORE_SHARDING (ApsaraDB for Redis cluster version)
        /// KVSTORE_SPLITRW (ApsaraDB for Redis read/write splitting version)
        /// KVSTORE_STANDARD (ApsaraDB for Redis standard version)
        /// MEMCACHE (ApsaraDB for Memcache)
        /// MNS (Message Service)
        /// MONGODB (ApsaraDB for MongoDB replica set instances)
        /// MONGODB_CLUSTER (ApsaraDB for MongoDB cluster version)
        /// MONGODB_SHARDING (ApsaraDB for MongoDB sharded clusters)
        /// MQ_TOPIC (Message Service topic)
        /// OCS (original version of ApsaraDB for Memcache)
        /// OPENSEARCH (Open Search)
        /// OSS (Object Storage Service)
        /// POLARDB (ApsaraDB for POLARDB)
        /// PETADATA (HybridDB for MySQL)
        /// SCDN (Secure Content Delivery Network)
        /// SHAREBANDWIDTHPACKAGES (shared bandwidth package)
        /// SLS (Log Service)
        /// VPN (VPN Gateway)
        /// </remarks>
        [JsiiProperty(name: "category", typeJson: "{\"primitive\":\"string\"}")]
        string Category
        {
            get;
        }

        /// <summary>Property escalations: undefined.</summary>
        [JsiiProperty(name: "escalations", typeJson: "{\"union\":{\"types\":[{\"fqn\":\"@alicloud/ros-cdk-core.IResolvable\"},{\"fqn\":\"@alicloud/ros-cdk-cms.RosGroupMetricRule.EscalationsProperty\"}]}}")]
        object Escalations
        {
            get;
        }

        /// <summary>Property groupId: The ID of application group.</summary>
        [JsiiProperty(name: "groupId", typeJson: "{\"primitive\":\"string\"}")]
        string GroupId
        {
            get;
        }

        /// <summary>Property metricName: The name of the metric.</summary>
        /// <remarks>
        /// For more information, call DescribeMetricMetaList or see Preset metrics reference.
        /// </remarks>
        [JsiiProperty(name: "metricName", typeJson: "{\"primitive\":\"string\"}")]
        string MetricName
        {
            get;
        }

        /// <summary>Property namespace: The data namespace of the service.</summary>
        /// <remarks>
        /// For more information, call DescribeMetricMetaList
        /// or see Preset metrics reference.
        /// </remarks>
        [JsiiProperty(name: "namespace", typeJson: "{\"primitive\":\"string\"}")]
        string Namespace
        {
            get;
        }

        /// <summary>Property ruleId: The ID of the alert rule.</summary>
        /// <remarks>
        /// The IDs of alert rules are generated by callers to ensure
        /// uniqueness.
        /// </remarks>
        [JsiiProperty(name: "ruleId", typeJson: "{\"primitive\":\"string\"}")]
        string RuleId
        {
            get;
        }

        /// <summary>Property ruleName: The name of the alert rule.</summary>
        [JsiiProperty(name: "ruleName", typeJson: "{\"primitive\":\"string\"}")]
        string RuleName
        {
            get;
        }

        /// <summary>Property dimensions: The expended resource dimensions.</summary>
        [JsiiProperty(name: "dimensions", typeJson: "{\"primitive\":\"string\"}", isOptional: true)]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        string? Dimensions
        {
            get
            {
                return null;
            }
        }

        /// <summary>Property effectiveInterval: The period when the alert rule is effective.</summary>
        [JsiiProperty(name: "effectiveInterval", typeJson: "{\"primitive\":\"string\"}", isOptional: true)]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        string? EffectiveInterval
        {
            get
            {
                return null;
            }
        }

        /// <summary>Property emailSubject: The subject of the alert notification email.</summary>
        [JsiiProperty(name: "emailSubject", typeJson: "{\"primitive\":\"string\"}", isOptional: true)]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        string? EmailSubject
        {
            get
            {
                return null;
            }
        }

        /// <summary>Property interval: The detection period of alerts.</summary>
        [JsiiProperty(name: "interval", typeJson: "{\"primitive\":\"number\"}", isOptional: true)]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        double? Interval
        {
            get
            {
                return null;
            }
        }

        /// <summary>Property noEffectiveInterval: The period when the alert rule is ineffective.</summary>
        [JsiiProperty(name: "noEffectiveInterval", typeJson: "{\"primitive\":\"string\"}", isOptional: true)]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        string? NoEffectiveInterval
        {
            get
            {
                return null;
            }
        }

        /// <summary>Property period: The aggregation period.</summary>
        /// <remarks>
        /// Unite: second.
        /// </remarks>
        [JsiiProperty(name: "period", typeJson: "{\"primitive\":\"number\"}", isOptional: true)]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        double? Period
        {
            get
            {
                return null;
            }
        }

        /// <summary>Property silenceTime: The duration of the mute period during which new alerts are not sent even if the trigger conditions are met.</summary>
        /// <remarks>
        /// Unit: second. Default value: 86400. Minimum value: 60.
        /// </remarks>
        [JsiiProperty(name: "silenceTime", typeJson: "{\"primitive\":\"number\"}", isOptional: true)]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        double? SilenceTime
        {
            get
            {
                return null;
            }
        }

        /// <summary>Property webhook: The URL of the callback triggered when an alert occurs.</summary>
        [JsiiProperty(name: "webhook", typeJson: "{\"primitive\":\"string\"}", isOptional: true)]
        [Amazon.JSII.Runtime.Deputy.JsiiOptional]
        string? Webhook
        {
            get
            {
                return null;
            }
        }

        /// <summary>Properties for defining a `ALIYUN::CMS::GroupMetricRule`.</summary>
        [JsiiTypeProxy(nativeType: typeof(IGroupMetricRuleProps), fullyQualifiedName: "@alicloud/ros-cdk-cms.GroupMetricRuleProps")]
        internal sealed class _Proxy : DeputyBase, AlibabaCloud.SDK.ROS.CDK.Cms.IGroupMetricRuleProps
        {
            private _Proxy(ByRefValue reference): base(reference)
            {
            }

            /// <summary>Property category: The abbreviation of the service name.</summary>
            /// <remarks>
            /// Valid values:
            /// ECS (including Alibaba Cloud and non-Alibaba Cloud hosts)
            /// RDS (ApsaraDB for RDS)
            /// ADS (AnalyticDB)
            /// SLB (Server Load Balancer)
            /// VPC (Virtual Private Cloud)
            /// APIGATEWAY (API Gateway)
            /// CDN
            /// CS (Container Service for Swarm)
            /// DCDN (Dynamic Route for CDN)
            /// DDoS (distributed denial of service)
            /// EIP (Elastic IP)
            /// ELASTICSEARCH (Elasticsearch)
            /// EMR (E-MapReduce)
            /// ESS (Auto Scaling)
            /// HBASE (ApsaraDB for HBase)
            /// IOT_EDGE (IoT Edge)
            /// K8S_POD (k8s pod)
            /// KVSTORE_SHARDING (ApsaraDB for Redis cluster version)
            /// KVSTORE_SPLITRW (ApsaraDB for Redis read/write splitting version)
            /// KVSTORE_STANDARD (ApsaraDB for Redis standard version)
            /// MEMCACHE (ApsaraDB for Memcache)
            /// MNS (Message Service)
            /// MONGODB (ApsaraDB for MongoDB replica set instances)
            /// MONGODB_CLUSTER (ApsaraDB for MongoDB cluster version)
            /// MONGODB_SHARDING (ApsaraDB for MongoDB sharded clusters)
            /// MQ_TOPIC (Message Service topic)
            /// OCS (original version of ApsaraDB for Memcache)
            /// OPENSEARCH (Open Search)
            /// OSS (Object Storage Service)
            /// POLARDB (ApsaraDB for POLARDB)
            /// PETADATA (HybridDB for MySQL)
            /// SCDN (Secure Content Delivery Network)
            /// SHAREBANDWIDTHPACKAGES (shared bandwidth package)
            /// SLS (Log Service)
            /// VPN (VPN Gateway)
            /// </remarks>
            [JsiiProperty(name: "category", typeJson: "{\"primitive\":\"string\"}")]
            public string Category
            {
                get => GetInstanceProperty<string>()!;
            }

            /// <summary>Property escalations: undefined.</summary>
            [JsiiProperty(name: "escalations", typeJson: "{\"union\":{\"types\":[{\"fqn\":\"@alicloud/ros-cdk-core.IResolvable\"},{\"fqn\":\"@alicloud/ros-cdk-cms.RosGroupMetricRule.EscalationsProperty\"}]}}")]
            public object Escalations
            {
                get => GetInstanceProperty<object>()!;
            }

            /// <summary>Property groupId: The ID of application group.</summary>
            [JsiiProperty(name: "groupId", typeJson: "{\"primitive\":\"string\"}")]
            public string GroupId
            {
                get => GetInstanceProperty<string>()!;
            }

            /// <summary>Property metricName: The name of the metric.</summary>
            /// <remarks>
            /// For more information, call DescribeMetricMetaList or see Preset metrics reference.
            /// </remarks>
            [JsiiProperty(name: "metricName", typeJson: "{\"primitive\":\"string\"}")]
            public string MetricName
            {
                get => GetInstanceProperty<string>()!;
            }

            /// <summary>Property namespace: The data namespace of the service.</summary>
            /// <remarks>
            /// For more information, call DescribeMetricMetaList
            /// or see Preset metrics reference.
            /// </remarks>
            [JsiiProperty(name: "namespace", typeJson: "{\"primitive\":\"string\"}")]
            public string Namespace
            {
                get => GetInstanceProperty<string>()!;
            }

            /// <summary>Property ruleId: The ID of the alert rule.</summary>
            /// <remarks>
            /// The IDs of alert rules are generated by callers to ensure
            /// uniqueness.
            /// </remarks>
            [JsiiProperty(name: "ruleId", typeJson: "{\"primitive\":\"string\"}")]
            public string RuleId
            {
                get => GetInstanceProperty<string>()!;
            }

            /// <summary>Property ruleName: The name of the alert rule.</summary>
            [JsiiProperty(name: "ruleName", typeJson: "{\"primitive\":\"string\"}")]
            public string RuleName
            {
                get => GetInstanceProperty<string>()!;
            }

            /// <summary>Property dimensions: The expended resource dimensions.</summary>
            [JsiiOptional]
            [JsiiProperty(name: "dimensions", typeJson: "{\"primitive\":\"string\"}", isOptional: true)]
            public string? Dimensions
            {
                get => GetInstanceProperty<string?>();
            }

            /// <summary>Property effectiveInterval: The period when the alert rule is effective.</summary>
            [JsiiOptional]
            [JsiiProperty(name: "effectiveInterval", typeJson: "{\"primitive\":\"string\"}", isOptional: true)]
            public string? EffectiveInterval
            {
                get => GetInstanceProperty<string?>();
            }

            /// <summary>Property emailSubject: The subject of the alert notification email.</summary>
            [JsiiOptional]
            [JsiiProperty(name: "emailSubject", typeJson: "{\"primitive\":\"string\"}", isOptional: true)]
            public string? EmailSubject
            {
                get => GetInstanceProperty<string?>();
            }

            /// <summary>Property interval: The detection period of alerts.</summary>
            [JsiiOptional]
            [JsiiProperty(name: "interval", typeJson: "{\"primitive\":\"number\"}", isOptional: true)]
            public double? Interval
            {
                get => GetInstanceProperty<double?>();
            }

            /// <summary>Property noEffectiveInterval: The period when the alert rule is ineffective.</summary>
            [JsiiOptional]
            [JsiiProperty(name: "noEffectiveInterval", typeJson: "{\"primitive\":\"string\"}", isOptional: true)]
            public string? NoEffectiveInterval
            {
                get => GetInstanceProperty<string?>();
            }

            /// <summary>Property period: The aggregation period.</summary>
            /// <remarks>
            /// Unite: second.
            /// </remarks>
            [JsiiOptional]
            [JsiiProperty(name: "period", typeJson: "{\"primitive\":\"number\"}", isOptional: true)]
            public double? Period
            {
                get => GetInstanceProperty<double?>();
            }

            /// <summary>Property silenceTime: The duration of the mute period during which new alerts are not sent even if the trigger conditions are met.</summary>
            /// <remarks>
            /// Unit: second. Default value: 86400. Minimum value: 60.
            /// </remarks>
            [JsiiOptional]
            [JsiiProperty(name: "silenceTime", typeJson: "{\"primitive\":\"number\"}", isOptional: true)]
            public double? SilenceTime
            {
                get => GetInstanceProperty<double?>();
            }

            /// <summary>Property webhook: The URL of the callback triggered when an alert occurs.</summary>
            [JsiiOptional]
            [JsiiProperty(name: "webhook", typeJson: "{\"primitive\":\"string\"}", isOptional: true)]
            public string? Webhook
            {
                get => GetInstanceProperty<string?>();
            }
        }
    }
}
